(# The Pear Interpreter
  This file contains an interpreter for Pear, written in Pear. Use it by calling
  it with a string, encoded as a linked list.)
(let
  core (import "core")
  opening? (\ char (== char (car "(")))
  closing? (\ char (== char (car ")")))
  space? (\ char (== char (car " ")))
  newline? (\ char (== char 20))
  whitespace? (\ char (or (space? char) (newline? char)))
  to_tree_rec (\ to_tree_rec input
    (# Takes an input string, returns (& parsed stuff rest string).)
    (if (nil? input)
      (& parsed :nil rest :nil)
      (let
        char (input :car)
        (if (opening? char)
          (TODO (to_tree_rec to_tree_rec (input :cdr)))
          (if (closing? char)
            (& parsed :nil rest input)
            (if (whitespace? char))))))
  to_code (\ tree TODO)
  eval (\ code TODO)
  (\ code (eval (to_code (to_tree code))))))
