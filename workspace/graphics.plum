import
  "..core"
    Byte, Matrix t, Size, Int, + Int Int, to Int Int, contains (Range Int) Int,
    Range t, and Bool Bool, Bool, get Texture Int Int, Position, - Int Int,
    generate_matrix Size (\ Int Int -> t), to_int Byte, == Int Int, to_byte Int,

Color = & red: Byte blue: Byte green: Byte alpha: Byte

rgba red: Int green: Int blue: Int alpha: Int -> Color =
  & red: red.to_byte green: green.to_byte blue: blue.to_byte alpha: 255.to_byte

rgb red: Int green: Int blue: Int -> Color = rgba red green blue 255

Rect = & left: Int top: Int right: Int bottom: Int

by at: Position size: Size -> Rect =
  & left: at.x
    top: at.y
    right: (at.x .+ (size.width))
    bottom: (at.y .+ (size.height))

contains rect: Rect pos: Position -> Bool =
  and
    rect.left .to (rect.right) .contains (pos.x)
    rect.top .to (rect.bottom) .contains (pos.y)

Texture = Matrix Color

generate_texture size: Size generator: (\ Int Int -> Color) -> Texture =
  generate_matrix size generator

generate_texture size: Size color: Color -> Texture =
  generate_texture size \ x: Int y: Int -> color

generate_texture size: Size -> Texture =
  generate_texture
    size
    & red: 0.to_byte green: 0.to_byte blue: 0.to_byte alpha: 0.to_byte

draw to: Texture at: Position what: Texture -> Texture =
  generate_texture
    to.size
    \ x: Int y: Int ->
      base_color = to .get x y
      at .by (what.size) .contains (& x y)
      % false -> base_color
        true ->
          new_color = what .get (x .- (at.x)) (y .- (at.y))
          new_color.alpha.to_int .== 0
          % true -> base_color
            false -> new_color
