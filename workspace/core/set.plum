import
  "..bool" Bool
  "..hash" Hash
  "..int" Int
  "..map"
    Map k v
    empty_map k: Type v: Type Int (\ k -> Hash) (\ k k -> Bool)
    put (Map k v) k v
  "..nothing" Nothing
  "..type" Type

Set t = Map t Nothing

empty_set t: Type capacity: Int hash: (\ t -> Hash) equals: (\ t t -> Bool) -> (Set t) =
  empty_map t Nothing capacity hash equals

empty_set t: Type hash: (\ t -> Hash) equals: (\ t t -> Bool) -> (Set t) =
  empty_set t 0 hash equals

put set: (Set t) value: t -> (Set t) = set .put value &

# put_no_clobber
