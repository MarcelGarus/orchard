import
  "builtins" value_to_anything t, anything_to_value Anything t:Type
  "..array" Array t, iterate (Array t)
  "..byte" Byte, format Byte
  "..int" Int, format Int
  "..iterator"
    Iterator t, map (Iterator a) (\ a -> b), join (Iterator String) String
  "..string" String, + String String
  "..type" Type

to_anything value: t -> Anything = value_to_anything value
to anything: Anything t: Type -> t = anything_to_value anything t

Anything =
  | byte: Byte
    int: Int
    type
    array: (Array Anything)
    struct: (Array (& name: String value: Anything))
    enum: (& name: String value: Anything)
    lambda

format anything: Anything -> String =
  anything
  % byte: byte -> byte.format
    int: int -> int.format
    type -> "type"
    array: items ->
      "(array "
      . +
        items
        . iterate
        . map \ item: Anything -> item.format
        . join " "
      . + ")"
    struct: fields ->
      "(& "
      . +
        fields
        . iterate
        . map
            \ field: (& name: String value: Anything) ->
              (field.name) .+ ": " .+ (field.value.format)
        . join " "
      . + ")"
    enum: (& name value) -> "(| " .+ name .+ ": " .+ (value.format) .+ ")"
    lambda -> "lambda"
