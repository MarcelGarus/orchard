import
  "..array"
    Array t
    copy (Array t) (Array t) (Range Int)
    empty_array t: Type
    generate_array Int (\ Int -> t)
    get (Array t) Int
    get_maybe (Array t) Int
    iterate (Array t)
    length (Array t)
    set (Array t) Int t
    slice (Array t) (Range Int)
  "..bool" Bool
  "..hash" Hash
  "..int"
    Int
    == Int Int
    < Int Int
    + Int Int
    - Int Int
    * Int Int
    / Int Int
    max Int Int
    mod Int Int
    round_up_to_power_of Int Int
  "..iterator"
    Iterator t
    filter_map (Iterator a) (\ a -> (Maybe b))
    map (Iterator a) (\ a -> b)
    next (Iterator t)
  "..maybe"
    Maybe t
    else (Maybe t) t
    is_some (Maybe t)
    unwrap (Maybe t) String
  "..never" crash String
  "..string" String
  "..range" Range t, to t t, length (Range Int), contains (Range Int) Int
  "..test" assert Bool
  "..type" Type, as t t: Type

Map k v =
  & buckets: (Array (Bucket k v))
    size: Int
    hash: \ k -> Hash
    equals: \ k k -> Bool

Bucket k v =
  | filled: (Entry k v)
    empty
    tombstone

Entry k v = & key: k value: v

=> key: k value: v -> (Entry k v) = & key value

empty_map k: Type v: Type capacity: Int hash: (\ k -> Hash) equals: (\ k k -> Bool) -> (Map k v) =
  & buckets:
      generate_array capacity \ index: Int -> (| empty) .as (Bucket k v)
    size: 0
    hash
    equals

empty_map k: Type v: Type hash: (\ k -> Hash) equals: (\ k k -> Bool) -> (Map k v) =
  empty_map k v 0 hash equals

required_buckets size: Int -> Int =
  max_fill_percentage = 80
  max (size .* 100 ./ max_fill_percentage) 8

# Makes sure that the map can reach the target_size without allocating.
reserve map: (Map k v) target_size: Int -> (Map k v) =
  map.buckets.length .< (required_buckets target_size)
  % false -> map
    true ->
      (& buckets size hash equals) = map
      capacity = (required_buckets target_size) .round_up_to_power_of 2
      empty_map k v capacity hash equals
      # TODO: copy items to the new map

put map: (Map k v) entry: (Entry k v) -> (Map k v) =
  (& key value) = entry
  map .put key value

put map: (Map k v) key: k value: v -> (Map k v) =
  (& buckets size hash: hash_fun equals) = map .reserve (map.size .+ 1)
  hash = hash_fun key
  new_buckets = raw_put buckets hash key value
  & buckets: new_buckets size: (size .+ 1) hash: hash_fun equals

raw_put buckets: (Array (Bucket k v)) index: Int key: k value: v -> (Array (Bucket k v)) =
  index = index .mod (buckets.length)
  buckets .get index
  % filled    -> | keep_searching
    empty     -> | use_this_bucket
    tombstone -> | use_this_bucket
  % use_this_bucket -> buckets .set index | filled: & key value
    keep_searching  -> raw_put buckets (index .+ 1) key value

get map: (Map k v) key: k -> v =
  map .get_maybe key .unwrap "Key is not in the map."

get_maybe map: (Map k v) key: k -> (Maybe v) =
  hash = (map.hash) key
  map.buckets .raw_get_maybe hash key (map.equals)

raw_get_maybe buckets: (Array (Bucket k v)) index: Int key: k equals: (\ k k -> Bool) -> (Maybe v) =
  index = index .mod (buckets.length)
  buckets .get index
  % filled: entry ->
      equals (entry.key) key
      % true  -> | found_it: entry.value
        false -> | keep_searching
    tombstone -> | keep_searching
    empty     -> | not_in_map
  % found_it: value -> | some: value
    not_in_map      -> | none
    keep_searching  -> buckets .raw_get_maybe (index .+ 1) key equals

remove map: (Map k v) key: k -> (Map k v) =
  (& buckets size hash equals) = map
  & buckets: buckets .raw_remove (hash key) key equals
    size: size .- 1
    hash
    equals

raw_remove buckets: (Array (Bucket k v)) hash: Int key: k equals: (\ k k -> Bool) -> (Array (Bucket k v)) =
  index = hash .mod (buckets.length)
  buckets .get index
  % filled: entry ->
      equals (entry.key) key
      % true  -> | remove
        false -> | keep_searching
    empty ->     | not_in_map
    tombstone -> | keep_searching
  % not_in_map     -> buckets
    remove         -> buckets .set index | tombstone
    keep_searching -> raw_remove buckets (hash .+ 1) key equals

iterate map: (Map k v) -> (Iterator (Entry k v)) =
  map.buckets
  . iterate
  . filter_map
      \ bucket: (Bucket k v) ->
        bucket
        % filled: entry -> | some: entry
          empty         -> | none
          tombstone     -> | none

keys the_map: (Map k v) -> (Iterator k) =
  the_map.iterate .map \ entry: (Entry k v) -> entry.key

values the_map: (Map k v) -> (Iterator v) =
  the_map.iterate .map \ entry: (Entry k v) -> entry.value

contains map: (Map k v) key: k -> Bool = map .get_maybe key .is_some

# get_or_put
# put_no_clobber
# get_put
# remove

# Specialized constructors for common map key types.

empty_int_map v: Type -> (Map Int v) =
  empty_map Int v (\ key: Int -> key) (\ a: Int b: Int -> a .== b)

#map entries: (List (Entry Int v)) -> (Map Int v) =
#  empty_int_map .put_all (entries.iterate)
#  # TODO: add entries
