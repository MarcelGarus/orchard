# Hashing  
# You should implement a hash(&Hasher, T) function for types that can be hashed.
# In this function, they can contribute some uniqueness/entropy to the Hasher by
# calling other hash functions on it. In the end, all hash functions boil down
# to hash(&Hasher, Int). The Hasher uses the djb2 algorithm.

#Hasher =
#  | Hasher Int

#initial_hasher -> Hasher = Hasher 5381
#add hasher: Hasher value: Int -> Hasher =
#  hasher
#  % Hasher state: state | * 33 | + value | Hasher
#finish hasher: Hasher -> Int =
#  hasher
#  % Hasher state: state | * 33

#fun hash_all[I](hasher: &Hasher, iter: I) {
#  for item in iter do hasher.hash(item)
#}