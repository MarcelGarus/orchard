# Ordering  
# Many types have an inherent order. This module has functions that simplify
# working with such types.

export Ordering flip

Ordering =
  | Less
    Equal
    Greater

flip ordering: Ordering -> Ordering =
  ordering
  % Less: Greater
    Equal: Equal
    Greater: Less

# fun <[T](a: T, b: T): Bool { a <=> b is less }
# fun >[T](a: T, b: T): Bool { a <=> b is greater }
# fun >=[T](a: T, b: T): Bool { not(a <=> b is less) }
# fun <=[T](a: T, b: T): Bool { not(a <=> b is greater) }

# fun min[T](a: T, b: T): T { if a < b then a else b }
# fun max[T](a: T, b: T): T { if a > b then a else b }
# fun clamp[T](a: T, range: Range[T]): T { max(range.start, min(range.end.dec(), a)) }
