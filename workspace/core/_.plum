# Welcome to Plum!  

import
  ".bool"
    Bool, not Bool, equals Bool Bool, and Bool Bool, or Bool Bool,
    xor Bool Bool, implies Bool Bool, format Bool
  ".call" call (\ -> t)
  ".int"
    Int, + Int Int, - Int Int, * Int Int, / Int Int, mod Int Int, and Int Int,
    or Int Int, xor Int Int, shift_left Int Int, shift_right Int Int,
    pow Int Int, negate Int, abs Int, compare Int Int, == Int Int, != Int Int,
    < Int Int, > Int Int, <= Int Int, >= Int Int, round_up_to_multiple_of Int,
    round_up_to_power_of Int, sqrt Int, log_two Int, format Int
  ".iterator"
    Iterator t, next (Iterator t), filter_map (Iterator a) (\ a -> (Maybe b)),
    map (Iterator a) (\ a -> b), filter (Iterator a) (\ a -> Bool),
    skip (Iterator a) Int, take (Iterator a) Int,
    skip_while (Iterator a) (\ a -> Bool),
    take_while (Iterator a) (\ a -> Bool),
    map_while (Iterator a) (\ a -> (Maybe b)), zip (Iterator aa) (Iterator bb),
    enumerate (Iterator a), first (Iterator a), last (Iterator a),
    nth (Iterator a) Int, step_by (Iterator a) Int,
    chain (Iterator t) (Iterator t),
    flat_map (Iterator a) (\ a -> (Iterator b)), intersperse (Iterator a) a,
    flatten (Iterator (Iterator a)), fold (Iterator a) s (\ s a -> s),
    reduce (Iterator a) (\ a a -> a), count (Iterator t), sum (Iterator Int),
    min (Iterator Int), max (Iterator Int), cycle (Iterator a),
    find (Iterator a) (\ a -> Bool), all_true (Iterator Bool),
    all (Iterator a) (\ a -> Bool), any_true (Iterator Bool),
    any (Iterator a) (\ a -> Bool)
  ".list"
    List t, get (List t) Int, get_maybe (List t) Int, is_empty (List t), list t,
    list t t, list t t t, len (List t), iterate (List t), to_list (Iterator t)
  ".maybe" Maybe t, unwrap (Maybe t) String, unwrap (Maybe t)
  ".never" crash String
  ".nothing" Nothing, format Nothing, equals Nothing Nothing, ignore t
  ".ordering"
    Ordering, flip Ordering, is_== Ordering, is_!= Ordering, is_< Ordering,
    is_> Ordering, is_<= Ordering, is_>= Ordering
  ".result" Result o e, unwrap (Result o e)
  ".string" String, + String String
  ".test" assert Bool, assert Bool String
  ".type" Type, TypeInfo, Field, Variant, type_of t, type_info Type
export
  Bool, not Bool, equals Bool Bool, and Bool Bool, or Bool Bool, xor Bool Bool,
  implies Bool Bool, format Bool,
  call (\ -> t),
  Int, + Int Int, - Int Int, * Int Int, / Int Int, mod Int Int, and Int Int,
  or Int Int, xor Int Int, shift_left Int Int, shift_right Int Int, pow Int Int,
  negate Int, abs Int, compare Int Int, < Int Int, > Int Int,
  round_up_to_multiple_of Int, round_up_to_power_of Int, sqrt Int, log_two Int,
  equals Int Int, format Int,
  List t, get (List t) Int, get_maybe (List t) Int, is_empty (List t), list t,
  list t t, list t t t, len (List t), map (List a) (\ a -> b), sum (List Int),
  Maybe t, unwrap (Maybe t) String, unwrap (Maybe t),
  crash String,
  Nothing, format Nothing, equals Nothing Nothing, ignore t,
  Ordering, flip Ordering, is_== Ordering, is_!= Ordering, is_< Ordering,
  is_> Ordering, is_<= Ordering, is_>= Ordering
  Result o e, unwrap (Result o e),
  String, + String String,
  Type, TypeInfo, Field, Variant, type_of t, type_info Type
