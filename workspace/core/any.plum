import
  "..array" Array t, empty_array t:Type, iterate (Array t)
  "..bool" Bool, not Bool
  "..byte" lower_byte Int
  "..dynamic" Dynamic, to_static Dynamic t:Type
  "..int" Int, >= Int Int, + Int Int
  "..iterator"
    Iterator t, map (Iterator a) (\ a -> b), filter (Iterator a) (\ a -> Bool),
    any (Iterator a) (\ a -> Bool), all (Iterator a) (\ a -> Bool),
    first (Iterator a)
  "..list" List t, to_list (Iterator t), to_array (List t)
  "..maybe" Maybe t, unwrap (Maybe t)
  "..never" crash String
  "..string" String
  "..type" Type, TypeInfo, type_info Type

any t: Type -> t =
  any (type_info t) .to_static t

any type: TypeInfo -> Dynamic =
  type
  % byte -> | byte: (0.lower_byte)
    int -> | int: 0
    type -> | type
    array -> | array: (empty_array Dynamic)
    never -> crash "can't generate Never instance"
    struct: fields ->
      | struct:
          fields
          . iterate
          . map
              \ field: (& name: String type: TypeInfo) ->
                (& name: field.name value: (any (field.type)))
          . to_list
          . to_array
    enum: variants ->
      variant =
        variants
        . iterate
        . filter
          \ variant: (& name: String type: TypeInfo) ->
            not(variant.type.is_definitely_root_recursive)
        . first
        . unwrap
      | enum:
          & name: variant.name
            value: (any (variant.type))
    lambda: lambda ->
      | lambda:
          \ args: (Array Dynamic) ->
            any (lambda.return_type)
    recursive -> crash "type is infinitely recursive"

is_definitely_root_recursive type: TypeInfo -> Bool =
  # Returns whether an instance necessarily contains an instance of the root
  # type.
  is_definitely_root_recursive type 0

is_definitely_root_recursive type: TypeInfo depth: Int -> Bool =
  type
  % byte -> | false
    int -> | false
    type -> | false
    array -> | false
    never -> | true
    struct: fields ->
      fields
      . iterate
      . any
          \ field: (& name: String type: TypeInfo) ->
            field.type .is_definitely_root_recursive (depth .+ 1)
    enum: variants ->
      variants
      . iterate
      . all
        \ variant: (& name: String type: TypeInfo) ->
          variant.type .is_definitely_root_recursive (depth .+ 1)
    lambda -> | false
    recursive: rec_depth -> rec_depth .>= depth
