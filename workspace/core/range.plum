import
  "..bool" Bool
  "..int" Int, + Int Int, == Int Int
  "..iterator" Iterator t

# TODO: turn this into inline comments
# start is inclusive, end is exclusive
Range t =
  & start: t
    end: t

to start: t end: t -> (Range t) = & start: start end: end

through start: Int end: Int -> (Range Int) = & start: start end: (end .+ 1)

is_empty range: (Range Int) -> Bool = range.start .== (range.end)

iterate range: (Range Int) -> (Iterator Int) =
  \ ->
    range.is_empty
    % true -> | empty
      false ->
        | more:
            & item: range.start
              rest: (range.start .+ 1 .to (range.end) .iterate)
