import
  "..bool" Bool, and Bool Bool
  "..int" Int, == Int Int, < Int Int, >= Int Int, + Int Int, - Int Int
  "..iterator" Iterator t

# TODO: turn this into inline comments
# start is inclusive, end is exclusive
Range t = & start: t end: t

to start: t end: t -> (Range t) = & start: start end: end

through start: Int end: Int -> (Range Int) = & start: start end: (end .+ 1)

is_empty range: (Range Int) -> Bool = range.start .== (range.end)

length range: (Range Int) -> Int = range.end .- (range.start)

contains range: (Range Int) number: Int -> Bool =
  and
    number .>= (range.start)
    number .< (range.end)

iterate range: (Range Int) -> (Iterator Int) =
  \ ->
    range.is_empty
    % true -> | empty
      false ->
        (& start end) = range
        | more:
            & item: start
              rest: start .+ 1 .to end .iterate
