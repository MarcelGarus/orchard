import
  "..bool" Bool
  "..call" call (\ -> t)
  "..int"
    Int, + Int Int, - Int Int, == Int Int, >= Int Int, min Int Int, max Int Int
  "..maybe" Maybe t, is_some (Maybe t), unwrap (Maybe t)
  "..never" crash String
  "..string" String
  "..test" assert Bool
export
  Iterator t, next (Iterator t)

Iterator t = \ -> (| empty more: (& item: t rest: (Iterator t)))

next iterator: (Iterator t) -> (| empty more: (& item: t rest: (Iterator t))) =
  call iterator

filter_map iterator: (Iterator a) mapper: (\ a -> (Maybe b)) -> (Iterator b) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        mapper (more.item)
        % some: mapped ->
            | more: & item: mapped rest: (more.rest .filter_map mapper)
          none -> more.rest .filter_map mapper .next

map iterator: (Iterator a) mapper: (\ a -> b) -> (Iterator b) =
  iterator .filter_map (\ item: a -> | some: (mapper item))

filter iterator: (Iterator a) predicate: (\ a -> Bool) -> (Iterator a) =
  iterator
  . filter_map
      \ item: a ->
        predicate item
        % true -> | some: item
          false -> | none

skip iterator: (Iterator a) amount: Int -> (Iterator a) =
  assert (amount .>= 0)
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        amount .== 0
        % true -> | more: more
          false -> more.rest .skip (amount .- 1) .next

take iterator: (Iterator a) amount: Int -> (Iterator a) =
  assert (amount .>= 0)
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        amount .== 0
        % true -> | empty
          false ->
            | more: (& item: more.item rest: (more.rest .take (amount .- 1)))

skip_while iterator: (Iterator a) predicate: (\ a -> Bool) -> (Iterator a) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        predicate (more.item)
        % false -> | more: more
          true -> more.rest .skip_while predicate .next

take_while iterator: (Iterator a) predicate: (\ a -> Bool) -> (Iterator a) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        predicate (more.item)
        % false -> | empty
          true ->
            | more: (& item: more.item rest: (more.rest .take_while predicate))

map_while iterator: (Iterator a) predicate: (\ a -> (Maybe b)) -> (Iterator b) =
  iterator
  . map predicate
  . take_while (\ item: (Maybe b) -> item.is_some)
  . map (\ item: (Maybe b) -> item.unwrap)

zip a: (Iterator aa) b: (Iterator bb) -> (Iterator (& a: aa b: bb)) =
  \ ->
    a.next
    % empty ->
        b.next
        % empty -> | empty
          more -> crash "Zipped iterators should have the same length."
      more: more_a ->
        b.next
        % empty -> crash "Zipped iterators should have the same length."
          more: more_b ->
            | more:
                & item: (& a: more_a.item b: more_b.item)
                  rest: (zip (more_a.rest) (more_b.rest))

enumerate iterator: (Iterator a) -> (Iterator (& index: Int item: a)) =
  iterator .enumerate 0
enumerate iterator: (Iterator a) start_index: Int -> (Iterator (& index: Int item: a)) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        | more:
            & item: (& index: start_index item: more.item)
              rest: (more.rest .enumerate (start_index .+ 1))

first iterator: (Iterator a) -> (Maybe a) =
  iterator.next
  % empty -> | none
    more: more -> | some: more.item

last iterator: (Iterator a) -> (Maybe a) =
  iterator.next
  % empty -> | none
    more: more -> | some: (more.rest .last (more.item))
last iterator: (Iterator a) previous: a -> a =
  iterator.next
  % empty -> previous
    more: more -> more.rest .last (more.item)

nth iterator: (Iterator a) n: Int -> (Maybe a) = iterator .skip n .first

step_by iterator: (Iterator a) step: Int -> (Iterator a) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        | more:
            & item: more.item
              rest: more.rest .step_by_skip_first step
step_by_skip_first iterator: (Iterator a) step: Int -> (Iterator a) =
  \ ->
    iterator .skip step .next
    % empty -> | empty
      more: more ->
        | more: & item: more.item rest: (more.rest .step_by_skip_first step)

chain a: (Iterator t) b: (Iterator t) -> (Iterator t) =
  \ ->
    a.next
    % empty -> b.next
      more: more -> | more: (& item: more.item rest: (more.rest .chain b))

flat_map iterator: (Iterator a) mapper: (\ a -> (Iterator b)) -> (Iterator b) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more -> more.item.mapper .chain (more.rest .flat_map mapper) .next

intersperse iterator: (Iterator a) separator: a -> (Iterator a) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        | more:
            & item: more.item
              rest: more.rest .intersperse_after_item separator
intersperse_after_item iterator: (Iterator a) separator: a -> (Iterator a) =
  \ ->
    iterator.next
    % empty -> | empty
      more: more ->
        | more:
            & item: separator
              rest: more.rest .intersperse_after_separator separator (more.item)
intersperse_after_separator iterator: (Iterator a) separator: a next: a -> (Iterator a) =
  \ ->
    | more: (& item: next rest: (iterator .intersperse_after_item separator))

flatten iterator: (Iterator (Iterator a)) -> (Iterator a) =
  iterator .flat_map (\ it: (Iterator a) -> it)

fold iterator: (Iterator a) initial_state: s folder: (\ s a -> s) -> s =
  iterator.next
  % empty -> initial_state
    more: more -> more.rest .fold (folder initial_state (more.item)) folder

reduce iterator: (Iterator a) reducer: (\ a a -> a) -> (Maybe a) =
  iterator.next
  % empty -> | none
    more: more -> | some: (more.rest .fold (more.item) reducer)

count iterator: (Iterator t) -> Int =
  iterator .fold 0 (\ count: Int item: t -> count .+ 1)

sum iterator: (Iterator Int) -> Int =
  iterator .fold 0 (\ a: Int b: Int -> a .+ b)

min iterator: (Iterator Int) -> (Maybe Int) =
  iterator.reduce (\ a: Int b: Int -> min a b)

max iterator: (Iterator Int) -> (Maybe Int) =
  iterator.reduce (\ a: Int b: Int -> max a b)

cycle iterator: (Iterator a) -> (Iterator a) =
  iterator .chain (iterator.cycle)

# TODO: partition

find iterator: (Iterator a) predicate: (\ a -> Bool) -> (Maybe a) =
  iterator .filter predicate .first

all_true iterator: (Iterator Bool) -> Bool =
  iterator.next
  % empty -> | true
    more: more ->
      more.item
      % true -> more.rest.all_true
        false -> | false

all iterator: (Iterator a) predicate: (\ a -> Bool) -> Bool =
  iterator .map predicate .all_true

any_true iterator: (Iterator Bool) -> Bool =
  iterator.next
  % empty -> | false
    more: more ->
      more.item
      % true -> | true
        false -> more.rest.any_true

any iterator: (Iterator a) predicate: (\ a -> Bool) -> Bool =
  iterator .map predicate .any_true
