# Integers  
# If you write a number such as 3 in the code, it's an Int.

import
  "builtins"
    Int add_ints sub_ints mul_ints div_ints mod_ints and_ints or_ints xor_ints
    compare_ints
  "..bool" Bool
  "..ordering" Ordering
  "..string" String +
export
  Int + - * / mod and or xor shift_left shift_right pow negate abs compare < >
  round_up_to_multiple_of round_up_to_power_of sqrt log_two equals format

# var min_int = 0 - 9223372036854775806
# var max_int = 9223372036854775807

+ a: Int b: Int -> Int = add_ints a b
- a: Int b: Int -> Int = sub_ints a b
* a: Int b: Int -> Int = mul_ints a b
/ a: Int b: Int -> Int = div_ints a b
mod a: Int b: Int -> Int = mod_ints a b
and a: Int b: Int -> Int = and_ints a b
or a: Int b: Int -> Int = or_ints a b
xor a: Int b: Int -> Int = xor_ints a b

shift_left int: Int by: Int -> Int =
  by | equals 0
  % True: int
    False: int | mul 2 | shift_left (by | - 1)

shift_right int: Int by: Int -> Int =
  by | equals 0
  % True: int
    False: int | / 2 | shift_left (by | - 1)

pow base: Int exponent: Int -> Int = pow_rec 1 base exponent
pow_rec result: Int base: Int exponent: Int -> Int =
  # TODO: do this more efficiently
  exponent | equals 0
  % True: result
    False: pow_rec (result | * base) base (exponent | - 1)

negate int: Int -> Int = 0 | - int

abs int: Int -> Int =
  compare int 0
  % Less: negate int
    Equal: 0
    Greater: int

compare a: Int b: Int -> Ordering = compare_ints a b

equals a: Int b: Int -> Bool =
  compare_ints a b
  % Less: False
    Equal: True
    Greater: False

< a: Int b: Int -> Bool =
  compare a b
  % Less: True
    Equal: False
    Greater: False

> a: Int b: Int -> Bool =
  compare a b
  % Less: False
    Equal: False
    Greater: True

round_up_to_multiple_of number: Int factor: Int -> Int =
  number | + factor | - 1 | / factor | mul factor

round_up_to_power_of number: Int factor: Int -> Int =
  round_up_to_power_of_rec 1 number factor
round_up_to_power_of_rec power: Int number: Int factor: Int -> Int =
  # TODO: do this more efficiently
  is_big_enough =
    compare power number
    % Less: False
      Equal: True
      Greater: True
  is_big_enough
  % True: power
    False: round_up_to_power_of_rec (power | * factor) number factor

sqrt num: Int -> Int =
  # num >= 0 or panic("you can't take the sqrt of a negative number")
  sqrt_rec 0 num
sqrt_rec candidate: Int target: Int -> Int =
  next = candidate | + 1
  mul next next | compare target
  % Less: sqrt_rec next target
    Equal: next
    Greater: candidate

log_two value: Int -> Int =
  value | equals 1
  % True: 0
    False: log_two (value | / 2) | + 1

# lower_byte int: Int -> Byte = lower_byte int

#fun parse_int(string: String): Maybe[Int] {
#  var num = 0
#  for char in string do {
#    if not({#0..=#9}.contains(char))
#    then return none[Int]()
#    num = num * 10 + {char - #0}.to_int()
#  }
#  some(num)
#}

format int: Int -> String =
  int | less_than 0
  % True: + "-" (negate int | format)
    False:
      +
        int | less_than 10
        % True: ""
          False: int | / 10 | format
        int | mod 10 | format_digit
format_digit digit: Int -> String =
  digit | equals 0
  % True: "0"
    False:
      digit | equals 1
      % True: "1"
        False:
          digit | equals 2
          % True: "2"
            False:
              digit | equals 3
              % True: "3"
                False:
                  digit | equals 4
                  % True: "4"
                    False:
                      digit | equals 5
                      % True: "5"
                        False:
                          digit | equals 6
                          % True: "6"
                            False:
                              digit | equals 7
                              % True: "7"
                                False:
                                  digit | equals 8
                                  % True: "8"
                                    False:
                                      digit | equals 9
                                      % True: "9"
                                        False:
                                          crash "unreachable"
