# Integers  
# If you write a number such as 3 in the code, it's an Int.

import
  "builtins"
    Int add_ints sub_ints mul_ints div_ints mod_ints and_ints or_ints xor_ints
    compare_ints
  "..bool" Bool
  "..ordering" Ordering
  "..string" String +
export
  Int + - * / mod and or xor shift_left shift_right pow negate abs compare < >
  round_up_to_multiple_of round_up_to_power_of sqrt log_two equals format

# var min_int = 0 - 9223372036854775806
# var max_int = 9223372036854775807

+ a: Int b: Int -> Int = add_ints a b
- a: Int b: Int -> Int = sub_ints a b
* a: Int b: Int -> Int = mul_ints a b
/ a: Int b: Int -> Int = div_ints a b
mod a: Int b: Int -> Int = mod_ints a b
and a: Int b: Int -> Int = and_ints a b
or a: Int b: Int -> Int = or_ints a b
xor a: Int b: Int -> Int = xor_ints a b

shift_left int: Int by: Int -> Int =
  by | equals 0
  % true -> int
    false -> int | mul 2 | shift_left (by | - 1)

shift_right int: Int by: Int -> Int =
  by | equals 0
  % true -> int
    false -> int | / 2 | shift_left (by | - 1)

pow base: Int exponent: Int -> Int = pow_rec 1 base exponent
pow_rec result: Int base: Int exponent: Int -> Int =
  # TODO: do this more efficiently
  exponent | equals 0
  % true -> result
    false -> pow_rec (result | * base) base (exponent | - 1)

negate int: Int -> Int = 0 | - int

abs int: Int -> Int =
  compare int 0
  % less -> negate int
    equal -> 0
    greater -> int

compare a: Int b: Int -> Ordering = compare_ints a b

equals a: Int b: Int -> Bool =
  compare_ints a b
  % less -> | false
    equal -> | true
    greater -> | false

< a: Int b: Int -> Bool =
  compare a b
  % less -> | true
    equal -> | false
    greater -> | false

> a: Int b: Int -> Bool =
  compare a b
  % less -> | false
    equal -> | false
    greater -> | true

round_up_to_multiple_of number: Int factor: Int -> Int =
  number | + factor | - 1 | / factor | mul factor

round_up_to_power_of number: Int factor: Int -> Int =
  round_up_to_power_of_rec 1 number factor
round_up_to_power_of_rec power: Int number: Int factor: Int -> Int =
  # TODO: do this more efficiently
  is_big_enough =
    compare power number
    % less -> | false
      equal -> | true
      greater -> | true
  is_big_enough
  % true -> power
    false -> round_up_to_power_of_rec (power | * factor) number factor

sqrt num: Int -> Int =
  # num >= 0 or panic("you can't take the sqrt of a negative number")
  sqrt_rec 0 num
sqrt_rec candidate: Int target: Int -> Int =
  next = candidate | + 1
  mul next next | compare target
  % less -> sqrt_rec next target
    equal -> next
    greater -> candidate

log_two value: Int -> Int =
  value | equals 1
  % true -> 0
    false -> log_two (value | / 2) | + 1

# lower_byte int: Int -> Byte = lower_byte int

#fun parse_int(string: String): Maybe[Int] {
#  var num = 0
#  for char in string do {
#    if not({#0..=#9}.contains(char))
#    then return none[Int]()
#    num = num * 10 + {char - #0}.to_int()
#  }
#  some(num)
#}

format int: Int -> String =
  int | less_than 0
  % true -> + "-" (negate int | format)
    false ->
      +
        int | less_than 10
        % true -> ""
          false -> int | / 10 | format
        int | mod 10 | format_digit
format_digit digit: Int -> String =
  digit | equals 0
  % true -> "0"
    false ->
      digit | equals 1
      % true -> "1"
        false ->
          digit | equals 2
          % true -> "2"
            false ->
              digit | equals 3
              % true -> "3"
                false ->
                  digit | equals 4
                  % true -> "4"
                    false ->
                      digit | equals 5
                      % true -> "5"
                        false ->
                          digit | equals 6
                          % true -> "6"
                            false ->
                              digit | equals 7
                              % true -> "7"
                                false ->
                                  digit | equals 8
                                  % true -> "8"
                                    false ->
                                      digit | equals 9
                                      % true -> "9"
                                        false ->
                                          crash "unreachable"
