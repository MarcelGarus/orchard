import
  "builtins"
    Array t
    generate_array Int (\ Int -> t)
    array_get (Array t) Int
    array_set (Array t) Int t
    array_slice (Array t) (Range Int)
    array_len (Array t)
  "..bool" Bool
  "..byte" Byte, == Byte Byte
  "..int" Int, == Int Int, + Int Int, - Int Int, < Int Int, >= Int Int
  "..iterator"
    Iterator t, zip (Iterator aa) (Iterator bb),
    all (Iterator a) (\ a -> Bool)
  "..maybe" Maybe t
  "..never" crash String
  "..range"
    Range t
    contains (Range Int) Int
    is_empty (Range Int)
    length (Range Int)
    to t t
  "..string" String
  "..test" assert Bool
  "..type" Type, as t t: Type
export
  Array t
  get (Array t) Int
  set (Array t) Int t
  slice (Array t) (Range Int)

empty_array t: Type -> (Array t) =
  generate_array 0 \ index: Int -> crash "never called" .as t

filled_array length: Int item: t -> (Array t) =
  generate_array length \ index: Int -> item

get array: (Array t) index: Int -> t = array .array_get index

get_maybe array: (Array t) index: Int -> (Maybe t) =
  (0 .to (array.length)) .contains index
  % true -> | some: (array .get index)
    false -> | none

set array: (Array t) index: Int item: t -> (Array t) =
  array .array_set index item

slice array: (Array t) range: (Range Int) -> (Array t) =
  array .array_slice range

length array: (Array t) -> Int = array.array_len

is_empty array: (Array t) -> Bool = array.length .== 0

copy destination: (Array t) source: (Array t) range: (Range Int) -> (Array t) =
  # Copies to source items into the destination array at the range.
  assert (source.length .== (range.length))
  range.is_empty
  % true -> destination
    false ->
      copy
        destination .set (range.start) (source .get 0)
        source .slice (1 .to (source.length))
        range.start .+ 1 .to (range.end)

concat a: (Array t) b: (Array t) -> (Array t) =
  generate_array
    a.length .+ (b.length)
    \ index: Int ->
      index .< (a.length)
      % true -> a .get index
        false -> b .get (index .- (a.length))

iterate array: (Array t) -> (Iterator t) =
  \ ->
    array.is_empty
    % true -> | empty
      false ->
        | more:
            & item: array .get 0
              rest: array .slice (1 .to (array.length)) .iterate

compare a: (Array t) b: (Array t) comparer: (\ t t -> Bool) -> Bool =
  a.length .== (b.length)
  % false -> | false
    true ->
      zip (a.iterate) (b.iterate)
      . all \ both: (& a: t b: t) -> comparer (both.a) (both.b)

== a: (Array Byte) b: (Array Byte) -> Bool =
  compare a b \ a: Byte b: Byte -> a .== b

starts_with array: (Array t) prefix: (Array t) comparer: (\ t t -> Bool) -> Bool
= array.length .>= (prefix.length)
  % false -> | false
    true -> compare (array .slice (0 .to (prefix.length))) prefix comparer

starts_with array: (Array Byte) prefix: (Array Byte) -> Bool =
  array .starts_with prefix (\ a: Byte b: Byte -> a .== b)
