# Bool  
# A type with two instances.

import "..string" String
export Bool not equals and or xor implies format

Bool = | true false

not bool: Bool -> Bool =
  bool
  % true -> | false
    false -> | true

equals a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> not b

and a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> | false

or a: Bool b: Bool -> Bool =
  a
  % true -> | true
    false -> b

xor a: Bool b: Bool -> Bool =
  a
  % true -> not b
    false -> b

implies a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> | true

format b: Bool -> String =
  b
  % true -> "true"
    false -> "false"

# fun hash(hasher: &Hasher, value: Bool) { hasher.hash(if value then 0 else 1) }
