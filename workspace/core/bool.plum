# Bool  
# A type with two instances.

import "..string" String
export Bool not equals and or xor implies format

Bool =
  | True
    False

not bool: Bool -> Bool =
  bool
  % True: False
    False: True

equals a: Bool b: Bool -> Bool =
  a
  % True: b
    False: not b

and a: Bool b: Bool -> Bool =
  a
  % True: b
    False: False

or a: Bool b: Bool -> Bool =
  a
  % True: True
    False: b

xor a: Bool b: Bool -> Bool =
  a
  % True: not b
    False: b

implies a: Bool b: Bool -> Bool =
  a
  % True: b
    False: True

format b: Bool -> String =
  b
  % True: "True"
    False: "False"

# fun hash(hasher: &Hasher, value: Bool) { hasher.hash(if value then 0 else 1) }
