# Linked List  

import
  "..bool" Bool
  "..int" Int, + Int Int, - Int Int, == Int Int
  "..iterator" Iterator t, next (Iterator t)
  "..maybe" Maybe t, unwrap (Maybe t) String
  "..string" String
export
  List t, get (List t) Int, get_maybe (List t) Int, is_empty (List t), list t,
  list t t, list t t t, len (List t), map (List a) (\ a -> b), sum (List Int)

List t =
  | empty
    more: (& item: t rest: (List t))

list a: t -> (List t) = | more: (& item: a rest: (| empty))
list a: t b: t -> (List t) = | more: (& item: a rest: (list b))
list a: t b: t c: t -> (List t) = | more: (& item: a rest: (list b c))

len list: (List t) -> Int =
  list
  % empty -> 0
    more: node -> node.rest.len .+ 1

is_empty list: (List t) -> Bool = list.len .== 0

get_maybe list: (List t) index: Int -> (Maybe t) =
  list
  % empty -> | none
    more: node ->
      index .== 0
      % true -> | some: node.item
        false -> node.rest .get_maybe (index .- 1)

get list: (List t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

iterate list: (List t) -> (Iterator t) =
  \ ->
    list
    % empty -> | empty
      more: more -> | more: (& item: more.item rest: (more.rest.iterate))

to_list iterator: (Iterator t) -> (List t) =
  iterator.next
  % empty -> | empty
    more: more -> | more: (& item: more.item rest: more.rest.to_list)
