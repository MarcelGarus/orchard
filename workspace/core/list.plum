# Lists
#
# In Plum, Lists are array lists.

import
  "..array"
    Array t
    generate_array Int (\ Int -> t)
    get (Array t) Int
    get_maybe (Array t) Int
    set (Array t) Int t
    slice (Array t) (Range Int)
    len (Array t)
    copy (Array t) (Array t) (Range Int)
  "..bool" Bool
  "..int" Int, == Int Int, + Int Int, * Int Int, max Int Int
  "..iterator" Iterator t, next (Iterator t)
  "..maybe" Maybe t, unwrap (Maybe t) String, else (Maybe t) t
  "..string" String
  "..range" Range t, to t t, len (Range Int), contains (Range Int) Int
  "..test" assert Bool

List t = & array: (Array t) len: Int

list a: t -> (List t) =
  & array: (generate_array 8 (\ index: Int -> a))
    len: 1
list a: t b: t -> (List t) = list a .push b
list a: t b: t c: t -> (List t) = list a b .push c

is_empty list: (List t) -> Bool = list.len .== 0

push list: (List t) item: t -> (List t) =
  # TODO: hack so that `list` is not kept around until after the list.set
  list_len = list.len
  sufficiently_sized_array =
    list.array.len .== list_len
    % true ->
        new_size = max (list.array.len .* 2) 8
        generate_array
          new_size
          \ index: Int -> list.array .get_maybe index .else item
      false -> list.array
  & array: sufficiently_sized_array .set list_len item
    len: list_len .+ 1

get_maybe list: (List t) index: Int -> (Maybe t) =
  0 .to (list.len) .contains index
  % true -> | some: (list.array .get index)
    false -> | none

get list: (List t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

slice list: (List t) range: (Range Int) -> (List t) =
  & array: (list.array .slice range)
    len: range.len

shrink list: (List t) -> (List t) = list .slice (0 .to (list.len))

iterate list: (List t) -> (Iterator t) =
  \ ->
    list.get_maybe 0
    % none -> | empty
      some: first ->
        | more: (& item: first rest: (list .slice (1 .to (list.len)) .iterate))

#to_list iterator: (Iterator t) -> (List t) =
#  iterator.next
#  % empty -> | empty
#    more: more -> | more: (& item: more.item rest: more.rest.to_list)
