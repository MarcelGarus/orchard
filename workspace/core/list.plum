# Linked List  

import "..bool".Bool
import "..int".Int
import "..int".+
import "..maybe".Maybe
export List
export get
export get_maybe
export is_empty
export list
export len
export map
export sum

List t =
  | Empty
    More t (List t)

list a: t -> (List t) = More a Empty
list a: t b: t -> (List t) = More a (list b)
list a: t b: t c: t -> (List t) = More a (list b c)

len list: (List t) -> Int =
  list
  % Empty: 0
    More item rest: rest | len | + 1

is_empty list: (List t) -> Bool = list | len | equals 0

get_maybe list: (List t) index: Int -> (Maybe t) =
  list
  % Empty: None
    More item rest:
      index | equals 0
      % True: Some item
        False: rest | get_maybe (index | - 1)

get list: (List t) index: Int -> t =
  list | get_maybe index | unwrap "out of bounds"

map list: (List a) mapper: (\ a -> b) -> (List b) =
  list
  % Empty: Empty
    More item rest:
      More
        item | mapper
        rest | map mapper

sum list: (List Int) -> Int =
  list
  % Empty: 0
    More item rest: + item (rest | sum)
