# Linked List  

import
  "..bool" Bool
  "..int" Int +
  "..maybe" Maybe
export List get get_maybe is_empty list len map sum

List t =
  | empty
    more: (& item: t rest: (List t))

list a: t -> (List t) = | more: (& item: a rest: (| empty))
list a: t b: t -> (List t) = | more: (& item: a rest: (list b))
list a: t b: t c: t -> (List t) = | more: (& item: a rest: (list b c))

len list: (List t) -> Int =
  list
  % empty -> 0
    more: node -> node.rest.len .+ 1

is_empty list: (List t) -> Bool = list.len .equals 0

get_maybe list: (List t) index: Int -> (Maybe t) =
  list
  % empty -> | none
    more: node ->
      index .equals 0
      % true -> | some: node.item
        false -> node.rest .get_maybe (index .- 1)

get list: (List t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

map list: (List a) mapper: (\ a -> b) -> (List b) =
  list
  % empty -> | empty
    more: node ->
      | more:
          & item: node.item.mapper
            rest: node.rest .map mapper

sum list: (List Int) -> Int =
  list
  % empty -> 0
    more: node -> node.item .+ (node.rest.sum)
