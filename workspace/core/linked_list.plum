# Linked LinkedList  

import
  "..bool" Bool
  "..int" Int, == Int Int, + Int Int, - Int Int
  "..iterator" Iterator t, next (Iterator t)
  "..maybe" Maybe t, unwrap (Maybe t) String
  "..string" String
export
  LinkedLinkedList t, get (LinkedList t) Int, get_maybe (LinkedList t) Int,
  is_empty (LinkedList t), list t, list t t, list t t t, len (LinkedList t)

LinkedList t =
  | empty
    more: & item: t rest: (LinkedList t)

list a: t -> (LinkedList t) = | more: & item: a rest: | empty
list a: t b: t -> (LinkedList t) = | more: & item: a rest: (list b)
list a: t b: t c: t -> (LinkedList t) = | more: & item: a rest: (list b c)

len list: (LinkedList t) -> Int =
  list
  % empty -> 0
    more: node -> node.rest.len .+ 1

is_empty list: (LinkedList t) -> Bool = list.len .== 0

get_maybe list: (LinkedList t) index: Int -> (Maybe t) =
  list
  % empty -> | none
    more: node ->
      index .== 0
      % true -> | some: node.item
        false -> node.rest .get_maybe (index .- 1)

get list: (LinkedList t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

iterate list: (LinkedList t) -> (Iterator t) =
  \ ->
    list
    % empty -> | empty
      more: (& item rest) -> | more: & item rest: rest.iterate

to_list iterator: (Iterator t) -> (LinkedList t) =
  iterator.next
  % empty -> | empty
    more: (& item rest) -> | more: & item rest: rest.to_list
