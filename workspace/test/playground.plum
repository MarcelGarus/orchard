import "...core".Field
import "...core".Int
import "...core".List
import "...core".Maybe
import "...core".String
import "...core".Type
import "...core".Variant
import "...core".+
import "...core".list
import "...core".map
import "...core".sum

# Task =
#   | Print String (\ -> Task)
#     Exit

main a: Int -> Int =
  list 1 2 3
  | map
      \ item: Int = + item 1
  | sum




to_deutsch type: Type -> String =
  type
  % Int: "Zahl"
    String: "Zeichenkette"
    Struct fields:
      "Struktur (Felder sind " | + (fields | to_deutsch) | + ")"
    Enum variants: "Enumeration (" | + (variants | to_deutsch) | + ")"
    Type: "Typ"

to_deutsch fields: (List Field) -> String =
  fields
  % Empty: "keine Felder"
    More field rest:
      rest
      % Empty: field.name
        More a b:
          field.name
          | + "("
          | + (field.type | to_deutsch)
          | + ") und "
          | + (rest | to_deutsch)

to_deutsch variants: (List Variant) -> String =
  variants
  % Empty: "keine Varianten"
    More variant rest:
      rest
      % Empty: variant.name
        More a b: variant.name | + " oder " | + (rest | to_deutsch)
