
import
  "...core"
    Int, String, List t, list t, push (List t) t, == Int Int, + Int Int,
    empty_int_map v: Type, put (Map k v) k v, Type, Map k v, iterate (List t),
    join (Iterator String), Iterator t, generate_array Int (\ Int -> t),
    iterate (Array t), Array t, is_empty (Array t), get (Array t) Int,
    length (Array t), to t t, slice (Array t) (Range Int), Range t,
    + String String, next (Iterator t), as t t: Type, call (\ -> t),
    get (Map k v) k, list t t, crash String, type_info Type, format TypeInfo,
    TypeInfo, map (Iterator a) (\ a -> b), join (Iterator String) String,
    to_list (Iterator t), format Int

# Blub = \ -> (| foo bar)

Blub = | foo bar: (Array Blub)

main a: Int -> String =
  #foo = \ b: Int -> a
  #foo 5 .format
  type_info Blub .format

Tree = | leaf inner: (Array Tree)

format type: Tree -> String =
  type
  % leaf -> "leaf"
    inner: children ->
      children.iterate.to_list
      "inner"
