import
  "builtins" compare_ints Int Int
  "...core"
    Field, Int, List t, Maybe t, String, Type, Variant, + Int Int, - Int Int,
    len (List t), map (Iterator a) (\ a -> b), sum (Iterator Int), == Int Int,
    + String String, Bool, call (\ -> t), list t t t, iterate (List t),
    to_list (Iterator t), Iterator t, get (List t) Int, >= Int Int,
    filter (Iterator a) (\ a -> Bool), to t t, iterate (Range Int), Range t,
    through Int Int

main a: Int -> Int =
  1 .through 4
  .iterate
  .map (\ item: Int -> item .+ 1)
  .filter (\ item: Int -> item .>= 3)
  .sum

Point2D = & x: Int y: Int
Point3D = & x: Int y: Int z: Int

make_3d point: Point2D -> Point3D =
  & x: point.x
    y: point.y
    z: 0

make_list len: Int -> (List Int) =
  len .== 0
  % true -> | empty
    false -> | more: (& item: 42 rest: (make_list (len .- 1)))
