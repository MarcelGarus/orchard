import
  "...core"
    Int, String, Dynamic, to_dynamic t, format Dynamic, list t t t, List t,
    iterate (List t), map (Iterator a) (\ a -> b), sum (Iterator Int),
    Iterator t, + Int Int, format Int, debug_format value:t, list t t t t t,
    any t:Type, Type, Bool, + String String, generate_array Int (\ Int -> t),
    list t, empty_list t:Type, length (Array t), Array t, < Int Int,
    push (List t) t, get_maybe (Array t) Int, else (Maybe t) t, Maybe t,
    crash String, String, as t t:Type, call (\ -> t), compare Int Int,
    mod Int Int, get (Array t) Int, >= Int Int, to_int Byte, <= Int Int, Byte,
    and Bool Bool, - Int Int, is_empty (Array t), substring String (Range Int),
    Range t, * Int Int, length String, to t t, to_byte Int,
    lower_byte Int, iterate (Array t), filter (Iterator t) (\ t -> Bool),
    / Int Int, list t t
  "...graphics"
    Size, Texture, Color, generate_texture Size (\ Int Int -> t),
    generate_texture Size Color, draw Texture Position Texture, Position,
    rgb Int Int Int
  "...ui" Widget, colored Color Widget, empty_widget Int, padding Int Widget

# TODO: figure out what to do with Tasks
# Task =
#   | exit
#     print: (& message: String then: \ -> Task)
#     random: \ Int -> Task
#     read_line: \ String -> Task
# 
# print message: String then: (\ -> Task) -> Task = | print: & message then
# random then: (\ Int -> Task) -> Task = | random: then
# read_line then: (\ String -> Task) -> Task = | read_line: then

App =
  & render: (\ Size -> Texture)

hello point: (& x: Int y: Int) -> Int =
  point.x .+ (point.y)

main a: Int -> App =
  foo = generate_array 3 (\ i: Int -> a) .iterate .map (\ a: Int -> a .+ 1) .map (\ a: Int -> a .+ 2) .sum
  & render:
      \ size: Size ->
        generate_texture
          size
          \ x: Int y: Int ->
            & red: (x .* foo).lower_byte
              green: (y .* foo).lower_byte
              blue: 0.to_byte
              alpha: 255.to_byte














test_widget a: Int -> Widget =
  white  = rgb (239) (230) (221)
  yellow = rgb (243) (223) (162)
  blue   = rgb (126) (189) (194)
  red    = rgb (187) (68)  (48)
  
  colored
    white
    padding
      1
      colored
        yellow
        padding 2 (colored blue (padding 3 (colored red (empty_widget 0))))






#Frac = & numerator: Int denominator: Int
#
#same_denominator a: Frac b: Frac -> (& a: Frac b: Frac) =
#  denominator = a.denominator .* (b.denominator)
#  & a: & numerator: (a.numerator .* (b.denominator)) denominator
#    b: & numerator: (b.numerator .* (a.denominator)) denominator
#
#+ a: Frac b: Frac -> Frac =
#  & a b = same_denominator a b
#  & numerator: a.numerator .+ (b.numerator)
#    denominator: a.denominator
#
#- a: Frac b: Frac -> Frac =
#  & a b = same_denominator a b
#  & numerator: a.numerator .- (b.numerator)
#    denominator: a.denominator
#
#* a: Frac b: Frac -> Frac =
#  & numerator: a.numerator .* (b.numerator)
#    denominator: a.denominator .* (b.denominator)
#
#/ a: Frac b: Frac -> Frac =
#  & numerator: a.numerator .* (b.denominator)
#    denominator: a.denominator .* (b.numerator)


#fun main() {
#  var texture = screen_texture()
#  var zoom = 1.0
#  var move_x = 0.0 - 0.5
#  var move_y = 0.0
#  var max_iterations = 256
#
#  var width = texture.width.to_float()
#  var height = texture.height.to_float()
#
#  loop {
#    for x in 0..texture.width do
#      for y in 0..texture.height do {
#        var real = 1.5 * {x.to_float() - {width / 2.0}}
#          / {0.5 * zoom * width} + move_x
#        var imag = {y.to_float() - {height / 2.0}}
#          / {0.5 * zoom * height} + move_y
#        var value = mandelbrot(real, imag, max_iterations)
#        | println("Pixel at {x}, {y} looped {value} times")
#        var color = if value == max_iterations
#          then black
#          else color(value % 256, value % 256, value % 256)
#        texture.&.draw(x @ y, color)
#      }
#    texture.show()
#    zoom.& *= {11.to_float() / 10.to_float()}
#  }
#}
#
#fun mandelbrot(real: Float, imag: Float, max_iterations: Int): Int {
#  var new_real = 0.0
#  var new_imag = 0.0
#  var old_real = 0.0
#  var old_imag = 0.0
#  var i = 0
#  loop {
#    if i == max_iterations then break
#    i = i + 1
#    old_real = new_real
#    old_imag = new_imag
#    new_real = {old_real * old_real} - {old_imag * old_imag} + real
#    new_imag = 2.0 * old_real * old_imag + imag
#    if {new_real * new_real} + {new_imag * new_imag} > 4.0 then break
#  }
#  i
#}
#
#mandelbrot real: Frac imag: Frac i: Int -> Int =
#  i .== 5
#  % true -> 5
#    false ->
#      
#