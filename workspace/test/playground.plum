import "...core" Field Int List Maybe String Type Variant + - list len map sum equals

# Task =
#   | Print String (\ -> Task)
#     Exit

main a: Int -> Int =
  point = & x: 2 y: 3
  point.x
  #make_list a .sum

make_list len: Int -> (List Int) =
  equals len 0
  % true -> | empty
    false -> | more: (& item: 42 rest: (make_list (len .- 1)))

inc list: (List Int) -> (List Int) =
  list
  % empty -> | empty
    more: node ->
      | more:
          & item: node.item .+ 1
            rest: inc node.rest

to_deutsch type: Type -> String =
  type
  % int -> "Zahl"
    string -> "Zeichenkette"
    struct: fields ->
      "Struktur (Felder sind " .+ (fields.to_deutsch) .+ ")"
    enum: variants -> "Enumeration (" .+ (variants.to_deutsch) .+ ")"
    type -> "Typ"

to_deutsch fields: (List Field) -> String =
  fields
  % empty -> "keine Felder"
    more: node ->
      field = node.item
      node.rest
      % empty -> field.name
        more ->
          field.name
          .+ "("
          .+ (field.type.to_deutsch)
          .+ ") und "
          .+ (node.rest.to_deutsch)

to_deutsch variants: (List Variant) -> String =
  variants
  % empty -> "keine Varianten"
    more: node ->
      variant = node.item
      node.rest
      % empty -> variant.name
        more -> variant.name .+ " oder " .+ (node.rest.to_deutsch)
