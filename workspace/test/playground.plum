import
  "builtins" compare_ints Int Int
  "...core"
    Field, Int, List t, Maybe t, String, Type, Variant, + Int Int, - Int Int,
    len (List t), map (List a) (\ a -> b), sum (List Int), == Int Int,
    + String String, Bool

main a: Int -> Int =
  origin = & x: 0 y: 0
  origin.make_3d.x

Point2D = & x: Int y: Int
Point3D = & x: Int y: Int z: Int

make_3d point: Point2D -> Point3D =
  & x: point.x
    y: point.y
    z: 0

make_list len: Int -> (List Int) =
  len .== 0
  % true -> | empty
    false -> | more: (& item: 42 rest: (make_list (len .- 1)))
