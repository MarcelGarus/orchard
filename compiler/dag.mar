| Directed Acyclic Graph  

import plum.mar

struct Dag[T] { nodes: List[T] }

struct Id { index: Int }

fun dag[T](): Dag[T] { Dag { nodes = list[T]() } }

fun id(index: Int): Id { Id { index } }

fun put[T](dag: &Dag[T], node: T): Id {
  var id = id(dag.nodes.len)
  dag.nodes.&.push(node)
  id
}
fun get[T](dag: Dag[T], id: Id): T { dag.nodes.get(id.index) }
fun set[T](dag: &Dag[T], id: Id, node: T) { dag.nodes.&.set(id.index, node) }

fun ==(a: Id, b: Id): Bool { a.index == b.index }
fun hash(hasher: &Hasher, id: Id) { hasher.hash(id.index) }

fun write[W](writer: W, id: Id) { writer."@{id.index}" }
