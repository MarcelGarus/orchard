| Pointers, Enums, Structures, and Tamed Operations  
|
| A representation of the program where complex types have been replaced with
| simpler C-like types: (untyped) pointers, (associated) enums, and structures.
| In particular, lambdas have been removed.

import plum.mar

struct Pesto { funs: Map[String, PestoFun] }

struct PestoFun { dag: Dag[PestoExpr], body: PestoBody }
struct PestoBody { param: Id, exprs: Slice[Id], returns: Id }
struct PestoExpr { op: PestoOp, type: PestoType }

enum PestoOp {
  param,
  int: Int,
  string: String,
  struct_: Map[String, Id],
  member: PestoMember,
  enum_: PestoEnum,
  switch_: PestoSwitch,
  function_ptr: String,
  call: PestoCall,
  call_indirect: PestoCallIndirect,
  call_instruction: PestoCallInstruction,
  | Memory
  new: Id,         | allocates the value on the heap, refcount 1
  load: Id,        | loads the pointer's memory (amount determined by the type)
  free: PestoFree, | frees the pointer's memory, refcount should be 0
  dup: Id,         | increments the pointer's refcount by 1
  drop: Id,        | decrements the pointer's refcount by 1
}
struct PestoMember { of: Id, name: String }
struct PestoEnum { name: String, value: Id }
struct PestoSwitch { condition: Id, cases: Map[String, PestoBody] }
struct PestoCall { function: String, args: Id }
struct PestoCallIndirect { function: Id, args: Id }
struct PestoCallInstruction { instruction: Instruction, args: Slice[Id] }
struct PestoFree { ptr: Id, type: PestoType }

enum PestoType {
  int,
  ptr,
  struct_: Map[String, PestoType],
  enum_: Map[String, PestoType],
}

fun ==(a: PestoType, b: PestoType): Bool {
  switch a
  case int         b is int
  case ptr         b is ptr
  case struct_(aa) if b is struct_(bb) then aa == bb else false
  case enum_(aa)   if b is enum_(bb)   then aa == bb else false
}

| Constructing Pesto  

fun pesto(): _ { Pesto { funs = map[String, PestoFun]() } }

fun $(op: PestoOp, type: PestoType): _ { PestoExpr { op, type } }

var pesto_nothing =
  PestoOp.struct_(map[String, Id]()) 
    $ PestoType.struct_(map[String, PestoType]())

fun return_type(fun_: PestoFun): PestoType {
  fun_.dag.get(fun_.body.returns).type
}


struct PestoBodyBuilder { param: Id, exprs: List[Id], dag: &Dag[PestoExpr] }

fun body_builder(dag: &Dag[PestoExpr], param: PestoType): PestoBodyBuilder {
  var param = dag.put(PestoOp.param $ param)
  PestoBodyBuilder { param, exprs = list[Id](), dag }
}
fun push(builder: &PestoBodyBuilder, expr: PestoExpr): Id {
  var id = builder.dag.put(expr)
  builder.exprs.&.push(id)
  id
}
fun get(builder: PestoBodyBuilder, id: Id): PestoExpr { builder.dag.get(id) }
fun finish(builder: PestoBodyBuilder, returns: Id): PestoBody {
  PestoBody { param = builder.param, exprs = builder.exprs.to_slice(), returns }
}

| Writing Pesto  

fun write[W](writer: W, pesto: Pesto) {
  var first = true
  for fun_ in pesto.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, type: PestoType) {
  switch type
  case int writer."int"
  case ptr writer."ptr"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(variants) {
    writer."(|"
    for variant in variants do
      if variant.value == PestoType.struct_(map[String, PestoType]()) then
        writer." {variant.key}"
      else
        writer." {variant.key}: {variant.value}"
    writer.")"
  }
}
| TODO: use Indentation type
fun write[W](
  writer: W, body: PestoBody, dag: Dag[PestoExpr], indentation: Int
) {
  writer." {body.param}: {dag.get(body.param).type}\n"
  for id in body.exprs do {
    var expr = dag.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, dag, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: PestoOp, dag: Dag[PestoExpr], indentation: Int) {
  switch op
  case param writer."param"
  case int(int) writer."int {int}"
  case string(string) writer."string {string}"
  case struct_(fields) {
    writer."&"
    for field in fields do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."| {enum_.name}: {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key} -> "
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case function_ptr(signature) writer."&({signature})"
  case call(call) writer."call \"{call.function}\" {call.args}"
  case call_indirect(call) writer."call *{call.function} {call.args}"
  case call_instruction(call) {
    writer."call instruction {call.instruction}"
    for arg in call.args do writer." {arg}"
  }
  case new(value) writer."new {value}"
  case load(value) writer."load {value}"
  case free(free) writer."free {free.ptr}: {free.type}"
  case dup(value) writer."dup {value}"
  case drop(value) writer."drop {value}"
}
