| Pointers, Enums, Structures, and Tamed Operations  
|
| A representation of the program where complex types have been replaced with
| simpler C-like types: (untyped) pointers, (associated) enums, and structures.
| In particular, lambdas have been removed.

import plum.mar

struct Pesto { funs: Map[String, PestoFun] }

struct PestoFun { dag: Dag[PestoExpr], body: PestoBody }
struct PestoBody { param: Id, exprs: Slice[Id], returns: Id }
struct PestoExpr { op: PestoOp, type: PestoType }

enum PestoOp {
  param,
  int: Int,
  string: String,
  struct_: Map[String, Id],
  member: PestoMember,
  enum_: PestoEnum,
  switch_: PestoSwitch,
  function_ptr: String,
  call: PestoCall,
  call_indirect: PestoCallIndirect,
  call_builtin: PestoCallBuiltin,
  | Memory
  new: Id,         | allocates the value on the heap, refcount 1
  load: Id,        | loads the pointer's memory (amount determined by the type)
  free: PestoFree, | frees the pointer's memory, refcount should be 0
  new_buffer: PestoNewBuffer,
  get_buffer_len: Id,
  load_buffer_item: PestoLoadBufferItem,
  store_buffer_item: PestoStoreBufferItem,
  store_buffer_bytes: PestoStoreBufferBytes, | assumes a Buffer(Byte)
  free_buffer: PestoFreeBuffer, | free's the buffer's memory, refcount should be 0
  get_reference_count: Id,
  increment_reference_count: Id, | returns the new count
  decrement_reference_count: Id, | returns the new count
}
struct PestoMember { of: Id, name: String }
struct PestoEnum { name: String, value: Id }
struct PestoSwitch { condition: Id, cases: Map[String, PestoBody] }
struct PestoCall { function: String, args: Id }
struct PestoCallIndirect { function: Id, args: Id }
struct PestoCallBuiltin { builtin: PestoBuiltin, args: Slice[Id] }
enum PestoBuiltin {
  lower_byte, byte_to_int,
  add_ints, sub_ints, mul_ints, div_ints, mod_ints, and_ints, or_ints, xor_ints,
  compare_ints,
  crash,
}
struct PestoFree { ptr: Id, type: PestoType }
struct PestoNewBuffer { item_type: PestoType, len: Id }
struct PestoLoadBufferItem { buffer: Id, item_type: PestoType, index: Id }
struct PestoStoreBufferItem {
  buffer: Id, item_type: PestoType, index: Id, item: Id
}
struct PestoStoreBufferBytes { buffer: Id, bytes: Slice[Byte] }
struct PestoFreeBuffer { buffer: Id, item_type: PestoType }

enum PestoType {
  byte,
  int,
  ptr,
  struct_: Map[String, PestoType],
  enum_: Map[String, PestoType],
}

fun ==(a: PestoType, b: PestoType): Bool {
  switch a
  case byte        b is byte
  case int         b is int
  case ptr         b is ptr
  case struct_(aa) if b is struct_(bb) then aa == bb else false
  case enum_(aa)   if b is enum_(bb)   then aa == bb else false
}

fun write[W](writer: W, pesto: Pesto) {
  var first = true
  for fun_ in pesto.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value.dag, 1)
  }
}
fun write[W](writer: W, type: PestoType) {
  switch type
  case byte writer."byte"
  case int writer."int"
  case ptr writer."ptr"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(variants) {
    writer."(|"
    for variant in variants do
      if variant.value == PestoType.struct_(map[String, PestoType]()) then
        writer." {variant.key}"
      else
        writer." {variant.key}: {variant.value}"
    writer.")"
  }
}
| TODO: use Indentation type
fun write[W](
  writer: W, body: PestoBody, dag: Dag[PestoExpr], indentation: Int
) {
  writer." {body.param}: {dag.type_of(body.param)}\n"
  for id in body.exprs do {
    var expr = dag.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, dag, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: PestoOp, dag: Dag[PestoExpr], indentation: Int) {
  switch op
  case param writer."param"
  case int(int) writer."int {int}"
  case string(string) writer."string {string}"
  case struct_(fields) {
    writer."&"
    for field in fields do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."| {enum_.name}: {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key} -> "
      writer.write(case_.value, dag, indentation + 2)
    }
  }
  case function_ptr(signature) writer."&({signature})"
  case call(call) writer."call \"{call.function}\" {call.args}"
  case call_indirect(call) writer."call *{call.function} {call.args}"
  case call_builtin(call) {
    writer."call builtin {call.builtin.debug()}"
    for arg in call.args do writer." {arg}"
  }
  case new(value) writer."new {value}"
  case load(value) writer."load {value}"
  case free(free) writer."free {free.ptr}: {free.type}"
  case new_buffer(new) writer."new buffer({new.item_type}) of len {new.len}"
  case get_buffer_len(buffer) writer."get len of buffer {buffer}"
  case load_buffer_item(load)
    writer."load item from buffer({load.item_type}) {load.buffer} 
      'at index {load.index}"
  case store_buffer_item(store)
    writer."store {store.item} to buffer({store.item_type}) {store.buffer} 
      'at index {store.index}"
  case free_buffer(free)
    writer."free buffer({free.item_type}) {free.buffer}"
  case get_reference_count(ptr) writer."get reference count of {ptr}"
  case increment_reference_count(ptr) writer."increment reference count of {ptr}"
  case decrement_reference_count(ptr) writer."decrement reference count of {ptr}"
}
