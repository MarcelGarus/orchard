| The Plum Compiler  
|
| Welcome to the entry file to the compiler for Plum, a simple, functional, cozy
| programming language.
|
| Like most compilers, the Plum compiler represents the program as a series of
| compiler stages. Unlike some other compilers, the abstraction gaps between
| these stages are quite small. If you want to do further research, this design
| is sometimes called "microstages". It makes the transformations between
| stages more obvious and simple, but it does require a lot more stages for the
| entire pipeline.
|
| These are the stages of the Plum compiler:
|
| - Source Code: Just a string.
| - Bacon:       The lines of the file turned into a tree according to the
|                indentation.
| - Toast:       A parsed representation of the language constructs, suitable
|                for formatting.
| - Egg:         The expressions organized as a graph. Names and functions are
|                resolved.
| - Yogurt:      A monomorphized representation of the program. Instead of
|                generic functions and data structures, this stage contains
|                specialized ones for concrete types.
| - Pudding:     Similar to the Yogurt, but with added dup and drop instructions
|                that enable garbage collection.
| - Pesto:       Data structures have been transformed into C-like structs,
|                associated enums, and pointers between them. It's decided what
|                data is allocated on the stack vs. heap and where exist pointer
|                indirections.
| - Waffle:      Data structures have been memory layouted.
| - Ground:      Everything has been compiled into a series of stack-based
|                instructions.
|
| Most of these compiler stages have a corresponding Martinaise file in this
| directory. These also contain a more detailed explanation.

import ../../martinaise/stdlib.mar
import module.mar
import error.mar
import formatting.mar
import dag.mar
import builtins.mar
import string_to_bacon/mod.mar
import bacon.mar
import bacon_to_toast/mod.mar
import toast.mar
import toast_to_egg/mod.mar
import egg.mar
import egg_to_yogurt/mod.mar
import yogurt.mar
import optimize_yogurt/mod.mar
import run_yogurt.mar
import yogurt_to_pudding/mod.mar
import pudding.mar
import pudding_to_pesto/mod.mar
import pesto.mar
import run_pesto.mar
import pesto_to_waffle/mod.mar
import waffle.mar
import run_waffle.mar
import optimize_waffle/mod.mar
import waffle_to_ground/mod.mar
import ground.mar
import run_ground.mar

fun main(): Never {
  eprintln("Welcome to the Plum compiler!")

  var args = get_process_args()
  var path = args.get_maybe(1) or exit(1, "You didn't specify a file.\n")
  var ground = module(path).compile() or(error)
    exit(1, "Oh no! An error occurred:\n\n{error}\n")
  var bytes = ground.to_bytes()
  write_file("{path}.ground", bytes)

  exit(0)
}

fun exit(status: Int, message: String): Never {
  stderr.write(message)
  exit(status)
}

fun compile(module: Module): Result[Ground, Error] {
  println("Bacons and Toasts")
  var toasts = map[Module, Toast]()
  module.parse_toasts(toasts.&)?
  | eprintln("Toasts:")
  | for toast in toasts do
  |   eprintln("{toast.key}:\n{toast.value}")
  var entry = "{module}.main Int"
  println("Egg")     var egg     = toasts.to_egg(module)? |eprintln("{egg}")
  println("Yogurt")  var yogurt  = egg.to_yogurt(entry)?  |eprintln("{yogurt}")
  println("Running") eprintln(yogurt.run(list(YogurtValue.int(5)).to_slice()).as_string())
  println("Opt")     var yogurt  = yogurt.optimize()      |eprintln("{yogurt}")
  println("Pudding") var pudding = yogurt.to_pudding()    |eprintln("{pudding}")
  println("Pesto")   var pesto   = pudding.to_pesto()     |eprintln("{pesto}")
  println("Running") eprintln(pesto.run(list(PestoValue.int(5)).to_slice()).as_string())
  println("Waffle")  var waffle  = pesto.to_waffle()      |eprintln("{waffle}")
  println("Opt")     var waffle  = waffle.optimize()      |eprintln("{waffle}")
  println("Running") eprintln(waffle.run(5.to_bytes()).as_string())
  println("Ground")  var ground  = waffle.to_ground()     |eprintln("{ground}")
  println("Running") eprintln(ground.run(5.to_bytes()).as_string())
  ok[Ground, Error](ground)
  |todo("fds")
}
fun parse_toasts(
  module: Module, out: &Map[Module, Toast]
): Result[Nothing, Error] {
  if out.contains(module) or module.is_builtin() then
    return ok[Nothing, Error]({})

  var content = none[String]()
  for path in module.file_paths() do {
    var bytes = read_file(path) or continue
    content = some(bytes.to_string())
    break
  }
  var content = content or
    return error[Nothing, Error](error(
      "Couldn't read file from {module.file_paths()}", invalid_src
    ))

  var bacon = content.to_bacon(module)
  var toast = bacon.to_toast()?
  out.put(module, toast)

  for def in toast.defs do
    if def is import_(import_) then {
      for part in import_.parts do {
        var imported = module.resolve_import(part.module) or(error)
          return error[Nothing, Error](error(error, import_.keyword.src))
        imported.parse_toasts(out)?
      }
    }
  ok[Nothing, Error]({})
}
