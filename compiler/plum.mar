| The Plum Compiler  
|
| Welcome to the entry file to the compiler for Plum, a simple, functional, cozy
| programming language.
|
| Like most compilers, the Plum compiler represents the program as a series of
| compiler stages. Unlike some other compilers, the abstraction gaps between
| these stages are quite small. If you want to do further research, this design
| is sometimes called "microstages". It makes the transformations between
| stages more obvious and simple, but it does require a lot more stages for the
| entire pipeline.
|
| These are the stages of the Plum compiler:
|
| - Source Code: Just a string.
| - Bacon:       The lines of the file turned into a tree according to the
|                indentation.
| - Toast:       A parsed representation of the language constructs, suitable
|                for formatting.
| - Egg:         The expressions organized as a graph. Names and functions are
|                resolved.
| - Yogurt:      A monomorphized representation of the program. Instead of
|                generic functions and data structures, this stage contains
|                specialized ones for concrete types.
| - Pudding:     Similar to the Yogurt, but with added dup and drop instructions
|                that enable garbage collection.
| - Pesto:       Data structures have been transformed into C-like structs,
|                associated enums, and pointers between them. It's decided what
|                data is allocated on the stack vs. heap and where exist pointer
|                indirections.
| - Waffle:      Data structures have been memory layouted.
| - Ground:      Everything has been compiled into a series of stack-based
|                instructions.
|
| Most of these compiler stages have a corresponding Martinaise file in this
| directory. These also contain a more detailed explanation.

import ../../martinaise/stdlib.mar
import bytes.mar
import module.mar
import error.mar
import formatting.mar
import dag.mar

import bacon/mod.mar
import toast/mod.mar
import egg/mod.mar
import taco/mod.mar
import pudding/mod.mar
import pesto/mod.mar
import waffle/mod.mar
import ground/mod.mar

import string_to_bacon/mod.mar
import bacon_to_toast/mod.mar
import toast_to_egg/mod.mar
import egg_to_taco/mod.mar
import taco_to_taco/mod.mar
| import taco_to_pudding/mod.mar
import pudding_to_pesto/mod.mar
import pesto_to_waffle/mod.mar
import waffle_to_waffle/mod.mar
import waffle_to_ground/mod.mar

fun main(): Never {
  eprintln("Welcome to the Plum compiler!")

  var args = get_process_args()
  var path = args.get_maybe(1) or exit(1, "You didn't specify a file.\n")
  var ground = module(path).compile("main (Int)") or(error)
    exit(1, "Oh no! An error occurred:\n\n{error}\n")
  var bytes = ground.to_bytes()
  write_file("{path}.ground", bytes)

  exit(0)
}

fun exit(status: Int, message: String): Never {
  stderr.write(message)
  exit(status)
}

fun report_time(duration: Duration) {
  println("{duration.in_milliseconds().to_int().format().pad_left(4)} ms")
}

fun compile(module: Module, function: String): Result[Ground, Error] {
  var total_timer = start_timer()

  println("Bacon")
  print("& Toast ")
  var timer = start_timer()
  var toasts = map[Module, Toast]()
  module.parse_toasts(toasts.&)?
  if false then {
    println("Toasts:")
    for toast in toasts do println("{toast.key}:\n{toast.value}")
  }
  report_time(timer.read_duration())

  print("Egg     ")
  var timer = start_timer()
  var egg = toasts.to_egg(module)?
  report_time(timer.read_duration())
  if true then println(egg)

  print("Taco    ")
  var timer = start_timer()
  var taco = egg.to_taco("{module}.{function}")?
  report_time(timer.read_duration())
  if true then println(taco)

  print("Opt     ")
  var timer = start_timer()
  var taco = taco.optimize()
  report_time(timer.read_duration())
  if true then println(taco)

  | print("Mono    ")
  | var timer = start_timer()
  | var egg  = egg.monomorphize("{module}.{function}", no_substitutions)
  | report_time(timer.read_duration())
  | if true then println(egg)

  | print("Opt     ")
  | var timer = start_timer()
  | var egg  = egg.optimize("{module}.{function}")
  | report_time(timer.read_duration())
  | if true then println(egg)

  | if false then {
  |   println("Running Yogurt")
  |   var result = yogurt.run(list(YogurtValue.int(5)).to_slice())
  |   println(result)
  |   var render = result.struct_.unwrap().get("render").lambda.unwrap()
  |   var tex = render.function.run(
  |     list(
  |       YogurtValue.struct_(map(
  |         "width" -> YogurtValue.int(1),
  |         "height" -> YogurtValue.int(1),
  |       )),
  |       render.closure.*,
  |     ).to_slice(),
  |     yogurt,
  |     list[String]().&,
  |   )
  |   println(tex)
  | }

  | print("Yogurt  ")
  | var timer = start_timer()
  | var yogurt = egg.to_yogurt("{module}.{function}")?
  | report_time(timer.read_duration())
  | if true then println(yogurt)

  | print("Opt     ")
  | var timer = start_timer()
  | var yogurt  = yogurt.optimize()
  | report_time(timer.read_duration())
  | if true then println(yogurt)
  | if false then {
  |   println("Running Yogurt")
  |   var result = yogurt.run(list(YogurtValue.int(5)).to_slice())
  |   println(result)
  |   var render = result.struct_.unwrap().get("render").lambda.unwrap()
  |   var tex = render.function.run(
  |     list(
  |       YogurtValue.struct_(map(
  |         "width" -> YogurtValue.int(1),
  |         "height" -> YogurtValue.int(1),
  |       )),
  |       render.closure.*,
  |     ).to_slice(),
  |     yogurt,
  |     list[String]().&,
  |   )
  |   println(tex)
  | }

  | print("Pudding ")
  | var timer = start_timer()
  | var pudding = yogurt.to_pudding()
  | report_time(timer.read_duration())
  | if false then println(pudding)
  | if false then {
  |   println("Running Pudding")
  |   var result = pudding.run(5)
  |   var heap = result.heap
  |   var res = result.value
  |   | println(result)
  |   | var print_payload = heap.get(result.value).enum_.unwrap().value
  |   | var lambda = heap.get(print_payload).struct_.unwrap().get("then")
  |   | heap.&.dup(lambda)
  |   | heap.&.drop(result.value)
  |   | var function = heap.get(lambda).lambda.unwrap().function 
  |   | var closure = heap.get(lambda).lambda.unwrap().closure
  |   | heap.&.dup(closure)
  |   | heap.&.drop(lambda)
  |   | var res = function.run(
  |   |   list(closure).to_slice(),
  |   |   pudding, list[String]().&, heap.&,
  |   | )
  |   stderr.write(res, heap)
  |   heap.&.drop(res)
  |   heap.ensure_everything_freed()
  | }

  | print("Pesto   ")
  | var timer = start_timer()
  | var pesto = pudding.to_pesto()
  | report_time(timer.read_duration())
  | if false then eprintln(pesto)
  | if false then {
  |   println("Running Pesto")
  |   println(pesto.run(list(PestoValue.int(5)).to_slice()))
  | }

  | print("Waffle  ")
  | var timer = start_timer()
  | var waffle = pesto.to_waffle()
  | report_time(timer.read_duration())
  | if false then println(waffle)

  | print("Opt     ")
  | var timer = start_timer()
  | var waffle = waffle.optimize()
  | report_time(timer.read_duration())
  | if false then println(waffle)
  | if false then {
  |   println("Running Waffle")
  |   println(waffle.run(5.to_bytes()))
  | }

  | print("Ground  ")
  | var timer = start_timer()
  | var ground = waffle.to_ground()
  | report_time(timer.read_duration())
  | if false then println(ground)
  | if false then {
  |   println("Running Ground")
  |   println(ground.run(5.to_bytes()).debug())
  | }

  | print("Total   ")
  | report_time(total_timer.read_duration())

  | ok[Ground, Error](ground)
  todo("fds")
}
fun parse_toasts(
  module: Module, out: &Map[Module, Toast]
): Result[Nothing, Error] {
  if out.contains(module) or module.is_builtin() then
    return ok[Nothing, Error]({})

  var content = none[String]()
  for path in module.file_paths() do {
    var bytes = read_file(path) or continue
    content = some(bytes.to_string())
    break
  }
  var content = content or
    return error[Nothing, Error](error(
      "Couldn't read file from {module.file_paths()}", invalid_src
    ))

  var bacon = content.to_bacon(module)
  var toast = bacon.to_toast()?
  out.put(module, toast)

  for def in toast.defs do
    if def is import_(import_) then {
      for part in import_.parts do {
        var imported = module.resolve_import(part.module) or(error)
          return error[Nothing, Error](error(error, import_.keyword.src))
        imported.parse_toasts(out)?
      }
    }
  ok[Nothing, Error]({})
}
