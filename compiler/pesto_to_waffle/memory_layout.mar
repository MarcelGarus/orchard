| Memory Layouting  
|
| | At some point, we need to decide how to store structs, enums, etc. in memory.
| Memory layouting is the process that decides that. It results in memory
| layouts, which are basically mappings between high-level types and low-level
| memory.
|
| These are our requirements for choosing memory layouts:
|
| - Field order shouldn't matter.
|   You should never have to reorder struct fields to get a more efficient
|   layout.
| - The layouting should be fast.
|   We need to layout a lot of types and want to keep the compiler responsive.
| - The layouting should be simple.
|   To interoperate with other languages, the memory layouting algorithm should
|   be simple and predictable.
| - Layouts should be efficient.
|   In particular, sizes of data structures should be small while still
|   respecting the alignment requirements.
|
| The requirements are ordered from most important to least important. In
| particular, if there's a really slow or complicated algorithm that always
| chooses optimal memory layouts, we may not use that in favor of a simpler
| algorithm that reliably chooses reasonably efficient memory layouts.

import mod.mar

struct MemoryLayout { size: Int, alignment: Int }

| Layouting arbitrary types  

fun memory_layout(type: PestoType): MemoryLayout {
  switch type
  case byte MemoryLayout { size = 1,  alignment = 1 }
  case int MemoryLayout { size = 8,  alignment = 8 }
  case ptr MemoryLayout { size = 8,  alignment = 8 }
  case struct_ {
    var layout = type.memory_layout_struct()
    MemoryLayout { size = layout.size, alignment = layout.alignment }
  }
  case enum_(enum_) {
    var layout = type.memory_layout_enum()
    MemoryLayout { size = layout.size, alignment = layout.alignment }
  }
  case never MemoryLayout { size = 0, alignment = 1 }
}
fun stride_size(layout: MemoryLayout): Int {
  layout.size.round_up_to_multiple_of(layout.alignment)
}

| Layouting structs  

struct StructLayout {
  size: Int, alignment: Int,
  parts: Slice[StructPart],
  field_to_offset: Map[String, Int],
}
enum StructPart { field: String, padding: Int }

struct FieldMemoryLayout { size: Int, alignment: Int, name: String }
fun evenness(layout: FieldMemoryLayout): Int {
  if layout.size.is_multiple_of(8) then return 8
  if layout.size.is_multiple_of(4) then return 4
  if layout.size.is_multiple_of(2) then return 2
  1
}
fun <=>(a: FieldMemoryLayout, b: FieldMemoryLayout): Ordering {
  | We layout fields in this order:
  | - first, by the "evenness" of the field's size
  |   - fields where the size is a multiple of 8
  |   - fields where the size is a multiple of 4
  |   - fields where the size is a multiple of 2
  |   - fields where the size is a multiple of 1
  | - second, by decreasing size
  | - third, by increasing name (this makes the sort and memory layout
  |   deterministic, even if multiple definitions of the struct use different
  |   field orderings)
  if a.evenness() != b.evenness() then
    return {a.evenness() <=> b.evenness()}.flip()
  if a.size != b.size then return {a.size <=> b.size}.flip()
  a.name <=> b.name
}

fun is_all_minus_one(list: Slice[Int]): Bool {
  for item in list do if item != -1 then return false
  true
}

| TODO: think about recursive structs. error? allow but like never?
fun memory_layout_struct(type: PestoType): StructLayout {
  var fields = type.struct_.unwrap()

  | Layout the individual fields.
  var layouts = list[FieldMemoryLayout]()
  for field in fields do {
    var layout = field.value.memory_layout()
    layouts.&.push(FieldMemoryLayout {
      name = field.key, size = layout.size, alignment = layout.alignment
    })
  }
  var layouts = layouts.to_slice()

  | Choose in which order to place the fields:
  layouts.&.sort()

  | Place the fields.
  var bytes = list[Int]() | every item is one byte, index into layouts, -1 is padding
  for field in layouts.iter().enumerate() do {
    var index = field.index
    var field = field.item

    | See if the field fits in a padding.
    var offset = 0
    var was_placed_in_padding = loop {
      if offset + field.size > bytes.len then break(false)
      if bytes.to_slice().subslice(offset ..+ field.size).is_all_minus_one()
      then {
        for i in offset ..+ field.size do bytes.&.set(i, index)
        break(true)
      }
      offset = offset + field.alignment
    }
    if not(was_placed_in_padding) then {
      | Add the field to the end.
      var padding = bytes.len.round_up_to_multiple_of(field.alignment) - bytes.len
      for i in 0..padding    do bytes.&.push(-1)
      for i in 0..field.size do bytes.&.push(index)
    }
  }

  var parts = list[StructPart]()
  var field_to_offset = map[String, Int]()
  var offset = 0
  loop {
    if offset >= bytes.len then break
    var value = bytes.get(offset)
    var end = offset + 1
    loop {
      if end >= bytes.len then break
      if bytes.get(end) != value then break
      end = end + 1
    }
    if value == -1 then
      parts.&.push(StructPart.padding(end - offset))
    else {
      var name = layouts.get(value).name
      parts.&.push(StructPart.field(name))
      field_to_offset.&.put(name, offset)
    }
    offset = end
  }
  | For the purpose of accessing zero-sized fields, claim that they are at the
  | beginning of the struct.
  for field in layouts do
    if field.size == 0 then
      field_to_offset.&.put(field.name, 0)

  var size = bytes.len
  var alignment = 1
  for field in layouts do alignment = max(alignment, field.alignment)

  StructLayout { size, alignment, parts = parts.to_slice(), field_to_offset }
}

| Layouting enums  
| 
| payload tag

struct EnumLayout {
  size: Int,
  alignment: Int,
  variants: Map[String, VariantLayout],
  tag_offset: Int,
  tag_size: Int,
  tag_to_variant: Map[Int, String],
}
struct VariantLayout { parts: Slice[VariantPart] }
enum VariantPart { payload, padding: Int, tag: Int }

fun memory_layout_enum(type: PestoType): EnumLayout {
  var variants = type.enum_.unwrap()

  | Choose the tag size.
  var tag_size = 0
  loop
    if 256 ** tag_size >= variants.size then break else tag_size = tag_size + 1

  | Choose mapping between variants/symbols (Strings) and tags. We just order
  | variants by name so that the tags are chosen deterministically, even if
  | multiple definitions of the enum use different orderings.
  var variant_names = list[String]()
  for variant in variants do variant_names.&.push(variant.key)
  variant_names.to_slice().&.sort()

  var tag_to_variant = map[Int, String]()
  for variant in variant_names.iter().enumerate() do
    tag_to_variant.&.put(variant.index, variant.item)

  var variant_to_tag = map[String, Int]()
  for variant in variant_names.iter().enumerate() do
    variant_to_tag.&.put(variant.item, variant.index)

  | Layout the individual variants.
  var payload_layouts = map[String, MemoryLayout]()
  for variant in variants do
    payload_layouts.&.put(variant.key, variant.value.memory_layout())

  | Calculate maximum size and alignment.
  var max_payload_size = 0
  var max_payload_alignment = 1
  for layout in payload_layouts do {
    max_payload_size = max(max_payload_size, layout.value.size)
    max_payload_alignment = max(max_payload_alignment, layout.value.alignment)
  }

  | Create parts.
  var variant_layouts = map[String, VariantLayout]()
  for variant in variants do
    variant_layouts.&.put(variant.key, VariantLayout {
      parts = list(
        VariantPart.payload,
        VariantPart.padding(
          max_payload_size - payload_layouts.get(variant.key).size
        ),
        VariantPart.tag(variant_to_tag.get(variant.key))
      ).to_slice()
    })

  EnumLayout {
    size = max_payload_size + tag_size,
    alignment = max_payload_alignment,
    variants = variant_layouts,
    tag_offset = max_payload_size,
    tag_size,
    tag_to_variant,
  }
}
