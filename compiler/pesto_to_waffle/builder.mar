import mod.mar

struct WaffleBodyBuilder {
  dag: &Dag[WaffleExpr], locals: List[Id], alignment: Int
}
fun body_builder(dag: &Dag[WaffleExpr]): WaffleBodyBuilder {
  WaffleBodyBuilder { dag, locals = list[Id](), alignment = 1 }
}
fun local(builder: &WaffleBodyBuilder, expr: WaffleExpr): WaffleExpr {
  var id = builder.dag.put(expr)
  builder.locals.&.push(id)
  builder.alignment = max(builder.alignment, expr.alignment)
  waffle_local(id, expr.size, expr.alignment)
}
fun finish(builder: WaffleBodyBuilder, returns: WaffleExpr): WaffleBody {
  WaffleBody { locals = builder.locals.to_slice(), returns }
}

| Functions for constructing expressions

fun waffle_padding(amount: Int): WaffleExpr {
  WaffleExpr {
    size = amount, alignment = 1, kind = WaffleExprKind.padding(amount)
  }
}

fun waffle_byte(byte: Byte): WaffleExpr {
  WaffleExpr { size = 1, alignment = 1, kind = WaffleExprKind.byte(byte) }
}

fun waffle_int(int: Int): WaffleExpr {
  WaffleExpr { size = 8, alignment = 8, kind = WaffleExprKind.int(int) }
}

fun waffle_local(id: Id, size: Int, alignment: Int): WaffleExpr {
  WaffleExpr { size, alignment, kind = WaffleExprKind.local(id) }
}

fun waffle_aggregate(fields: Slice[WaffleExpr]): WaffleExpr {
  var size = 0
  var alignment = 1
  for field in fields do {
    size.is_multiple_of(field.alignment) or
      panic("badly aligned field in aggregate")
    size = size + field.size
    alignment = max(alignment, field.alignment)
  }
  WaffleExpr { size, alignment, kind = WaffleExprKind.aggregate(fields) }
}

fun waffle_member(
  of: WaffleExpr, offset: Int, size: Int, alignment: Int
): WaffleExpr {
  offset >= 0 or panic("negative offset")
  offset + size <= of.size or
    panic("offset too big: {offset} + {size} > {of.size}")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.member(WaffleMember { of = of.put_on_heap(), offset })
  }
}

fun waffle_switch(byte: WaffleExpr, cases: Slice[WaffleBody]): WaffleExpr {
  byte.size == 1 or panic("switch byte has invalid size")
  byte.alignment == 1 or panic("switch byte has invalid alignment")
  cases.is_not_empty() or panic("switch with no cases")
  | TODO: Here, we treat a size of 0 to be compatible with all other sizes
  | because Never has size 0. Think of a more elegant way to handle this.
  var size = 0
  var alignment = 1
  for case_ in cases do {
    if case_.returns.size > 0 and size > 0 then
      if size != case_.returns.size then panic({
        var b = string_builder().&
        b."switch cases have different sizes:"
        for case_ in cases do b."\n{case_.debug()}"
        b.to_string()
      })
    if case_.returns.size > 0 then
      size = case_.returns.size
    alignment = max(alignment, case_.returns.alignment)
  }
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.switch_(WaffleSwitch { byte = byte.put_on_heap(), cases })
  }
}

| The size and alignment are of the returned value, not the arguments.
fun waffle_call(
  function: String, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call(WaffleCall { function, args = args.put_on_heap() })
  }
}

| The size and alignment are of the returned value, not the arguments.
fun waffle_call_indirect(
  function_ptr: WaffleExpr, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call_indirect(WaffleCallIndirect {
      function_ptr = function_ptr.put_on_heap(), args = args.put_on_heap()
    })
  }
}

fun waffle_function_ptr(signature: String): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8, kind = WaffleExprKind.function_ptr(signature)
  }
}

fun is_byte(expr: WaffleExpr): Bool { expr.size == 1 and expr.alignment == 1 }
fun is_int(expr: WaffleExpr): Bool { expr.size == 8 and expr.alignment == 8 }
fun is_ptr(expr: WaffleExpr): Bool { expr.size == 8 and expr.alignment == 8 }

fun waffle_lower_byte(int: WaffleExpr): WaffleExpr {
  int.is_int() or panic("not an int ({int.size} bytes)")
  WaffleExpr {
    size = 1, alignment = 1,
    kind = WaffleExprKind.lower_byte(int.put_on_heap()),
  }
}

fun waffle_byte_to_int(byte: WaffleExpr): WaffleExpr {
  byte.is_byte() or panic("not an byte ({byte.size} bytes)")
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.byte_to_int(byte.put_on_heap()),
  }
}

fun waffle_int_operands(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  left.is_int() or panic("left is not an int ({left.size} bytes)")
  right.is_int() or panic("right is not an int ({right.size} bytes)")
  waffle_aggregate(list(left, right).to_slice())
}

fun waffle_add(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.add(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_sub(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.sub(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_mul(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mul(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_div(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.div(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_mod(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mod(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_compare_zero(int: WaffleExpr): WaffleExpr {
  int.is_int() or panic("expected int")
  WaffleExpr {
    size = 1, alignment = 1,
    kind = WaffleExprKind.compare_zero(int.put_on_heap()),
  }
}

fun waffle_and(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.and_(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_or(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.or_(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_xor(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.xor(waffle_int_operands(left, right).put_on_heap()),
  }
}

fun waffle_malloc(size: WaffleExpr): WaffleExpr {
  size.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.malloc(size.put_on_heap())
  }
}

fun waffle_free(ptr: WaffleExpr, size: WaffleExpr): WaffleExpr {
  ptr.is_ptr() or panic("expected pointer")
  size.is_ptr() or panic("expected size")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.free(waffle_aggregate(
      list(ptr, size).to_slice()
    ).put_on_heap())
  }
}

fun waffle_load(expr: WaffleExpr, size: Int, alignment: Int): WaffleExpr {
  expr.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.load(expr.put_on_heap())
  }
}

fun waffle_store(ptr: WaffleExpr, value: WaffleExpr): WaffleExpr {
  ptr.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.store(WaffleStore {
      ptr = ptr.put_on_heap(), value = value.put_on_heap()
    })
  }
}

fun waffle_store_bytes(ptr: WaffleExpr, bytes: Slice[Byte]): WaffleExpr {
  ptr.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.store_bytes(WaffleStoreBytes {
      ptr = ptr.put_on_heap(), bytes
    })
  }
}

fun waffle_crash(message: WaffleExpr): WaffleExpr {
  message.size == 16 or panic("crash, but message is not a buffer ptr + len")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.crash(message.put_on_heap()),
  }
}
