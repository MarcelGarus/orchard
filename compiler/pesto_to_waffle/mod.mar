| Converting Pesto to Waffle  

import ../plum.mar
import builder.mar
import memory_layout.mar

var waffle_body_nothing = WaffleBody {
  locals = empty_slice[Id](), returns = waffle_padding(0)
}
var waffle_body_crash = WaffleBody {
  locals = empty_slice[Id](),
  returns = waffle_crash(waffle_int(0), waffle_int(0)),
}

fun to_waffle(
  expr: PestoExpr, fun_: PestoFun,
  builder: &WaffleBodyBuilder, mapping: &Map[Id, WaffleExpr], pesto: Pesto,
): WaffleExpr {
  switch expr.op
  case param unreachable()
  case int(int) waffle_int(int)
  case struct_(struct_) {
    var layout = expr.type.memory_layout_struct()
    var parts = list[WaffleExpr]()
    for part in layout.parts do
      parts.&.push(
        switch part
        case field(name) mapping.get(struct_.get(name))
        case padding(amount) waffle_padding(amount)
      )
    waffle_aggregate(parts.to_slice())
  }
  case member(member) {
    var struct_layout = fun_.dag.type_of(member.of).memory_layout_struct()
    var field_layout = expr.type.memory_layout()
    mapping.get(member.of).waffle_member(
      struct_layout.field_to_offset.get(member.name),
      field_layout.size,
      field_layout.alignment,
    )
  }
  case enum_(enum_) {
    var enum_layout = expr.type.memory_layout_enum()
    var variant_layout = enum_layout.variants.get(enum_.name)
    var parts = list[WaffleExpr]()
    for part in variant_layout.parts do
      switch part
      case value parts.&.push(mapping.get(enum_.value))
      case padding(amount) parts.&.push(waffle_padding(amount))
      case tag(tag) {
        for i in 0..enum_layout.tag_size do {
          parts.&.push(waffle_byte(tag.lower_byte()))
          tag = tag / 256
        }
      }
    waffle_aggregate(parts.to_slice())
  }
  case switch_(switch_) {
    var condition = mapping.get(switch_.condition)
    var layout = fun_.dag.type_of(switch_.condition).memory_layout_enum()

    for variant_layout in layout.variants do {
      var payload = switch_.cases.get(variant_layout.key).param
      var layout = fun_.dag.type_of(payload).memory_layout()
      mapping.put(
        payload, condition.waffle_member(0, layout.size, layout.alignment)
      )
    }

    var cases = uninitialized_slice[WaffleBody](layout.tag_to_variant.size)
    for entry in layout.tag_to_variant do
      cases.&.set(
        entry.key,
        switch_.cases.get(entry.value)
          .to_waffle(fun_, builder.dag, mapping, pesto)
      )

    for offset_in_tag in 0..layout.tag_size do {
      | Group groups of 256 cases into a single case.
      var num_new_cases = cases.len + 255 / 256
      var new_cases = uninitialized_slice[WaffleBody](num_new_cases)
      for i in 0..num_new_cases do {
        new_cases.&.set(
          i,
          builder.dag.body_builder().finish(
            waffle_switch(
              condition.waffle_member(layout.tag_offset + offset_in_tag, 1, 1),
              cases.subslice({i * 256}..min(i + 1 * 256, cases.len)),
            )
          )
        )
      }
      cases = new_cases
    }
    if cases.len != 1 then unreachable()

    var case_body = cases.get(0)
    for local in case_body.locals do builder.locals.&.push(local)
    case_body.returns
  }
  case function_ptr(signature) waffle_function_ptr(signature)
  case call(call) {
    var return_layout = pesto.funs.get(call.function).return_type().memory_layout()
    waffle_call(
      call.function, mapping.get(call.args),
      return_layout.size, return_layout.alignment,
    )
  }
  case call_indirect(call) {
    var return_layout = expr.type.memory_layout()
    waffle_call_indirect(
      mapping.get(call.function), mapping.get(call.args),
      return_layout.size, return_layout.alignment,
    )
  }
  case call_builtin(call) {
    var args = list[WaffleExpr]()
    for arg in call.args do args.&.push(mapping.get(arg))
    var args = args.to_slice()

    switch call.builtin
    case lower_byte waffle_lower_byte(args.get(0))
    case byte_to_int waffle_byte_to_int(args.get(0))
    case add_ints waffle_add(args.get(0), args.get(1))
    case sub_ints waffle_sub(args.get(0), args.get(1))
    case mul_ints waffle_mul(args.get(0), args.get(1))
    case div_ints waffle_div(args.get(0), args.get(1))
    case mod_ints waffle_mod(args.get(0), args.get(1))
    case and_ints waffle_and(args.get(0), args.get(1))
    case or_ints  waffle_or( args.get(0), args.get(1))
    case xor_ints waffle_xor(args.get(0), args.get(1))
    | Note: The return byte of the compare_ints waffle expression matches the
    | tag for the Ordering enum (| equal greater less).
    case compare_ints waffle_compare_zero(waffle_sub(args.get(0), args.get(1)))
    case crash {
      | Convert the Plum String to bytes ptr + len.
      |
      | String layout: [buffer][len][start]
      |                 |
      |                 v
      |                [refcount][len][bytes]
      var message = args.get(0)
      var ptr_to_buffer = waffle_member(message, 0, 8, 8)
      var ptr_to_bytes = waffle_add(ptr_to_buffer, waffle_int(16))
      var len = waffle_member(message, 8, 8, 8)
      waffle_crash(waffle_aggregate(list(ptr_to_bytes, len).to_slice()))
    }
  }
  case new(value) {
    var value = mapping.get(value)
    var ptr = builder.local(waffle_malloc(waffle_int(8 + value.size)))
    builder.local(waffle_store(ptr,
      waffle_aggregate(list(waffle_int(1), value).to_slice())
    ))
    ptr
  }
  case load(ptr) {
    var layout = expr.type.memory_layout()
    builder.local(waffle_load(
      waffle_add(mapping.get(ptr), waffle_int(8)),
      layout.size, layout.alignment
    ))
  }
  case free(free)
    builder.local(waffle_free(
      mapping.get(free.ptr), waffle_int(8 + free.type.memory_layout().size)
    ))
  case new_buffer(new) {
    | On the heap, we allocate space for the data with the following layout:
    | [reference count][length][item][item][item]...
    var item_layout = new.item_type.memory_layout()
    var len = mapping.get(new.len)
    var ptr = builder.local(waffle_malloc(
      waffle_add(
        waffle_int(8 + 8),
        waffle_mul(len, waffle_int(item_layout.stride_size())),
      )
    ))
    builder.local(waffle_store(ptr, waffle_int(1))) | reference count
    builder.local(waffle_store(waffle_add(ptr, waffle_int(8)), len))
    ptr
  }
  case get_buffer_len(ptr)
    builder.local(
      waffle_load(waffle_add(mapping.get(ptr), waffle_int(8)), 8, 8)
    )
  case load_buffer_item(load) {
    var item_layout = load.item_type.memory_layout()
    builder.local(waffle_load(
      waffle_add(
        waffle_add(mapping.get(load.buffer), waffle_int(16)),
        waffle_mul(
          mapping.get(load.index), waffle_int(item_layout.stride_size())
        )
      ),
      item_layout.size, item_layout.alignment
    ))
  }
  case store_buffer_item(store) {
    var item_layout = store.item_type.memory_layout()
    builder.local(waffle_store(
      waffle_add(
        waffle_add(mapping.get(store.buffer), waffle_int(16)),
        waffle_mul(
          mapping.get(store.index), waffle_int(item_layout.stride_size())
        )
      ),
      mapping.get(store.item),
    ))
  }
  case store_buffer_bytes(store) {
    builder.local(waffle_store_bytes(
      waffle_add(mapping.get(store.buffer), waffle_int(16)), store.bytes
    ))
  }
  case free_buffer(free) {
    var item_layout = free.item_type.memory_layout()
    var ptr = mapping.get(free.buffer)
    var len = builder.local(waffle_load(waffle_add(ptr, waffle_int(8)), 8, 8))
    var size = waffle_add(
      waffle_int(8 + 8),
      waffle_mul(len, waffle_int(item_layout.stride_size())),
    )
    builder.local(waffle_free(ptr, size))
  }
  case get_reference_count(ptr)
    builder.&.local(waffle_load(mapping.get(ptr), 8, 8))
  case increment_reference_count(ptr) {
    var ptr = mapping.get(ptr)
    var new_refcount = builder.&.local(
      waffle_add(waffle_load(ptr, 8, 8), waffle_int(1))
    )
    builder.&.local(waffle_store(ptr, new_refcount))
    new_refcount
  }
  case decrement_reference_count(ptr) {
    var ptr = mapping.get(ptr)
    var new_refcount = builder.&.local(
      waffle_sub(waffle_load(ptr, 8, 8), waffle_int(1))
    )
    builder.&.local(waffle_store(ptr, new_refcount))
    new_refcount
  }
}

| Assumes parameters to be in the mapping.
fun to_waffle(
  body: PestoBody, fun_: PestoFun,
  dag: &Dag[WaffleExpr], mapping: &Map[Id, WaffleExpr],
  pesto: Pesto, | TODO: is this used?
): WaffleBody {
  var builder = body_builder(dag)
  for id in body.exprs do {
    var expr = builder.&.local(fun_.dag.get(id).to_waffle(
      fun_, builder.&, mapping, pesto
    ))
    mapping.put(id, expr)
  }
  builder.finish(mapping.get(body.returns))
}

fun to_waffle(fun_: PestoFun, pesto: Pesto): WaffleFun {
  var dag = dag[WaffleExpr]()
  var builder = body_builder(dag.&)
  var mapping = map[Id, WaffleExpr]()

  var param_layout = fun_.dag.type_of(fun_.body.param).memory_layout()
  var param = builder.&.local(WaffleExpr {
    size = param_layout.size, alignment = param_layout.alignment,
    kind = WaffleExprKind.param,
  })
  mapping.&.put(fun_.body.param, param)

  for id in fun_.body.exprs do {
    var expr = builder.&.local(fun_.dag.get(id).to_waffle(
      fun_, builder.&, mapping.&, pesto
    ))
    mapping.&.put(id, expr)
  }
  var body = builder.finish(mapping.get(fun_.body.returns))

  WaffleFun { dag, body }
}

fun to_waffle(pesto: Pesto): Waffle {
  var funs = map[String, WaffleFun]()
  for fun_ in pesto.funs do funs.&.put(fun_.key, fun_.value.to_waffle(pesto))
  Waffle { entry_point = pesto.entry_point, funs }
}
