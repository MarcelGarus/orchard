import plum.mar

struct Module { path: String }

fun module(path: String): Module { Module { path } }

fun ==(a: Module, b: Module): Bool { a.path == b.path }
fun hash(hasher: &Hasher, module: Module) { hasher.hash(module.path) }

fun write[W](writer: W, module: Module) { writer.write(module.path) }

fun file_paths(module: Module): Slice[String] {
  list(
    "{module.path}.plum",
    "{module.path}/_.plum",
  ).to_slice()
}

fun resolve_import(base: Module, relative_import: String): Result[Module, String] {
  var parent_navigations = 0
  loop
    if relative_import.starts_with(".") then {
      parent_navigations = parent_navigations + 1
      relative_import = relative_import.substr(1..relative_import.len)
    } else break

  if parent_navigations == 0 then
    return error[Module, String]("Can't import packages yet")

  var path =
    "{base.path.split("/").without_last(parent_navigations - 1).join("/")}/
    '{relative_import}"
  ok[Module, String](Module { path })
}
