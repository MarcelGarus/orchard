| The Compiler Stack  
|
| Because Plum interleaves compile-time running of functions with compiling
| functions, we need to ensure that compile-time execution is not recursive.
| So, we maintain a stack of the compiler itself, keeping track of the functions
| that are currently running or compiling.

import mod.mar

struct EggStack { entries: List[EggStackEntry] }
enum EggStackEntry { compiling: String, running: String }

fun egg_stack(): EggStack { EggStack { entries = list[EggStackEntry]() } }

fun ==(a: EggStackEntry, b: EggStackEntry): Bool {
  switch a
  case compiling(a) if b is compiling(b) then a == b else false
  case running(a)   if b is running(b)   then a == b else false
}

fun start_running(stack: &EggStack, signature: String) {
  stack.entries.&.push(EggStackEntry.running(signature))
  stack.print_status()
}
fun done_running(stack: &EggStack) {
  stack.entries.&.pop().running or panic("wasn't running something")
  stack.print_status()
}
fun is_currently_running(stack: EggStack, signature: String): Bool {
  stack.entries.iter().&.contains(EggStackEntry.running(signature))
}

fun start_compiling(stack: &EggStack, signature: String) {
  stack.entries.&.push(EggStackEntry.compiling(signature))
  stack.print_status()
}
fun done_compiling(stack: &EggStack) {
  stack.entries.&.pop().compiling or panic("wasn't running something")
  stack.print_status()
}
fun is_currently_compiling(stack: EggStack, signature: String): Bool {
  stack.entries.iter().&.contains(EggStackEntry.compiling(signature))
}

| Terminal Output  
|
| With arbitrary compile-time code execution, the compilation can take some
| time. To give feedback about the progress, we print stuff to standard error.

fun write_ansi_escape_sequence[W](writer: W, sequence: String) {
  writer.write(27.lower_byte().to_char())
  writer."["
  writer.write(sequence)
}
fun move_cursor_to_front[W](writer: W) {
  writer.write_ansi_escape_sequence("G")
}
fun erase_rest_of_current_line[W](writer: W) {
  writer.write_ansi_escape_sequence("K")
}
fun move_cursor_to_next[W](writer: W, n: Int) {
  if n > 0 then writer.write_ansi_escape_sequence("{n}E")
}
fun move_cursor_to_previous[W](writer: W, n: Int) {
  if n > 0 then writer.write_ansi_escape_sequence("{n}F")
}
var max_preprinted_lines = 0

fun print_status(stack: EggStack) {
  eprint("Running")
  for entry in stack.entries do {
    var signature =
      switch entry
      case compiling(signature) signature
      case running(signature) signature
    eprint(" {signature},")
  }
  eprintln()
  return {} | TODO
  for i in 0..max_preprinted_lines do {
    stderr.move_cursor_to_front()
    stderr.erase_rest_of_current_line()
    stderr.move_cursor_to_next(1)
  }
  stderr.move_cursor_to_previous(max_preprinted_lines)

  var num_printed = 0
  for entry in stack.entries do {
    if num_printed == 5 then break {}

    var comptime_and_signature =
      switch entry
      case compiling(signature) tuple(false, signature)
      case running(signature) tuple(true, signature)
    var comptime = comptime_and_signature.a
    var signature = comptime_and_signature.b

    if comptime then stderr.write_ansi_escape_sequence("32m")
    if signature.len > 60 then
      stderr."{signature.substr(0..57)}..."
    else
      stderr.write(signature)
    if comptime then stderr.write_ansi_escape_sequence("0m")
    stderr."\n"

    num_printed = num_printed + 1
  }
  stderr.move_cursor_to_previous(num_printed)
  max_preprinted_lines = num_printed
}
