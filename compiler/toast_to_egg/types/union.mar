| Unioning types  
| When multiple branches evaluate to different types, those need to be unioned
| to get the overall result type. In that case, we need to make sure that all
| types "line up" -- for example, you can't have one branch evaluate to an Int
| and another one to a String. This process of unioning types is implemented
| here.
|
| A more complex example:
|
| First =
|   | A ^1
|     B ^1
| Second =
|   | A ^1
|     C ^C
| Unioned =
|   | A ^1
|     B
|       | A ^1
|         B ^1
|     C
|       | A ^1
|         C ^1
|
| Here, we have two enum types that are unioned. The resulting type contains a
| recursive A variant. As soon as either B or C occur, we know from which
| original type this value stems, so we have a more precise type for the
| contained payload.

fun union(types: Slice[EggType]): Result[EggType, String] {
  var common = types.get(0)
  for type in types.without_first() do
    common = union(common, type)?
  ok[EggType, String](common)
}
fun union(a: EggType, b: EggType): Result[EggType, String] {
  var stack = list[Tuple3[JoinMode, EggType, EggType]]()
  switch join(JoinMode.union, a, b, stack.&)
  case some(type) ok[EggType, String](type)
  case none error[EggType, String]({
    var b = string_builder().&
    b."Unioning types failed. This is the unioning stack:\n"
    for entry in stack do b."{entry.a.debug()}\n  {entry.b}\n  {entry.c}"
    b.to_string()
  })
}
enum JoinMode { union, intersection }
fun flip(mode: JoinMode): JoinMode {
  switch mode case union JoinMode.intersection case intersection JoinMode.union
}
fun ==(a: JoinMode, b: JoinMode): Bool {
  switch a
  case union b is union
  case intersection b is intersection
}
fun join(
  mode: JoinMode, a: EggType, b: EggType,
  currently_joining: &List[Tuple3[JoinMode, EggType, EggType]],
): Maybe[EggType] {
  if currently_joining.iter().&.find(tuple(mode, a, b)) is some(index) then {
    var level = currently_joining.len - index
    return some(EggType.recursive(level))
  }

  currently_joining.push(tuple(mode, a, b))

  a = a.extend_one_level()
  b = b.extend_one_level()
  var result = join_logic(mode, a, b, currently_joining)
    or return none[EggType]()

  currently_joining.pop()
  some(result)
}
fun join_logic(
  mode: JoinMode, a: EggType, b: EggType,
  currently_joining: &List[Tuple3[JoinMode, EggType, EggType]],
): Maybe[EggType] {
  if a is never then return some(switch mode case union b case intersection a)
  if b is never then return some(switch mode case union a case intersection b)

  switch a
  case var_(a_name) {
    var b_name = b.var_ or return none[EggType]()
    a_name == b_name or return none[EggType]()
    some(EggType.var_(a_name))
  }
  case primitive(a_primitive) {
    var b_primitive = b.primitive or { eprintln("b is not a primitive") return none[EggType]() }
    a_primitive.name == b_primitive.name or { eprintln("names don't match") return none[EggType]() }
    | TODO: loosen constraints (this requires implementing casting arrays)
    a_primitive.args == b_primitive.args or { eprintln("args don't match") return none[EggType]() }
    some(EggType.primitive(a_primitive))
  }
  case never unreachable()
  case struct_(a_fields) {
    var b_fields = b.struct_ or return none[EggType]()
    var fields = map[String, EggType]()
    a_fields.size == b_fields.size or return none[EggType]()
    for a_field in a_fields do {
      var key = a_field.key
      var a_type = a_field.value
      var b_type = b_fields.get_maybe(key) or return none[EggType]()
      fields.&.put(
        key,
        join(mode, a_type, b_type, currently_joining)
          or return none[EggType](),
      )
    }
    some(EggType.struct_(fields))
  }
  case enum_(a_variants) {
    switch mode
    case union {
      var b_variants = b.enum_ or return none[EggType]()
      var variants = map[String, EggType]()
      for variant in a_variants do variants.&.put(variant.key, variant.value)
      for variant in b_variants do {
        var key = variant.key
        var b_arg = variant.value
        variants.&.put(key, {
          if variants.get_maybe(key) is some(a_arg) then
            join(mode, a_arg, b_arg, currently_joining)
              or return none[EggType]()
          else
            b_arg
        })
      }
      some(EggType.enum_(variants))
    }
    case intersection {
      var b_variants = b.enum_ or return none[EggType]()
      var variants = map[String, EggType]()
      for variant in a_variants do {
        var name = variant.key
        var a_arg = variant.value
        var b_arg = b_variants.get_maybe(name) or continue
        var arg = join(mode, a_arg, b_arg, currently_joining)
          or return none[EggType]()
        variants.&.put(variant.key, variant.value)
      }
      some(EggType.enum_(variants))
    }
  }
  case lambda(a_lambda) {
    var b_lambda = b.lambda or return none[EggType]()

    | Lambda parameters are contravariant, the return type is covariant:
    | foo: (\ (| b c) -> (| x y z)) =
    |   condition
    |   % true ->  \ a: (| a b c) -> (| x z) = ...
    |     false -> \ a: (| b c d) -> (| y z) = ...
    var args = list[EggType]()
    for both in zip(a_lambda.args.iter(), b_lambda.args.iter()) do
      args.&.push(
        join(mode.flip(), both.a, both.b, currently_joining)
          or return none[EggType]()
      )
    var args = args.to_slice()

    var return_type = join(
      mode, a_lambda.return_type.*, b_lambda.return_type.*, currently_joining
    ) or return none[EggType]()

    some(EggType.lambda(LambdaType {
      args, return_type = return_type.put_on_heap()
    }))
  }
  case recursive unreachable()
}
