| Collecting Type Variables  

import mod.mar

fun collect_type_variables(type: EggType): Set[String] {
  var vars = set[String]()
  type.collect_type_variables(vars.&)
  vars
}
fun collect_type_variables(types: Slice[EggType]): Set[String] {
  var vars = set[String]()
  types.collect_type_variables(vars.&)
  vars
}
fun collect_type_variables(type: EggType, out: &Set[String]) {
  switch type
  case var_(name) out.put(name)
  case primitive(primitive) primitive.args.collect_type_variables(out)
  case never {}
  case struct_(fields)
    for field in fields do field.value.collect_type_variables(out)
  case enum_(variants)
    for variant in variants do variant.value.collect_type_variables(out)
  case lambda(lambda) {
    lambda.args.collect_type_variables(out)
    lambda.return_type.collect_type_variables(out)
  }
  case recursive {}
}
fun collect_type_variables(types: Slice[EggType], out: &Set[String]) {
  for type in types do type.collect_type_variables(out)
}
