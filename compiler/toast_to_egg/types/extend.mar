| Navigating into types  
| When navigating into types, you can't just naively take the contained types
| because they might refer to surrounding types via recursive types. This
| function extends recursive calls that reference the root type so that when you
| navigate into this type, the resulting types are still self-contained.
|
| For example, if you have this type:
|
| | A
|   B
|     | C
|       D ^2
|
| If you switch on a value of this type, the enum payload in the B case should
| have this type:
|
| | C
|   D
|     | A
|       B ^2
|
| As you see, we can't just naively take the type of the B variant because it
| refers to the outer type that we remove. Having ^2 in a type where there are
| no two types surrounding it is bad. So, types need to "wrap around" -- as you
| navigate into types, recursive types should be extended at the bottom so that
| you never actually reach a recursive marker.
|
| In particular, we need to extend all recursive types that refer to the former
| root type. To do that, we first create an extension that root-recursive types
| will be extended with:
|
| | A
|   B ^-1
|
| The -1 is just a temporary marker that means "replace this so that it points
| to the new root". Then, we walk the original type and replace all recursive
| types that reference the root with this extension, replacing -1 with the level
| that we are currently at.
fun extend_one_level(type: EggType): EggType {
  switch type
  case var_(name) EggType.var_(name)
  case primitive(primitive) {
    var new_args = list[EggType]()
    for arg in primitive.args.iter().enumerate() do
      new_args.&.push({
        | Type that is the original struct except the arg that we navigate
        | into. This arg has been replaced with a recursive type.
        var extension = {
          var ext_args = list[EggType]()
          for ext_arg in primitive.args.iter().enumerate() do
            ext_args.&.push(
              if ext_arg.index == arg.index
              then EggType.recursive(-1)
              else ext_arg.item
            )
          EggType.primitive(PrimitiveType {
            name = primitive.name, args = ext_args.to_slice()
          })
        }
        arg.item.extend_recursive_types(1, extension)
      })
    EggType.primitive(PrimitiveType {
      name = primitive.name, args = new_args.to_slice()
    })
  }
  case never EggType.never
  case struct_(fields) EggType.struct_({
    var new_fields = map[String, EggType]()
    for field in fields do
      new_fields.&.put(field.key, {
        | Type that is the original struct except the field that we navigate
        | into. This field has been replaced with a recursive type.
        var extension = {
          var ext_fields = map[String, EggType]()
          for ext_field in fields do
            ext_fields.&.put(
              ext_field.key,
              if ext_field.key == field.key
              then EggType.recursive(-1)
              else ext_field.value
            )
          EggType.struct_(ext_fields)
        }
        field.value.extend_recursive_types(1, extension)
      })
    new_fields
  })
  case enum_(variants) EggType.enum_({
    var new_variants = map[String, EggType]()
    for variant in variants do
      new_variants.&.put(variant.key, {
        | Type that is the original enum except the variant that we navigate into.
        | This variant has been replaced with a recursive type.
        var extension = {
          var ext_variants = map[String, EggType]()
          for ext_variant in variants do
            ext_variants.&.put(
              ext_variant.key,
              if ext_variant.key == variant.key then
                EggType.recursive(-1)
              else
                ext_variant.value
            )
          EggType.enum_(ext_variants)
        }
        variant.value.extend_recursive_types(1, extension)
      })
    new_variants
  })
  case lambda(lambda) EggType.lambda(LambdaType {
    args = {
      var args = list[EggType]()
      for arg in lambda.args do
        args.&.push(arg.extend_recursive_types(1, type))
      args.to_slice()
    },
    return_type = lambda.return_type
      .extend_recursive_types(1, type).put_on_heap(),
  })
  case recursive unreachable()
}
fun extend_recursive_types(
  type: EggType, level: Int, extension: EggType
): EggType {
  switch type
  case var_(name) EggType.var_(name)
  case primitive(primitive) {
    var new_args = list[EggType]()
    for arg in primitive.args do
      new_args.&.push(arg.extend_recursive_types(level + 1, extension))
    EggType.primitive(PrimitiveType {
      name = primitive.name, args = new_args.to_slice()
    })
  }
  case never EggType.never
  case struct_(fields) {
    var new_fields = map[String, EggType]()
    for field in fields do
      new_fields.&.put(
        field.key, field.value.extend_recursive_types(level + 1, extension))
    EggType.struct_(new_fields)
  }
  case enum_(variants) {
    var new_variants = map[String, EggType]()
    for variant in variants do
      new_variants.&.put(
        variant.key, variant.value.extend_recursive_types(level + 1, extension)
      )
    EggType.enum_(new_variants)
  }
  case lambda(lambda)
    EggType.lambda(LambdaType {
      args = {
        var args = list[EggType]()
        for arg in lambda.args do
          args.&.push(arg.extend_recursive_types(level + 1, extension))
        args.to_slice()
      },
      return_type = lambda.return_type
        .extend_recursive_types(level + 1, extension).put_on_heap()
    })
  case recursive(actual_level)
    if actual_level == level then
      extension.replace_recursive_level(-1, level)
    else
      EggType.recursive(actual_level)
}
fun replace_recursive_level(type: EggType, from: Int, to: Int): EggType {
  switch type
  case var_(name) EggType.var_(name)
  case primitive(primitive) {
    var args = list[EggType]()
    for arg in primitive.args do
      args.&.push(arg.replace_recursive_level(from, to))
    EggType.primitive(PrimitiveType {
      name = primitive.name, args = args.to_slice()
    })
  }
  case never EggType.never
  case struct_(fields) {
    var new_fields = map[String, EggType]()
    for field in fields do
      new_fields.&.put(
        field.key, field.value.replace_recursive_level(from, to))
    EggType.struct_(new_fields)
  }
  case enum_(variants) {
    var new_variants = map[String, EggType]()
    for variant in variants do
      new_variants.&.put(
        variant.key, variant.value.replace_recursive_level(from, to)
      )
    EggType.enum_(new_variants)
  }
  case lambda(lambda)
    EggType.lambda(LambdaType {
      args = {
        var args = list[EggType]()
        for arg in lambda.args do
          args.&.push(arg.replace_recursive_level(from, to))
        args.to_slice()
      },
      return_type = lambda.return_type
        .replace_recursive_level(from, to).put_on_heap()
    })
  case recursive(actual_level)
    EggType.recursive(if actual_level == from then to else actual_level)
}
