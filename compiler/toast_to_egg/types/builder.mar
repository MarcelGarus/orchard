import mod.mar

var type_var_t = EggType.var_("t")
fun type_primitive(name: String, args: Slice[EggType]): EggType {
  EggType.primitive(PrimitiveType { name, args })
}
fun type_struct(fields: Map[String, EggType]): EggType {
  EggType.struct_(fields)
}
fun type_enum(variants: Map[String, EggType]): EggType {
  EggType.enum_(variants)
}
var type_nothing = type_struct(map[String, EggType]())
var type_byte = type_primitive("Byte", empty_slice[EggType]())
var type_int = type_primitive("Int", empty_slice[EggType]())
var type_string = type_struct(map("utf8_bytes" -> type_array(type_byte)))
var type_type = type_primitive("Type", empty_slice[EggType]())
fun type_array(item_type: EggType): EggType {
  type_primitive("Array", list(item_type).to_slice())
}
var type_never = EggType.never
var type_ordering = type_enum(map(
  "less" -> type_nothing, "equal" -> type_nothing, "greater" -> type_nothing
))
var type_type_info = type_enum(map(
  "int"    -> type_nothing,
  "string" -> type_nothing,
  "struct" -> type_linked_list(type_field),
  "enum"   -> type_linked_list(type_variant),
  "type"   -> type_nothing,
))
var type_field = type_struct(map(
  "name" -> type_string, "type" -> type_type
))
var type_variant = type_struct(map(
  "name" -> type_string,
  "args" -> type_linked_list(type_type), | TODO: update
))
fun type_linked_list(item: EggType): EggType {
  type_enum(map(
    "empty" -> type_nothing,
    "more"  -> type_struct(map("item" -> item, "rest" -> EggType.recursive(2))),
  ))
}
fun type_range(item: EggType): EggType {
  type_struct(map("start" -> item, "end" -> item))
}
