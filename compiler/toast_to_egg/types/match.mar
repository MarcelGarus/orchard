| Matching Types  
| Checks if a concrete type without type variables is assignable to a generic
| type that possibly contains type variables. Returns a substitution map of what
| concrete types the type variables need to have for the types to match.
|
| Int            -> Int           ? {}
| Int            -> String        ? -
| Int            -> t             ? {t: Int}
| List Int       -> List t        ? {t: Int}
| Map Int String -> Map t t       ? -
| Never          -> Int           ? {}
| Never          -> List t        ? {}
| Never          -> Never         ? {}
| | Foo Bar      -> | Foo Bar Baz ? {}

import mod.mar

fun match_against(
  concrete: EggType, generic: EggType, constraints: &TypeVariableConstraints
): Bool {
  concrete.match_against(
    generic, constraints, list[Tuple2[EggType, EggType]]().&
  )
}
fun match_against(
  concrete: Slice[EggType], generic: Slice[EggType],
  constraints: &TypeVariableConstraints
): Bool {
  concrete.match_against(
    generic, constraints, list[Tuple2[EggType, EggType]]().&
  )
}
| A mapping from type variables (lowercase) to concrete types that they need to
| be replaced with.
struct Substitutions { substitutions: Map[String, EggType] }
struct TypeVariableConstraints {
  constraints: List[Tuple2[String, EggType]]
}

fun constraints(): TypeVariableConstraints {
  TypeVariableConstraints {
    constraints = list[Tuple2[String, EggType]]()
  }
}
fun add(constraints: &TypeVariableConstraints, name: String, type: EggType) {
  constraints.constraints.&.push(tuple(name, type))
}
fun check_coherency(
  constraints: TypeVariableConstraints
): Maybe[Substitutions] {
  var substitutions = map[String, EggType]()
  for constraint in constraints.constraints do {
    var variable = constraint.a
    var concrete = constraint.b
    var type =
      switch substitutions.get_maybe(variable)
      case some(existing)
        union(existing, concrete) or return none[Substitutions]()
      case none concrete
    substitutions.&.put(variable, type.canonicalize())
  }
  some(Substitutions { substitutions })
}
fun match_against(
  concrete: EggType, generic: EggType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[EggType, EggType]],
): Bool {
  if currently_matching.iter().&.find(tuple(concrete, generic)) is some(index)
  then return true

  currently_matching.push(tuple(concrete, generic))

  concrete = concrete.extend_one_level()
  generic = generic.extend_one_level()
  var result = match_against_logic(
    concrete, generic, constraints, currently_matching
  )

  currently_matching.pop()
  result
}
fun match_against_logic(
  concrete: EggType, generic: EggType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[EggType, EggType]],
): Bool {
  if concrete is never then return true

  switch generic
  case var_(name) {
    constraints.add(name, concrete)
    true
  }
  case primitive(generic_primitive) {
    var concrete_primitive = concrete.primitive or return false
    concrete_primitive.name == generic_primitive.name or return false
    concrete_primitive.args.match_against(
      generic_primitive.args, constraints, currently_matching
    )
  }
  case never concrete is never
  case struct_(generic_fields) {
    var concrete_fields = concrete.struct_ or return false
    for field in concrete_fields do {
      var concrete_type = field.value
      var generic_type = generic_fields.get_maybe(field.key) or return false
      concrete_type.match_against(generic_type, constraints, currently_matching)
        or return false
    }
    for field in generic_fields do
      concrete_fields.contains(field.key) or return false
    true
  }
  case enum_(generic_variants) {
    var concrete_variants = concrete.enum_ or return false
    for variant in concrete_variants do {
      var concrete_args = variant.value
      var generic_args = generic_variants.get_maybe(variant.key) or return false
      concrete_args.match_against(generic_args, constraints, currently_matching)
        or return false
    }
    true
  }
  case lambda(generic_lambda) {
    var concrete_lambda = concrete.lambda or return false
    concrete_lambda.args.match_against(
      generic_lambda.args, constraints, currently_matching
    ) or return false
    concrete_lambda.return_type.*.match_against(
      generic_lambda.return_type.*, constraints, currently_matching
    ) or return false
  }
  case recursive unreachable()
}
fun match_against(
  concrete: Slice[EggType], generic: Slice[EggType],
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[EggType, EggType]],
): Bool {
  concrete.len == generic.len or return false
  for both in zip(concrete.iter(), generic.iter()) do
    both.a.match_against(both.b, constraints, currently_matching) or
      return false
  true
}

fun write[W](writer: W, substitutions: Substitutions) {
  var first = true
  for substitution in substitutions.substitutions do {
    if first then first = false else writer.", "
    writer."{substitution.key} = {substitution.value}"
  }
}


| Specializing types  
| For example, specializing (List t) using {t -> Int} to (List Int).

fun specialize(
  type: EggType, substitutions: Substitutions
): EggType {
  switch type
  case var_(name)
    substitutions.substitutions.get_maybe(name) or
      panic("substitution for {name} missing: {substitutions.substitutions}")
  case primitive(primitive)
    EggType.primitive(PrimitiveType {
      name = primitive.name, args = primitive.args.specialize(substitutions)
    })
  case never EggType.never
  case struct_(fields) EggType.struct_(fields.specialize(substitutions))
  case enum_(variants) EggType.enum_(variants.specialize(substitutions))
  case lambda(lambda)
    EggType.lambda(LambdaType {
      args = lambda.args.specialize(substitutions),
      return_type = lambda.return_type.specialize(substitutions).put_on_heap(),
    })
  case recursive(level) EggType.recursive(level)
}
fun specialize(
  types: Map[String, EggType], substitutions: Substitutions
): Map[String, EggType] {
  var specialized = map[String, EggType]()
  for entry in types do
    specialized.&.put(entry.key, entry.value.specialize(substitutions))
  specialized
}
fun specialize(
  types: Slice[EggType], substitutions: Substitutions
): Slice[EggType] {
  var specialized = list[EggType]()
  for type in types do specialized.&.push(type.specialize(substitutions))
  specialized.to_slice()
}
fun specialize(a: Substitutions, b: Substitutions): Substitutions {
  var result = map[String, EggType]()
  for entry in a.substitutions do
    result.&.put(entry.key, entry.value.specialize(b))
  Substitutions { substitutions = result }
}
