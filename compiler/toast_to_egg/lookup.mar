| Looking up Functions  

import mod.mar

fun signature(module: Module, name: String, params: Slice[FunParam]): String {
  var b = string_builder().&
  b."{module}.{name}"
  for param in params do
    if param.type == type_type then
      b." {param.name}: {param.type}"
    else
      b." {param.type}"
  b.to_string()
}

struct UncompiledFun {
  name: StringAndSrc, params: Slice[FunParam], impl: UncompiledFunImpl
}
struct FunParam { name: String, type: PlumType }
enum UncompiledFunImpl {
  local: LocalUncompiledFun, imported: String, builtin: Builtin
}
struct LocalUncompiledFun { module: Module, fun_: ToastFun }

fun module(fun_: UncompiledFun): Module {
  switch fun_.impl
  case local(fun_) fun_.module
  case builtin builtin_module
  case imported unreachable()
}

fun collect_all_funs(
  toasts: Map[Module, Toast], types: Map[String, PlumTypeDef]
): Result[Tuple2[Map[String, UncompiledFun], Map[Module, Set[String]]], Error] {
  var funs = map[String, UncompiledFun]()
  var visible = map[Module, Set[String]]()

  for entry in toasts do {
    var module = entry.key
    var toast = entry.value
    var visible_in_this_module = set[String]()

    for def in toast.defs do
      | TODO: handle multiple functions with same signature
      switch def
      case fun_(fun_) {
        var params = list[FunParam]()
        for param in fun_.params do
          params.&.push(FunParam {
            name = param.name.string,
            type = param.type.compile(module, types)?,
          })
        var params = params.to_slice()

        var signature = signature(module, fun_.name.string, params)

        visible_in_this_module.&.put(signature)
        funs.&.put(signature, UncompiledFun {
          name = fun_.name,
          params,
          impl = UncompiledFunImpl.local(LocalUncompiledFun { module, fun_ })
        })
      }
      case import_(import_) {
        for part in import_.parts do {
          var imported_module = module.resolve_import(part.module) or(error)
            return error[
              Tuple2[Map[String, UncompiledFun], Map[Module, Set[String]]],
              Error,
            ](error(
              error, import_.keyword.src
            ))
          for item in part.items do
            if item is fun_(signature) then {
              var params = list[FunParam]()
              for param in signature.args do
                params.&.push(FunParam {
                  name = param.name.string,
                  type = param.type.compile(module, types)?,
                })
              var params = params.to_slice()

              var our_signature =
                signature(module, signature.name.string, params)
              var referred_signature =
                signature(imported_module, signature.name.string, params)

              visible_in_this_module.&.put(our_signature)
              funs.&.put(our_signature, UncompiledFun {
                name = signature.name,
                params,
                impl = UncompiledFunImpl.imported(referred_signature),
              })
            }
        }
      }
      default {}

    visible.&.put(module, visible_in_this_module)
  }
  ok[Tuple2[Map[String, UncompiledFun], Map[Module, Set[String]]], Error](tuple(
    funs, visible
  ))
}

| Invariant: Arguments that have the type Type also have a compile-time-known
| value.
struct FunArg { value: Maybe[PlumType], type: PlumType }

fun write[W](writer: W, arg: FunArg) {
  if arg.value is some(type) then writer."{type}:"
  writer."{arg.type}"
}

fun match_against(
  args: Slice[FunArg], params: Slice[FunParam],
  constraints: &TypeVariableConstraints,
): Bool {
  args.len == params.len or return false
  for both in zip(args.iter(), params.iter()) do {
    var arg = both.a
    var param = both.b
    arg.type.match_against(param.type, constraints) or return false
    if arg.type == type_type then {
      var result = arg.value.unwrap().match_against(
        PlumType.var_(param.name), constraints
      )
      if not(result) then unreachable()
    }
  }
  true
}

fun lookup(
  funs: Map[String, UncompiledFun], visible_funs: Set[String],
  name: String, args: Slice[FunArg], src: Src
): Result[Tuple2[String, Substitutions], Error] {
  var name_matches = list[Tuple2[String, UncompiledFun]]()
  for signature in visible_funs do {
    var fun_ = funs.get(signature)
    fun_.name.string == name or continue
    name_matches.&.push(tuple(signature, fun_))
  }

  if name_matches.is_empty() then
    return error[Tuple2[String, Substitutions], Error]({
      var b = string_builder().&
      b."There is no function named {name} in scope. Visible functions:"
      for signature in visible_funs do b."\n- {signature}"
      error(b.to_string(), src)
    })

  var full_matches = list[Tuple3[String, Substitutions, UncompiledFun]]()
  for item in name_matches do {
    var signature = item.a
    var fun_ = item.b

    var constraints = constraints()
    args.match_against(fun_.params, constraints.&) or continue
    var substitutions = constraints.check_coherency() or continue
    full_matches.&.push(tuple(signature, substitutions, fun_))
  }

  if full_matches.is_empty() then
    return error[Tuple2[String, Substitutions], Error]({
      var b = string_builder().&
      b."There is no matching function named {name} for the arg {args}. These 
        'functions have mismatched types:"
      for item in name_matches do {
        var signature = item.a
        b."\n- {signature}"
        var fun_ = item.b
        var constraints = constraints()
        args.match_against(fun_.params, constraints.&) or {
          b."  (doesn't match types)"
          continue
        }
        var substitutions = constraints.check_coherency() or {
          b."  (impossible constraints:"
          for constraint in constraints.constraints do
            b." {constraint}"
          b.")"
          continue
        }
      }
      error(b.to_string(), src)
    })

  if full_matches.len > 1 then
    return error[Tuple2[String, Substitutions], Error]({
      var b = string_builder().&
      b."Multiple functions match {name} {args}:"
      for match in full_matches do b."\n  {match.a} with {match.b.debug()}"
      error(b.to_string(), src)
    })

  var matching_fun = full_matches.get(0)
  var signature = matching_fun.a
  var substitutions = matching_fun.b
  var fun_ = matching_fun.c

  | Make sure that all type variables are constrained.
  var type_vars = set[String]()
  for param in fun_.params do param.type.collect_type_variables(type_vars.&)
  var all_constrained = true
  for var_ in type_vars do
    if not(substitutions.substitutions.contains(var_)) then
      all_constrained = false
  all_constrained or
    return error[Tuple2[String, Substitutions], Error]({
      var b = string_builder().&
      b."Function {name}"
      for param in fun_.params do b." {param.name}: {param.type}"
      b." matches, but not all type 
        'variables are constrained:"
      for var_ in type_vars do {
        b."\n  {var_} "
        switch substitutions.substitutions.get_maybe(var_)
        case some(type) b."= {type}"
        case none b."is unconstrained"
      }
      error(b.to_string(), src)
    })

  ok[Tuple2[String, Substitutions], Error](tuple(signature, substitutions))
}
