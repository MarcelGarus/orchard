| Running code at compile time  
| Plum guarantees that functions with compile-time known args run at compile
| time. Here is the code for that.

import mod.mar

fun run(
  fun_: UncompiledFun, substitutions: Substitutions, args: Slice[EggValue],
  context: EggContext,
): Result[EggValue, Error] {
  var arg_types = fun_.params.specialize(substitutions)
  var module = fun_.module()
  var signature = {
    var b = string_builder().&
    b."{module}.{fun_.name.string}"
    for arg in args do b." {arg}"
    b.to_string()
  }

  if context.stack.is_currently_running(signature) then
    return error[EggValue, Error](error({
      var b = string_builder().&
      b."Infinite comptime recursion:"
      for entry in context.stack.entries do b." {entry.debug()},"
      b.to_string()
    }, invalid_src()))
  context.stack.start_running(signature)

  var result =
    | TODO: don't special-case builtins here?
    switch fun_.impl
    case builtin(builtin) builtin.run(substitutions, args)?
    case local(local_fun) {
      var fun_ = local_fun.fun_

      | Compile the function first just to make sure that there are no errors
      | inside (and if there are, they should be reported first).
      var egg_fun = fun_.compile(
        module, context.visible_by_module, context.funs, context.types
      )?
      egg_fun.run(substitutions, args, context)?

      | switch fun_.body.compile(body, module, visible.&, context)
      | case ok(returned) {
      |   | TODO: handle panics
      |   switch body.get(returned).kind
      |   case comptime(value) ComptimeResult.returns(value)
      |   default
      |     panic(
      |       "comptime call result is not comptime: 
      |       '{body.get(returned).kind.debug()}"
      |     )
      | }
      | case error(error) ComptimeResult.comptime_error(error.message)
    }
    case imported unreachable()

  context.stack.done_running()
  ok[EggValue, Error](result)
}


struct RunState {
  code: EggCode,
  values: Map[EggId, EggValue],
  context: EggContext,
}
fun define(state: &RunState, id: EggId, value: EggValue) {
  state.values.&.put(id, value)
}
fun get(state: &RunState, id: EggId): EggValue { state.values.get(id) }

fun run(
  fun_: EggFun, substitutions: Substitutions, args: Slice[EggValue],
  context: EggContext,
): Result[EggValue, Error] {
  switch fun_.impl
  case builtin(builtin) {
    builtin.run(substitutions, args)
  }
  case code(code) {
    var state = RunState {
      code,
      values = map[EggId, EggValue](),
      context,
    }
    code.body.run(args, state.&)
  }

}

fun run(
  body: EggBody, args: Slice[EggValue], state: &RunState
): Result[EggValue, Error] {
  for arg in zip(body.params.iter(), args.iter()) do
    state.define(arg.a, arg.b)
  for id in body.exprs do
    state.define(id, id.run(state)?)
  ok[EggValue, Error](state.get(body.returns))
}

fun run(id: EggId, state: &RunState): Result[EggValue, Error] {
  var expr = state.code.get(id)
  ok[EggValue, Error](
    switch expr.kind
    case param unreachable()
    case comptime(value) value
    case struct_(struct_) {
      var fields = map[String, EggValue]()
      for field in struct_ do fields.&.put(field.key, state.get(field.value))
      EggValue.struct_(fields)
    }
    case member(member) state.get(member.of).struct_.unwrap().get(member.name)
    case enum_(enum_)
      EggValue.enum_(EggEnumValue {
        name = enum_.name, value = state.get(enum_.value).put_on_heap()
      })
    case switch_(switch_) {
      var condition = state.get(switch_.condition).enum_.unwrap()
      var case_body = switch_.cases.get(condition.name)
      var args =
        if case_body.params.is_empty()
        then empty_slice[EggValue]()
        else list(condition.value.*).to_slice()
      case_body.run(args, state)?
    }
    case lambda(body) {
      EggValue.lambda(EggLambdaValue {
        captures = state.values, body
      })
    }
    case call_lambda(call) {
      var lambda = state.get(call.lambda).lambda.unwrap()
      var args = list[EggValue]()
      for arg in call.args do args.&.push(state.get(arg))
      | lambda.body.run(args)
      todo("comptime call lambda")
    }
    case call_fun(call) {
      var args = list[EggValue]()
      for arg in call.args do args.&.push(state.get(arg))
      var args = args.to_slice()

      | TODO: store substitutions in the call and apply them here
      state.context.funs.get(call.function)
        .run(
          Substitutions { substitutions = map[String, PlumType]() },
          args, state.context,
        )?
    }
    case call_builtin(call) {
      var args = list[EggValue]()
      for arg in call.args do args.&.push(state.get(arg))
      var args = args.to_slice()

      switch call.instruction
      case add_ints EggValue.int(args.get(0).int.unwrap() + args.get(1).int.unwrap())
      case sub_ints EggValue.int(args.get(0).int.unwrap() - args.get(1).int.unwrap())
      case mul_ints EggValue.int(args.get(0).int.unwrap() * args.get(1).int.unwrap())
      case div_ints EggValue.int(args.get(0).int.unwrap() / args.get(1).int.unwrap())
      case mod_ints EggValue.int(args.get(0).int.unwrap() % args.get(1).int.unwrap())
      case and_ints EggValue.int(args.get(0).int.unwrap() & args.get(1).int.unwrap())
      case or_ints EggValue.int(args.get(0).int.unwrap().or(args.get(1).int.unwrap()))
      case xor_ints EggValue.int(args.get(0).int.unwrap() ^ args.get(1).int.unwrap())
      case compare_ints {
        todo("comptime compare ints")
        EggValue.int(args.get(0).int.unwrap() + args.get(1).int.unwrap())
      }
      case concat_strings
        EggValue.string(args.get(0).string.unwrap() + args.get(1).string.unwrap())
      case crash todo("comptime crash")
    }
    case cast(id) state.get(id)
  )
}

fun run(
  builtin: Builtin, substitutions: Substitutions, args: Slice[EggValue]
): Result[EggValue, Error] {
  ok[EggValue, Error](
    switch builtin
    case add_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(a + b)
    }
    case sub_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(a - b)
    }
    case mul_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(a * b)
    }
    case div_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      if b == 0 then EggValue.crash("Divide by zero.") else EggValue.int(a / b)
    }
    case mod_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      if b == 0 then EggValue.crash("Mod by zero.") else EggValue.int(a % b)
    }
    case and_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(a & b)
    }
    case or_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(or(a, b))
    }
    case xor_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      EggValue.int(a ^ b)
    }
    case compare_ints {
      var a = args.get(0).int.unwrap()
      var b = args.get(1).int.unwrap()
      var name =
        switch a <=> b
        case less "less"
        case equal "equal"
        case greater "greater"
      EggValue.enum_(EggEnumValue {
        name, value = egg_value_nothing.put_on_heap()
      })
    }
    case concat_strings {
      var a = args.get(0).string.unwrap()
      var b = args.get(1).string.unwrap()
      EggValue.string("{a}{b}")
    }
    case crash {
      var message = args.get(0).string.unwrap()
      EggValue.crash(message)
    }
    case type_of EggValue.type(substitutions.substitutions.get("t"))
    case type_info {
      var type = args.get(0).type.unwrap()
      switch type.extend_one_level()
      case primitive(name)
        EggValue.enum_(EggEnumValue {
          name, value = egg_value_nothing.put_on_heap()
        })
      case never
        EggValue.enum_(EggEnumValue {
          name = "never", value = egg_value_nothing.put_on_heap()
        })
      case struct_(struct_)
        EggValue.enum_(EggEnumValue {
          name = "struct",
          value = egg_value_list({
            var fields = list[EggValue]()
            for field in struct_ do {
              fields.&.push(EggValue.struct_(map(
                "name" -> EggValue.string(field.key),
                "type" -> EggValue.type(field.value),
              )))
            }
            fields.to_slice()
          }).put_on_heap()
        })
      case enum_(enum_)
        EggValue.enum_(EggEnumValue {
          name = "enum",
          value = egg_value_list({
            var variants = list[EggValue]()
            for variant in enum_ do {
              variants.&.push(EggValue.struct_(map(
                "name" -> EggValue.string(variant.key),
                "type" -> EggValue.type(variant.value),
              )))
            }
            variants.to_slice()
          }).put_on_heap()
        })
      case lambda todo("type_info of lambda")
      case recursive unreachable()
    }
  )
}
