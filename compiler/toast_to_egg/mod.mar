| Converting Toast To Egg  

import ../plum.mar
import visible.mar
import types/mod.mar
import lookup.mar
import compile_fun.mar

fun to_egg(toasts: Map[Module, Toast], entry_module: Module): Result[Egg, Error] {
  var types = compile_all_types(toasts)?

  var funs = map[String, EggFun]()
  for toast in toasts do {
    var module = toast.key
    var toast = toast.value
    for def in toast.defs do
      if def is fun_(fun_) then {
        var params = list[FunParam]()
        for param in fun_.params do
          params.&.push(FunParam {
            name = param.name.string, type = param.type.compile(module, types)?
          })
        var params = params.to_slice()
        var signature = signature(module, fun_.name.string, params)
        var compiled = fun_.compile(module, types, toasts)?
        funs.&.put(signature, compiled)
      }
  }

  ok[Egg, Error](Egg { funs })
}
