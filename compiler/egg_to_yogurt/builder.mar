import mod.mar

struct YogurtBodyBuilder {
  dag: &Dag[YogurtExpr], params: List[Id], children: List[Id]
}

fun body_builder(dag: &Dag[YogurtExpr]): _ {
  YogurtBodyBuilder { dag, params = list[Id](), children = list[Id]() }
}
fun push_param(body: &YogurtBodyBuilder, type: YogurtType): Id {
  var id = body.dag.&.put(YogurtExpr { op = YogurtOp.param, type })
  body.params.&.push(id)
  id
}
fun push(body: &YogurtBodyBuilder, op: YogurtOp, type: YogurtType): Id {
  var id = body.dag.&.put(YogurtExpr { op, type })
  body.children.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: Id): YogurtExpr { body.dag.get(id) }
fun type_of(body: YogurtBodyBuilder, id: Id): YogurtType {
  body.dag.type_of(id)
}
fun finish(body: YogurtBodyBuilder, id: Id): YogurtBody {
  YogurtBody {
    params = body.params.to_slice(),
    children = body.children.to_slice(),
    returns = id,
  }
}

| TODO: Refactor so that most functions don't need an explicit type but rather
| figure out the type themselves?

fun push_int(body: &YogurtBodyBuilder, value: Int): Id {
  body.push(YogurtOp.int(value), YogurtType.int)
}
fun push_string(body: &YogurtBodyBuilder, value: String): Id {
  body.push(YogurtOp.string(value), type_string.compile())
}
fun push_array(
  body: &YogurtBodyBuilder, items: Slice[Id], type: YogurtType
): Id {
  body.push(YogurtOp.array(items), type)
}
fun push_struct(
  body: &YogurtBodyBuilder, fields: Map[String, Id], type: YogurtType
): Id {
  body.push(YogurtOp.struct_(fields), type)
}
fun push_member(
  body: &YogurtBodyBuilder, of: Id, name: String, type: YogurtType
): Id {
  body.push(YogurtOp.member(YogurtMember { of, name }), type)
}
fun push_enum(
  body: &YogurtBodyBuilder, name: String, value: Id, type: YogurtType
): Id {
  body.push(YogurtOp.enum_(YogurtEnum { name, value }), type)
}
fun push_switch(
  body: &YogurtBodyBuilder, condition: Id, cases: Map[String, YogurtBody],
  type: YogurtType,
): Id {
  body.push(YogurtOp.switch_(YogurtSwitch { condition, cases }), type)
}
fun push_closure(body: &YogurtBodyBuilder, value: Id, type: YogurtType): Id {
  body.push(YogurtOp.closure(value), type)
}
fun push_get_closure(
  body: &YogurtBodyBuilder, value: Id, type: YogurtType
): Id {
  body.push(YogurtOp.get_closure(value), type)
}
fun push_lambda(
  body: &YogurtBodyBuilder, function: String, closure: Id, type: YogurtType
): Id {
  body.push(YogurtOp.lambda(YogurtLambda { function, closure }), type)
}
fun push_call(
  body: &YogurtBodyBuilder, callee: YogurtCallee, args: Slice[Id],
  type: YogurtType,
): Id {
  body.push(YogurtOp.call(YogurtCall { callee, args }),type)
}
fun push_call_lambda(
  body: &YogurtBodyBuilder, lambda: Id, args: Slice[Id], type: YogurtType
): Id {
  body.push_call(YogurtCallee.lambda(lambda), args, type)
}
fun push_call_fun(
  body: &YogurtBodyBuilder, fun_: String, args: Slice[Id], type: YogurtType
): Id {
  body.push_call(YogurtCallee.fun_(fun_), args, type)
}
fun push_call_builtin(
  body: &YogurtBodyBuilder, builtin: YogurtBuiltin, args: Slice[Id],
  type: YogurtType,
): Id {
  body.push_call(YogurtCallee.builtin(builtin), args, type)
}
fun push_type(body: &YogurtBodyBuilder, type: YogurtType): Id {
  body.push(YogurtOp.type(type), YogurtType.type)
}

fun push_nothing(body: &YogurtBodyBuilder): Id {
  body.push_struct(map[String, Id](), type_nothing.compile())
}
fun push_type_info(body: &YogurtBodyBuilder, type: YogurtType): Id {
  | todo("type info")
  switch type
  case byte
    body.push_enum("byte", body.push_nothing(), type_type_info.compile())
  case int body.push_enum("int", body.push_nothing(), type_type_info.compile())
  case type
    body.push_enum("type", body.push_nothing(), type_type_info.compile())
  case array(item_type)
    body.push_enum(
      "array", body.push_type_info(item_type.*), type_type_info.compile()
    )
  case never
    body.push_enum("never", body.push_nothing(), type_type_info.compile())
  case struct_(struct_)
    body.push_enum("struct", {
      var type_field = type_struct(map(
        "name" -> type_string, "type" -> type_type_info
      ))
      var fields = list[Id]()
      for field in struct_ do
        fields.&.push(body.push_struct(
          map(
            "name" -> body.push_string(field.key),
            "type" -> body.push_type_info(field.value),
          ),
          type_field.compile(),
        ))
      body.push_array(fields.to_slice(), type_array(type_field).compile())
    }, type_type_info.compile())
  case enum_(enum_)
    body.push_enum("enum", {
      var type_variant = type_struct(map(
        "name" -> type_string, "type" -> type_type_info
      ))
      var variants = list[Id]()
      for variant in enum_ do
        variants.&.push(body.push_struct(
          map(
            "name" -> body.push_string(variant.key),
            "type" -> body.push_type_info(variant.value),
          ),
          type_variant.compile(),
        ))
      body.push_array(variants.to_slice(), type_array(type_variant).compile())
    }, type_type_info.compile())
  case closure unreachable()
  case lambda(lambda)
    body.push_enum(
      "lambda",
      body.push_struct(
        map(
          "arguments" -> {
            var args = list[Id]()
            for arg in lambda.args do body.&.push_type_info(arg)
            body.push_array(
              args.to_slice(), type_array(type_type_info).compile()
            )
          },
          "return_type" -> body.push_type_info(lambda.return_type.*),
        ),
        type_struct(map(
          "arguments" -> type_array(type_type_info),
          "return_type" -> type_type_info,
        )).compile(),
      ),
      type_type_info.compile(),
    )
  case recursive(level)
    body.push_enum("recursive", body.push_int(level), type_type_info.compile())
}
