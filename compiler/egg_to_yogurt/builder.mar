import mod.mar

struct YogurtBodyBuilder {
  dag: &Dag[YogurtExpr], params: List[Id], children: List[Id]
}

fun body_builder(dag: &Dag[YogurtExpr]): _ {
  YogurtBodyBuilder { dag, params = list[Id](), children = list[Id]() }
}
fun param(body: &YogurtBodyBuilder, type: EggType): Id {
  var id = body.dag.&.put(YogurtExpr { op = YogurtOp.param, type })
  body.params.&.push(id)
  id
}
fun push(body: &YogurtBodyBuilder, op: YogurtOp, type: EggType): Id {
  var id = body.dag.&.put(YogurtExpr { op, type })
  body.children.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: Id): YogurtExpr { body.dag.get(id) }
fun type_of(body: YogurtBodyBuilder, id: Id): EggType {
  body.dag.type_of(id)
}
fun finish(body: YogurtBodyBuilder, id: Id): YogurtBody {
  YogurtBody {
    params = body.params.to_slice(),
    children = body.children.to_slice(),
    returns = id,
  }
}

fun byte(body: &YogurtBodyBuilder, value: Byte): Id {
  body.push(YogurtOp.byte(value), type_byte)
}
fun int(body: &YogurtBodyBuilder, value: Int): Id {
  body.push(YogurtOp.int(value), type_int)
}
fun string(body: &YogurtBodyBuilder, value: String): Id {
  body.push(YogurtOp.string(value), type_string)
}
fun array(body: &YogurtBodyBuilder, type: EggType, items: Slice[Id]): Id {
  body.push(YogurtOp.array(items), type)
}
fun struct_(body: &YogurtBodyBuilder, fields: Map[String, Id]): Id {
  var field_types = map[String, EggType]()
  for field in fields do field_types.&.put(field.key, body.type_of(field.value))
  body.push(YogurtOp.struct_(fields), type_struct(field_types))
}
fun member(body: &YogurtBodyBuilder, of: Id, name: String): Id {
  var type = body.type_of(of).kind().struct_.unwrap().get(name)
  body.push(YogurtOp.member(YogurtMember { of, name }), type)
}
fun enum_(
  body: &YogurtBodyBuilder, type: EggType, name: String, value: Id
): Id {
  body.push(YogurtOp.enum_(YogurtEnum { name, value }), type)
}
fun switch_(
  body: &YogurtBodyBuilder, condition: Id, type: EggType,
  cases: Map[String, YogurtBody],
): Id {
  body.push(YogurtOp.switch_(YogurtSwitch { condition, cases }), type)
}
fun lambda(
  body: &YogurtBodyBuilder, type: EggType, function: String, closure: Id
): Id {
  body.push(YogurtOp.lambda(YogurtLambda { function, closure }), type)
}
fun call(
  body: &YogurtBodyBuilder, callee: YogurtCallee, args: Slice[Id],
  return_type: EggType,
): Id {
  body.push(YogurtOp.call(YogurtCall { callee, args }), return_type)
}
fun call_lambda(
  body: &YogurtBodyBuilder, lambda: Id, args: Slice[Id], return_type: EggType
): Id {
  body.call(YogurtCallee.lambda(lambda), args, return_type)
}
fun call_fun(
  body: &YogurtBodyBuilder, fun_: String, args: Slice[Id], return_type: EggType
): Id {
  body.call(YogurtCallee.fun_(fun_), args, return_type)
}
fun call_builtin(
  body: &YogurtBodyBuilder, builtin: YogurtBuiltin, args: Slice[Id],
  return_type: EggType,
): Id {
  body.call(YogurtCallee.builtin(builtin), args, return_type)
}
fun add_ints(body: &YogurtBodyBuilder, a: Id, b: Id): Id {
  body.call_builtin(YogurtBuiltin.add_ints, list(a, b).to_slice(), type_int)
}
fun array_get(body: &YogurtBodyBuilder, array: Id, index: Id): Id {
  body.call_builtin(
    YogurtBuiltin.array_get,
    list(array, index).to_slice(),
    body.type_of(array).kind().array.unwrap(),
  )
}
fun array_len(body: &YogurtBodyBuilder, array: Id): Id {
  body.call_builtin(YogurtBuiltin.array_len, list(array).to_slice(), type_int)
}
fun box(body: &YogurtBodyBuilder, inner: Id): Id {
  body.call_builtin(
    YogurtBuiltin.box, list(inner).to_slice(), type_box(body.type_of(inner))
  )
}
fun unbox(body: &YogurtBodyBuilder, inner: Id): Id {
  body.call_builtin(
    YogurtBuiltin.unbox,
    list(inner).to_slice(),
    body.type_of(inner).kind().box.unwrap(),
  )
}
fun byte_to_int(body: &YogurtBodyBuilder, byte: Id): Id {
  body.call_builtin(YogurtBuiltin.byte_to_int, list(byte).to_slice(), type_int)
}
fun generate_array(body: &YogurtBodyBuilder, length: Id, generator: Id): Id {
  body.call_builtin(
    YogurtBuiltin.generate_array,
    list(length, generator).to_slice(),
    type_array(body.type_of(generator).kind().lambda.unwrap().return_type),
  )
}
fun compare_ints(body: &YogurtBodyBuilder, a: Id, b: Id): Id {
  body.call_builtin(
    YogurtBuiltin.compare_ints, list(a, b).to_slice(), type_ordering
  )
}
fun crash(body: &YogurtBodyBuilder, message: Id, type: EggType): Id {
  body.call_builtin(YogurtBuiltin.crash, list(message).to_slice(), type)
}
fun crash(body: &YogurtBodyBuilder, message: String, type: EggType): Id {
  body.crash(body.string(message), type)
}
fun unreachable(body: &YogurtBodyBuilder, type: EggType): Id {
  body.crash("unreachable", type)
}
fun type(body: &YogurtBodyBuilder, type: EggType): Id {
  body.push(YogurtOp.type(type), type_type)
}
fun nothing(body: &YogurtBodyBuilder): Id { body.struct_(map[String, Id]()) }
