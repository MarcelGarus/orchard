import mod.mar

struct YogurtBodyBuilder {
  dag: &Dag[YogurtExpr], params: List[Id], children: List[Id]
}

fun body_builder(dag: &Dag[YogurtExpr]): _ {
  YogurtBodyBuilder { dag, params = list[Id](), children = list[Id]() }
}
fun param(body: &YogurtBodyBuilder, type: YogurtType): Id {
  var id = body.dag.&.put(YogurtExpr { op = YogurtOp.param, type })
  body.params.&.push(id)
  id
}
fun push(body: &YogurtBodyBuilder, op: YogurtOp, type: YogurtType): Id {
  var id = body.dag.&.put(YogurtExpr { op, type })
  body.children.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: Id): YogurtExpr { body.dag.get(id) }
fun type_of(body: YogurtBodyBuilder, id: Id): YogurtType {
  body.dag.type_of(id)
}
fun finish(body: YogurtBodyBuilder, id: Id): YogurtBody {
  YogurtBody {
    params = body.params.to_slice(),
    children = body.children.to_slice(),
    returns = id,
  }
}

fun int(body: &YogurtBodyBuilder, value: Int): Id {
  body.push(YogurtOp.int(value), YogurtType.int)
}
fun string(body: &YogurtBodyBuilder, value: String): Id {
  body.push(YogurtOp.string(value), type_string.compile())
}
fun array(body: &YogurtBodyBuilder, type: YogurtType, items: Slice[Id]): Id {
  body.push(YogurtOp.array(items), type)
}
fun struct_(
  body: &YogurtBodyBuilder, type: YogurtType, fields: Map[String, Id]
): Id {
  body.push(YogurtOp.struct_(fields), type)
}
fun member(
  body: &YogurtBodyBuilder, of: Id, name: String, type: YogurtType
): Id {
  body.push(YogurtOp.member(YogurtMember { of, name }), type)
}
fun enum_(
  body: &YogurtBodyBuilder, type: YogurtType, name: String, value: Id
): Id {
  body.push(YogurtOp.enum_(YogurtEnum { name, value }), type)
}
fun switch_(
  body: &YogurtBodyBuilder, condition: Id, type: YogurtType,
  cases: Map[String, YogurtBody],
): Id {
  body.push(YogurtOp.switch_(YogurtSwitch { condition, cases }), type)
}
fun closure(body: &YogurtBodyBuilder, value: Id): Id {
  body.push(
    YogurtOp.closure(value),
    YogurtType.closure(body.type_of(value).put_on_heap()),
  )
}
fun get_closure(body: &YogurtBodyBuilder, value: Id, type: YogurtType): Id {
  body.push(YogurtOp.get_closure(value), type)
}
fun lambda(
  body: &YogurtBodyBuilder, type: YogurtType, function: String, closure: Id
): Id {
  body.push(YogurtOp.lambda(YogurtLambda { function, closure }), type)
}
fun call(
  body: &YogurtBodyBuilder, callee: YogurtCallee, args: Slice[Id],
  type: YogurtType,
): Id {
  body.push(YogurtOp.call(YogurtCall { callee, args }),type)
}
fun call_lambda(
  body: &YogurtBodyBuilder, lambda: Id, args: Slice[Id], type: YogurtType
): Id {
  body.call(YogurtCallee.lambda(lambda), args, type)
}
fun call_fun(
  body: &YogurtBodyBuilder, fun_: String, args: Slice[Id], type: YogurtType
): Id {
  body.call(YogurtCallee.fun_(fun_), args, type)
}
fun call_builtin(
  body: &YogurtBodyBuilder, builtin: YogurtBuiltin, args: Slice[Id],
  type: YogurtType,
): Id {
  body.call(YogurtCallee.builtin(builtin), args, type)
}
fun add_ints(body: &YogurtBodyBuilder, a: Id, b: Id): Id {
  body.call_builtin(
    YogurtBuiltin.add_ints, list(a, b).to_slice(), YogurtType.int
  )
}
fun array_get(
  body: &YogurtBodyBuilder, array: Id, index: Id, type: YogurtType
): Id {
  body.call_builtin(
    YogurtBuiltin.array_get, list(array, index).to_slice(), type
  )
}
fun array_len(body: &YogurtBodyBuilder, array: Id): Id {
  body.call_builtin(
    YogurtBuiltin.array_len, list(array).to_slice(), YogurtType.int
  )
}
fun byte_to_int(body: &YogurtBodyBuilder, byte: Id): Id {
  body.call_builtin(
    YogurtBuiltin.byte_to_int, list(byte).to_slice(), YogurtType.int
  )
}
fun generate_array(
  body: &YogurtBodyBuilder, length: Id, generator: Id, type: YogurtType
): Id {
  body.call_builtin(
    YogurtBuiltin.generate_array, list(length, generator).to_slice(), type
  )
}
fun compare_ints(body: &YogurtBodyBuilder, a: Id, b: Id): Id {
  body.call_builtin(
    YogurtBuiltin.compare_ints, list(a, b).to_slice(), type_ordering.compile()
  )
}
fun crash(body: &YogurtBodyBuilder, message: Id, type: YogurtType): Id {
  body.call_builtin(YogurtBuiltin.crash, list(message).to_slice(), type)
}
fun crash(body: &YogurtBodyBuilder, message: String, type: YogurtType): Id {
  body.crash(body.string(message), type)
}
fun unreachable(body: &YogurtBodyBuilder, type: YogurtType): Id {
  body.crash("unreachable", type)
}
fun type(body: &YogurtBodyBuilder, type: YogurtType): Id {
  body.push(YogurtOp.type(type), YogurtType.type)
}
fun nothing(body: &YogurtBodyBuilder): Id {
  body.struct_(type_nothing.compile(), map[String, Id]())
}
