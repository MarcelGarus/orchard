| Convert Egg to Yogurt  

import ../plum.mar
import dynamic.mar
import builder.mar
import cast.mar
import context.mar

fun to_yogurt(egg: Egg, entry_signature: String): Result[Yogurt, Error] {
  var main = egg.funs.get_maybe(entry_signature) or
    return error[Yogurt, Error](error(
      "Entry point {entry_signature.debug()} doesn't exist.", invalid_src
    ))
  var yogurt = yogurt(entry_signature)
  main.compile(
    entry_signature,
    Substitutions { substitutions = map[String, EggType]() },
    YogurtContext { stack = list[YogurtStackEntry]().&, egg, yogurt = yogurt.& }.&,
  )?
  ok[Yogurt, Error](yogurt)
}

fun compile(
  fun_: EggFun, signature: String,
  substitutions: Substitutions, context: &YogurtContext,
): Result[String, Error] {
  var signature = {
    var b = string_builder().&
    b."{signature}"
    if substitutions.substitutions.size > 0 then {
      b." with"
      var first = true
      for substitution in substitutions.substitutions do {
        if first then first = false else b.","
        b." {substitution.key} = {substitution.value}"
      }
    }
    b.to_string()
  }

  if context.is_defined(signature) or context.is_currently_compiling(signature)
  then
    return ok[String, Error](signature)
  context.start_compiling(signature)

  var mapping = map[Id, Id]() | Egg Id to Yogurt Id
  var dag = dag[YogurtExpr]()
  var body = fun_.body
    .compile(mapping.&, dag.&, fun_.dag, substitutions, context)?
  var fun_ = YogurtFun { dag, body }

  context.define(signature, fun_)
  context.done_compiling()
  ok[String, Error](signature)
}

fun compile(type: EggType): YogurtType {
  switch type
  case var_(name) panic("compiling type that still contains variable {name}")
  case primitive(primitive) {
    var name = primitive.name
    if name == "Byte" then return YogurtType.byte
    if name == "Int" then return YogurtType.int
    if name == "Type" then return YogurtType.type
    if name == "Array" then
      return YogurtType.array(primitive.args.get(0).compile().put_on_heap())
    panic("Unknown primitive type {name}")
  }
  case never YogurtType.never
  case struct_(struct_) {
    var fields = map[String, YogurtType]()
    for field in struct_ do fields.&.put(field.key, field.value.compile())

    YogurtType.struct_(fields)
  }
  case enum_(enum_) {
    var variants = map[String, YogurtType]()
    for variant in enum_ do variants.&.put(variant.key, variant.value.compile())

    YogurtType.enum_(variants)
  }
  case lambda(lambda) {
    var args = list[YogurtType]()
    for arg in lambda.args do args.&.push(arg.compile())
    var args = args.to_slice()

    var return_type = lambda.return_type.compile()

    YogurtType.lambda(YogurtLambdaType {
      args, return_type = return_type.put_on_heap()
    })
  }
  case recursive(level) YogurtType.recursive(level)
}

| Assumes that mappings for the parameters exist.
fun compile(
  egg_body: EggBody,
  mapping: &Map[Id, Id], dag: &Dag[YogurtExpr],
  egg_dag: Dag[EggExpr], substitutions: Substitutions, context: &YogurtContext
): Result[YogurtBody, Error] {
  var body = body_builder(dag).&
  for egg_id in egg_body.params do {
    var yogurt_id = body.push_param(
      egg_dag.type_of(egg_id).specialize(substitutions).compile()
    )
    mapping.put(egg_id, yogurt_id)
  }
  for egg_id in egg_body.children do {
    var yogurt_id = egg_dag.get(egg_id)
      .compile(mapping, body, egg_dag, substitutions, context)?
    mapping.put(egg_id, yogurt_id)
  }
  var body = body.finish(mapping.get(egg_body.returns))
  ok[YogurtBody, Error](body)
}
fun compile(
  expr: EggExpr,
  mapping: &Map[Id, Id], body: &YogurtBodyBuilder,
  egg_dag: Dag[EggExpr], substitutions: Substitutions, context: &YogurtContext,
): Result[Id, Error] {
  var type = expr.type.specialize(substitutions).compile()
  ok[Id, Error](
    switch expr.op
    case param unreachable()
    case int(int) body.push_int(int)
    case string(string) body.push_string(string)
    case struct_(struct_) {
      var fields = map[String, Id]()
      for field in struct_ do fields.&.put(field.key, mapping.get(field.value))
      body.push_struct(fields, type)
    }
    case member(member)
      body.push_member(mapping.get(member.of), member.name, type)
    case enum_(enum_)
      body.push_enum(enum_.name, mapping.get(enum_.value), type)
    case switch_(switch_) {
      var cases = map[String, YogurtBody]()
      for case_ in switch_.cases do
        cases.&.put(
          case_.key,
          case_.value
            .compile(mapping, body.dag, egg_dag, substitutions, context)?,
        )
      body.push_switch(mapping.get(switch_.condition), cases, type)
    }
    case lambda(lambda) {
      | Lambdas get compiled into stand-alone functions that explicitly receive
      | a "closure" parameter, which is a pointer to a struct containing all
      | captured expressions from the outer scope. That struct is guaranteed to
      | live on the heap.

      var captured = expr.captured_variables(egg_dag)

      | Create the closure in the current scope.
      var fields = map[String, Id]()
      var field_types = map[String, YogurtType]()
      for entry in captured.iter().enumerate() do {
        var mapped = mapping.get(entry.item)
        fields.&.put("{entry.index}", mapped)
        field_types.&.put("{entry.index}", body.type_of(mapped))
      }
      var struct_type = YogurtType.struct_(field_types)
      var struct_ = body.push_struct(fields, struct_type)
      var closure_type = YogurtType.closure(struct_type.put_on_heap())
      var closure = body.push_closure(struct_, closure_type)

      | Compile the lambda into a function.
      var lambda_mapping = map[Id, Id]().&
      var lambda_dag = dag[YogurtExpr]().&
      var lambda_body = body_builder(lambda_dag).&

      for egg_id in lambda.params do {
        var type = egg_dag.type_of(egg_id).specialize(substitutions).compile()
        var yogurt_id = lambda_body.push_param(type)
        lambda_mapping.put(egg_id, yogurt_id)
      }
      var inner_closure = lambda_body.push_param(closure_type)
      var inner_captured = lambda_body.push_get_closure(
        inner_closure, struct_type
      )
      for entry in captured.iter().enumerate() do {
        var type = body.type_of(mapping.get(entry.item))
        var inner_id = lambda_body.push_member(
          inner_captured, "{entry.index}", type
        )
        lambda_mapping.&.put(entry.item, inner_id)
      }

      for egg_id in lambda.children do {
        var yogurt_id = egg_dag.get(egg_id).compile(
          lambda_mapping, lambda_body, egg_dag, substitutions, context
        )?
        lambda_mapping.put(egg_id, yogurt_id)
      }
      var lambda_body = lambda_body.finish(lambda_mapping.get(lambda.returns))

      var signature = "lambda at {expr.src}"
      if substitutions.substitutions.size > 0 then
        signature = "{signature} with {substitutions}"

      context.define(signature, YogurtFun {
        dag = lambda_dag.*, body = lambda_body
      })

      body.push_lambda(signature, closure, type)
    }
    case call(call) {
      var args = list[Id]()
      for arg in call.args do args.&.push(mapping.get(arg))
      var args = args.to_slice()

      switch call.callee
      case lambda(lambda) body.push_call_lambda(mapping.get(lambda), args, type)
      case fun_(matching_fun) {
        var signature = matching_fun.signature
        var merged_substitutions =
          matching_fun.substitutions.specialize(substitutions)
        var fun_ = context.egg.funs.get(signature)
        var signature = compile(fun_, signature, merged_substitutions, context)?
        body.push_call_fun(signature, args, type)
      }
      case builtin(matching_builtin) {
        var merged_substitutions =
          matching_builtin.substitutions.specialize(substitutions)
        var yogurt_builtin =
          switch matching_builtin.builtin
          case lower_byte YogurtBuiltin.lower_byte
          case byte_to_int YogurtBuiltin.byte_to_int
          case add_ints YogurtBuiltin.add_ints
          case sub_ints YogurtBuiltin.sub_ints
          case mul_ints YogurtBuiltin.mul_ints
          case div_ints YogurtBuiltin.div_ints
          case mod_ints YogurtBuiltin.mod_ints
          case and_ints YogurtBuiltin.and_ints
          case or_ints YogurtBuiltin.or_ints
          case xor_ints YogurtBuiltin.xor_ints
          case compare_ints YogurtBuiltin.compare_ints
          case generate_array YogurtBuiltin.generate_array
          case array_get YogurtBuiltin.array_get
          case array_set YogurtBuiltin.array_set
          case array_slice YogurtBuiltin.array_slice
          case array_len YogurtBuiltin.array_len
          case call
            return ok[Id, Error](body.push_call_lambda(
              args.get(0), empty_slice[Id](), type
            ))
          case crash YogurtBuiltin.crash
          case type_of
            return ok[Id, Error](body.push_type(body.type_of(call.args.get(0))))
          case type_info {
            var type =
              matching_builtin.substitutions.substitutions.get("arg_0")
                .specialize(substitutions).compile()
            return ok[Id, Error](body.push_type_info(type))
          }
          case static_to_dynamic {
            | TODO: make more beautiful after figuring out how type
            | substitutions propagate through imports
            var type = body.type_of(call.args.get(0)).assert_no_closure()
            return ok[Id, Error](body.push_call_fun(
              compile_static_to_dynamic_fun(type, context),
              list(call.args.get(0)).to_slice(),
              type_dynamic.compile(),
            ))
          }
          case dynamic_to_static todo("dynamic_to_static")

        body.push_call_builtin(yogurt_builtin, args, type)
      }
    }
    case cast(id)
      body.push_cast(
        mapping.get(id),
        egg_dag.type_of(id).specialize(substitutions),
        expr.type.specialize(substitutions),
        context,
      )
    case type(type_value)
      body.push_type(
        type_value.specialize(substitutions).canonicalize().compile()
      )
  )
}

fun captured_variables(expr: EggExpr, dag: Dag[EggExpr]): Slice[Id] {
  var ignore = set[Id]()
  var captured = list[Id]()
  expr.collect_captured(ignore.&, captured.&, dag)
  captured.to_slice()
}
fun collect_captured(id: Id, ignore: &Set[Id], captured: &List[Id]) {
  if not(ignore.contains(id)) then {
    captured.push(id)
    ignore.put(id)
  }
}
fun collect_captured(
  body: EggBody, ignore: &Set[Id], captured: &List[Id], dag: Dag[EggExpr]
) {
  for param in body.params do ignore.put(param)
  for child in body.children do {
    dag.get(child).collect_captured(ignore, captured, dag)
    ignore.put(child)
  }
  body.returns.collect_captured(ignore, captured)
}
fun collect_captured(
  expr: EggExpr, ignore: &Set[Id], captured: &List[Id], dag: Dag[EggExpr]
) {
  switch expr.op
  case param unreachable()
  case int {}
  case string {}
  case struct_(struct_)
    for field in struct_ do field.value.collect_captured(ignore, captured)
  case member(member) member.of.collect_captured(ignore, captured)
  case enum_(enum_) enum_.value.collect_captured(ignore, captured)
  case switch_(switch_) {
    switch_.condition.collect_captured(ignore, captured)
    for case_ in switch_.cases do
      case_.value.collect_captured(ignore, captured, dag)
  }
  case lambda(lambda) lambda.collect_captured(ignore, captured, dag)
  case call(call) {
    for arg in call.args do arg.collect_captured(ignore, captured)
    switch call.callee
    case lambda(lambda) lambda.collect_captured(ignore, captured)
    case fun_ {}
    case builtin {}
  }
  case cast(other) other.collect_captured(ignore, captured)
  case type {}
}
