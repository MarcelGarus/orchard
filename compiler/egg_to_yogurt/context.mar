| Context  
|
| When compiling to Yogurt, we specialize generic functions for concrete types
| (aka monomorphization). The context contains useful data structures for that.

import mod.mar

struct YogurtGlobalContext {
  | The stack is the stack of the context itself, containing the signatures of
  | functions being currently monomorphized.
  stack: &List[String],
  egg: Egg,
  yogurt: &Yogurt,
}

struct OngoingCompilation { context: &YogurtGlobalContext, signature: String }

fun start_compiling(
  context: &YogurtGlobalContext, signature: String
): Result[OngoingCompilation, String] {
  var is_defined = context.yogurt.funs.contains(signature)
  var is_currently_compiling = context.stack.iter().&.contains(signature)

  if is_defined or is_currently_compiling
  then error[OngoingCompilation, String](signature)
  else {
    context.stack.&.push(signature)
    | context.print_status()
    ok[OngoingCompilation, String](OngoingCompilation { context, signature })
  }
}
fun done(compilation: OngoingCompilation, fun_: YogurtFun): String {
  var signature = compilation.context.stack.&.pop()
  if signature != compilation.signature then
    panic("wasn't compiling {signature.debug()}")

  | context.print_status()
  compilation.context.define(signature, fun_)
  signature
}

fun define(
  context: &YogurtGlobalContext, signature: String, fun_: YogurtFun
): String {
  context.yogurt.funs.&.put(signature, fun_)
  signature
}

fun get(context: YogurtGlobalContext, signature: String): YogurtFun {
  context.yogurt.funs.get(signature)
}
