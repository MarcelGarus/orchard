import mod.mar

fun push_cast(
  body: &YogurtBodyBuilder, from: Id,
  from_type: EggType, to_type: EggType,
  context: &YogurtContext,
): Id {
  if from_type == to_type then return from
  var cast_fun = compile_cast_fun(from_type, to_type, context)
  body.push_call_fun(cast_fun, list(from).to_slice(), to_type.compile())
}

fun compile_cast_fun(
  from: EggType, to: EggType, context: &YogurtContext
): String {
  var signature = "cast {from} to {to}"

  if context.is_defined(signature) or context.is_currently_compiling(signature)
  then return signature
  context.start_compiling(signature)

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&

  var param = body.push_param(from.compile())
  var returns = compile_cast_fun_body(from, to, body, param, context)
  var fun_ = YogurtFun { dag = dag.*, body = body.finish(returns) }

  context.define(signature, fun_)
  context.done_compiling()
  signature
}
fun compile_cast_fun_body(
  from_type: EggType, to_type: EggType,
  body: &YogurtBodyBuilder, from: Id, context: &YogurtContext
): Id {
  if from_type is never then {
    var message = body.push_string("")
    return body.push_call_builtin(
      YogurtBuiltin.crash, list(message).to_slice(), to_type.compile()
    )
  }
  if from_type == to_type then return from | This cast the identity fun!

  switch to_type.extend_one_level()
  case primitive(to_primitive) {
    var from_primitive = from_type.primitive.unwrap()

    if to_primitive.name == "Array" then {
      var from_item_type = from_primitive.args.get(0)
      var to_item_type   = to_primitive.args.get(0)
      | eprintln("compiling (Array {from_item_type}) to (Array {to_item_type})")

      var length = body.push_call_builtin(
        YogurtBuiltin.array_len, list(from).to_slice(), type_int.compile()
      )

      | Create a closure.
      var closure_type = YogurtType.closure(from_type.compile().put_on_heap())
      var closure = body.push_closure(from, closure_type)

      | Compile a lambda for getting a cast argument at a given index.
      var lambda_dag = dag[YogurtExpr]().&
      var lambda_body = body_builder(lambda_dag).&

      | The "array" is captured.
      var index = lambda_body.push_param(type_int.compile()) | index: Int
      var inner_closure = lambda_body.push_param(closure_type)
      var from_array = lambda_body.push_get_closure(
        inner_closure, from_type.compile()
      )
      var from_item = lambda_body.push_call_builtin(
        YogurtBuiltin.array_get,
        list(from_array, index).to_slice(),
        from_item_type.compile(),
      )
      var to_item = lambda_body.push_cast(
        from_item,
        from_item_type,
        to_item_type.canonicalize(),
        context,
      )

      var signature = "get cast item from {from_type} to {to_type}"
      context.define(signature, YogurtFun {
        dag = lambda_dag.*, body = lambda_body.finish(to_item)
      })
      var lambda = body.push_lambda(
        signature,
        closure,
        type_lambda(list(type_int).to_slice(), to_item_type).compile(),
      )

      body.push_call_builtin(
        YogurtBuiltin.generate_array,
        list(length, lambda).to_slice(),
        to_type.compile(),
      )
    } else {
      panic("casting {from_type} to {to_type} is not supported")
    }
  }
  case struct_(to_field_types) {
    var to_fields = map[String, Id]()
    for entry in from_type.extend_one_level().struct_.unwrap() do {
      var name = entry.key
      var from_type = entry.value
      var to_type = to_field_types.get(name).canonicalize()

      var from = body.push_member(from, name, from_type.compile())
      var to = body.push_cast(from, from_type, to_type, context)

      to_fields.&.put(name, to)
    }
    body.push_struct(to_fields, to_type.compile())
  }
  case enum_(to_variant_types) {
    var cases = map[String, YogurtBody]()
    for entry in from_type.extend_one_level().enum_.unwrap() do {
      var name = entry.key
      var from_value_type = entry.value
      var to_value_type = to_variant_types.get(name).canonicalize()
      var case_body = body_builder(body.dag).&
      var from_value = case_body.push_param(from_value_type.compile())
      var to_value = case_body.push_cast(
        from_value, from_value_type, to_value_type, context
      )
      var to = case_body.&.push_enum(name, to_value, to_type.compile())
      cases.&.put(name, case_body.finish(to))
    }
    body.push_switch(from, cases, to_type.compile())
  }
  case lambda(to_lambda_type) {
    var from_lambda_type = from_type.lambda.unwrap()

    | Create a closure.
    var closure_type = YogurtType.closure(from_type.compile().put_on_heap())
    var closure = body.push_closure(from, closure_type)

    | Compile the casting lambda into a function.
    var lambda_dag = dag[YogurtExpr]().&
    var lambda_body = body_builder(lambda_dag).&

    | The "from lambda" is captured.
    var params = list[Id]()
    for param_type in to_lambda_type.args do
      params.&.push(lambda_body.push_param(param_type.compile()))
    var inner_closure = lambda_body.push_param(closure_type)
    var from_lambda = lambda_body.push_get_closure(
      inner_closure, from_type.compile()
    )
    var cast_params = list[Id]()
    for param in params.iter().enumerate() do
      cast_params.&.push(lambda_body.push_cast(
        param.item,
        to_lambda_type.args.get(param.index).canonicalize(),
        from_lambda_type.args.get(param.index),
        context,
      ))
    var from_return = lambda_body.push_call_lambda(
      from_lambda,
      cast_params.to_slice(),
      from_lambda_type.return_type.compile()
    )

    var to_return = lambda_body.push_cast(
      from_return,
      from_lambda_type.return_type.*,
      to_lambda_type.return_type.canonicalize(),
      context,
    )

    var signature = "lambda cast {from_type} to {to_type}"
    context.define(signature, YogurtFun {
      dag = lambda_dag.*, body = lambda_body.finish(to_return)
    })

    body.push_lambda(signature, closure, to_type.compile())
  }
  default panic("casting {from_type} to {to_type} is not supported")
}
