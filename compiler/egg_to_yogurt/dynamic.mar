import mod.mar

fun static_to_dynamic(
  body: &YogurtBodyBuilder, value: Id, type: EggType, context: &YogurtContext
): Id {
  var fun_ = compile_static_to_dynamic_fun(type, context)
  body.call_fun(fun_, list(value).to_slice(), type_dynamic)
}
fun compile_static_to_dynamic_fun(
  type: EggType, context: &YogurtContext
): String {
  var compilation = context.start_compiling("{type} to dynamic")
    or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&

  var param = body.param(type)
  var returns = compile_static_to_dynamic_fun_body(type, body, param, context)

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(returns) })
}
fun compile_static_to_dynamic_fun_body(
  type: EggType, body: &YogurtBodyBuilder, value: Id, context: &YogurtContext
): Id {
  switch type.kind()
  case variable panic("type var in compile to dynamic")
  case byte body.enum_(type_dynamic, "byte", value)
  case int body.enum_(type_dynamic, "int", value)
  case never body.unreachable(type_dynamic)
  case type body.enum_(type_dynamic, "type", body.nothing())
  case box(inner)
    body.enum_(type_dynamic, "box", {
      body.static_to_dynamic(body.unbox(value), inner, context)
    })
  case array(item)
    body.enum_(type_dynamic, "array", {
      body.generate_array(
        body.array_len(value),
        body.lambda(
          type_lambda(list(type_int).to_slice(), type_dynamic),
          compile_array_items_to_dynamic_fun(item, context),
          body.box(value),
        ),
      )
    })
  case struct_(field_types)
    body.enum_(type_dynamic, "struct", {
      var dynamic_fields = list[Id]()
      for field in field_types do {
        var name = field.key
        var field_type = field.value
        dynamic_fields.&.push(body.struct_(map(
          "name" -> body.string(name),
          "value" -> body.static_to_dynamic(
            body.member(value, name), field_type, context
          ),
        )))
      }
      body.array(type_dynamic_fields, dynamic_fields.to_slice())
    })
  case enum_(variant_types)
    body.enum_(type_dynamic, "enum", {
      body.switch_(value, type_dynamic_variant, {
        var cases = map[String, YogurtBody]()
        for variant in variant_types do {
          var name = variant.key
          var variant_type = variant.value

          var body = body_builder(body.dag).&
          var payload_value = body.param(variant_type)

          var name_and_value = body.struct_(map(
            "name" -> body.string(name),
            "value" -> body.static_to_dynamic(
              payload_value, variant_type, context
            ),
          ))
          cases.&.put(name, body.finish(name_and_value))
        }
        cases
      })
    })
  case lambda
    body.enum_(type_dynamic, "lambda", {
      body.lambda(
        type_lambda(list(type_array(type_dynamic)).to_slice(), type_dynamic),
        compile_dynamic_lambda_wrapper_fun(type, context),
        body.box(value),
      )
    })
}
fun compile_array_items_to_dynamic_fun(
  item_type: EggType, context: &YogurtContext
): String {
  var compilation =
    context.start_compiling("converting array item of {item_type} to dynamic")
      or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&
  var index = body.param(type_int)
  var closure = body.param(type_box(type_array(item_type)))

  var array = body.unbox(closure)
  var item = body.array_get(array, index)
  var converted = body.static_to_dynamic(item, item_type, context)

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(converted) })
}
| dynamic wrapper for a static lambda
fun compile_dynamic_lambda_wrapper_fun(
  type: EggType, context: &YogurtContext
): String {
  var compilation =
    context.start_compiling("dynamic wrapper for a static lambda of {type}")
      or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&
  var args = body.param(type_array(type_dynamic))
  var closure = body.param(type_box(type))

  var lambda_type = type.kind().lambda.unwrap()

  | Make sure the number of arguments is correct.
  body.switch_(
    body.compare_ints(body.array_len(args), body.int(lambda_type.args.len)),
    type_nothing,
    map(
      "less" -> {
        var body = body_builder(body.dag).&
        var payload = body.param(type_nothing)
        body.finish(body.crash("Wrong number of arguments.", type_nothing))
      },
      "greater" -> {
        var body = body_builder(body.dag).&
        var payload = body.param(type_nothing)
        body.finish(body.crash("Wrong number of arguments.", type_nothing))
      },
      "equal" -> {
        var body = body_builder(body.dag).&
        var payload = body.param(type_nothing)
        body.finish(body.nothing())
      },
    )
  )

  | Convert the arguments into static ones.
  var static_args = list[Id]()
  for arg in lambda_type.args.iter().enumerate() do {
    static_args.&.push(body.dynamic_to_static(
      body.array_get(args, body.int(arg.index)), arg.item, context
    ))
  }
  var args = static_args.to_slice()

  var result = body.call_lambda(
    body.unbox(closure), args, lambda_type.return_type
  )
  var converted = body.static_to_dynamic(
    result, lambda_type.return_type, context
  )

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(converted) })
}

fun dynamic_to_static(
  body: &YogurtBodyBuilder, value: Id, type: EggType, context: &YogurtContext
): Id {
  var fun_ = compile_dynamic_to_static_fun(type, context)
  body.call_fun(fun_, list(value).to_slice(), type)
}
fun compile_dynamic_to_static_fun(
  type: EggType, context: &YogurtContext
): String {
  var compilation =
    context.start_compiling("dynamic to {type}") or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&

  var value = body.param(type_dynamic)
  var result =
    switch type.kind()
    case variable panic("type var in compile to dynamic")
    case byte
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "byte"
            then payload
            else body.crash(
              "dynamic to static failed (expected Byte)", type_never
            )
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case int
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "int"
            then payload
            else body.crash(
              "dynamic to static failed (expected int, got {name})", type_never
            )
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case never body.crash("tried to build Never from Dynamic", type)
    case type
      | Note: We don't need to re-create the exact type, as you can't inspect
      | non-statically-known types â€“ during runtime, Types don't store
      | anything. So, we just give you _any_ type.
      body.type(type_type)
    case box(inner_type)
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "box" then
              body.box(body.dynamic_to_static(payload, inner_type, context))
            else
              body.crash("dynamic to static failed (expected box)", type)
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case array(item_type)
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "array" then
              body.generate_array(
                body.array_len(payload),
                body.lambda(
                  type_lambda(list(type_int).to_slice(), item_type),
                  compile_dynamic_to_array_items_fun(item_type, context),
                  body.box(payload),
                ),
              )
            else
              body.crash("dynamic to static failed (expected array)", type)
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case struct_(field_types)
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "struct" then
              body.struct_({
                var fields = map[String, Id]()
                for field in field_types do {
                  var name = field.key
                  var field_type = field.value
                  var field = body.find_field_in_array(
                    payload, body.string(name), context
                  )
                  var field = body.dynamic_to_static(field, field_type, context)
                  fields.&.put(name, field)
                }
                fields
              })
            else
              body.crash("dynamic to static failed (expected struct)", type)
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case enum_(variant_types)
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "enum" then {
              var variant_name = body.member(payload, "name")
              var value = body.member(payload, "value")

              var inner_body = {
                var body = body_builder(body.dag).&
                var payload = body.param(type_nothing)
                body.finish(body.crash("No enum case matches.", type))
              }
              for variant_type in variant_types do {
                var body = body_builder(body.dag).&
                var payload = body.param(type_nothing)
                inner_body = body.finish(body.switch_(
                  body.compare_strings(
                    variant_name, body.string(variant_type.key), context
                  ),
                  type,
                  map(
                    "true" -> {
                      var body = body_builder(body.dag).&
                      var payload = body.param(type_nothing)
                      body.finish(body.enum_(
                        type,
                        variant_type.key,
                        body.dynamic_to_static(
                          value, variant_type.value, context
                        ),
                      ))
                    },
                    "false" -> inner_body,
                  )
                ))
              }
              for id in inner_body.children do body.children.&.push(id)
              inner_body.returns
            } else
              body.crash("dynamic to static failed (expected enum)", type)
          cases.&.put(name, body.finish(result))
        }
        cases
      })
    case lambda
      body.switch_(value, type, {
        var cases = map[String, YogurtBody]()
        for entry in type_dynamic.kind().enum_.unwrap() do {
          var name = entry.key
          var payload_type = entry.value
          var body = body_builder(body.dag).&
          var payload = body.param(payload_type)
          var result =
            if name == "lambda" then
              body.lambda(
                type,
                compile_static_lambda_wrapper_fun(type, context),
                body.box(payload),
              )
            else
              body.crash("dynamic to static failed (expected enum)", type)
          cases.&.put(name, body.finish(result))
        }
        cases
      })

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(result) })
}
fun compile_dynamic_to_array_items_fun(
  item_type: EggType, context: &YogurtContext
): String {
  var compilation =
    context.start_compiling("converting dynamic to array item of {item_type}")
      or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&
  var index = body.param(type_int)
  var closure = body.param(type_box(type_array(type_dynamic)))

  var array = body.unbox(closure)
  var item = body.array_get(array, index)
  var converted = body.dynamic_to_static(item, item_type, context)

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(converted) })
}
fun find_field_in_array(
  body: &YogurtBodyBuilder, array: Id, name: Id, context: &YogurtContext
): Id {
  body.call_fun(
    compile_find_field_in_array_fun(context),
    list(array, name, body.int(0)).to_slice(),
    type_dynamic,
  )
}
| Finds the value of a field in an (Array (& name: String value: Dynamic))
fun compile_find_field_in_array_fun(context: &YogurtContext): String {
  var compilation =
    context.start_compiling(
      "find field in (Array (& name: String value: Dynamic))"
    ) or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&

  var array = body.param(type_dynamic_fields)
  var name  = body.param(type_string)
  var index = body.param(type_int)

  var len = body.array_len(array)
  var result = body.switch_(
    body.compare_ints(index, len),
    type_dynamic,
    map(
      "less" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        var field = body.array_get(array, index)
        var field_name = body.member(field, "name")
        var matches = body.compare_strings(name, field_name, context)
        body.finish(body.switch_(matches, type_dynamic, map(
          "true" -> {
            var body = body_builder(body.dag).&
            body.param(type_nothing)
            body.finish(body.member(field, "value"))
          },
          "false" -> {
            var body = body_builder(body.dag).&
            body.param(type_nothing)
            body.finish(body.call_fun(
              compile_find_field_in_array_fun(context),
              list(array, name, body.add_ints(index, body.int(1))).to_slice(),
              type_dynamic,
            ))
          }
        )))
      },
      "equal" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.crash("field not in struct", type_dynamic))
      },
      "greater" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.unreachable(type_dynamic))
      },
    ),
  )

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(result) })
}
fun compare_strings(
  body: &YogurtBodyBuilder, a: Id, b: Id, context: &YogurtContext
): Id {
  body.call_fun(
    compile_compare_strings_fun(context),
    list(a, b).to_slice(),
    type_bool,
  )
}
fun compile_compare_strings_fun(context: &YogurtContext): String {
  var compilation =
    context.start_compiling("compare strings") or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&
  var a = body.param(type_string)
  var b = body.param(type_string)

  var a_bytes = body.member(a, "utf8_bytes")
  var b_bytes = body.member(b, "utf8_bytes")

  var result = body.switch_(
    body.compare_ints(body.array_len(a_bytes), body.array_len(b_bytes)),
    type_bool,
    map(
      "less" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.enum_(type_bool, "false", body.nothing()))
      },
      "equal" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.call_fun(
          compile_compare_strings_rec_fun(context),
          list(a_bytes, b_bytes, body.int(0)).to_slice(),
          type_bool,
        ))
      },
      "greater" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.enum_(type_bool, "false", body.nothing()))
      },
    ),
  )

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(result) })
}
fun compile_compare_strings_rec_fun(context: &YogurtContext): String {
  var compilation =
    context.start_compiling("compare strings rec")
      or(signature) return signature

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&
  var a = body.param(type_array(type_byte))
  var b = body.param(type_array(type_byte))
  var index = body.param(type_int)

  var result = body.switch_(
    body.compare_ints(index, body.array_len(a)),
    type_bool,
    map(
      "less" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.switch_(
          body.compare_ints(
            body.byte_to_int(body.array_get(a, index)),
            body.byte_to_int(body.array_get(b, index)),
          ),
          type_bool,
          map(
            "less" -> {
              var body = body_builder(body.dag).&
              body.param(type_nothing)
              body.finish(body.enum_(type_bool, "false", body.nothing()))
            },
            "equal" -> {
              var body = body_builder(body.dag).&
              body.param(type_nothing)
              var result = body.call_fun(
                compile_compare_strings_rec_fun(context),
                list(a, b, body.add_ints(index, body.int(1))).to_slice(),
                type_bool,
              )
              body.finish(result)
            },
            "greater" -> {
              var body = body_builder(body.dag).&
              body.param(type_nothing)
              body.finish(body.enum_(type_bool, "false", body.nothing()))
            },
          ),
        ))
      },
      "equal" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.enum_(type_bool, "true", body.nothing()))
      },
      "greater" -> {
        var body = body_builder(body.dag).&
        body.param(type_nothing)
        body.finish(body.unreachable(type_bool))
      },
    ),
  )

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(result) })
}

| a static wrapper for a dynamic lambda
fun compile_static_lambda_wrapper_fun(
  type: EggType, context: &YogurtContext
): String {
  var compilation =
    context.start_compiling("static wrapper for dynamic lambda {type}")
      or(signature) return signature

  var lambda_type = type.kind().lambda.unwrap()

  var dag = dag[YogurtExpr]().&
  var body = body_builder(dag).&

  var args = list[Id]()
  for arg in lambda_type.args do args.&.push(body.param(arg))
  var closure = body.param(type_box(type_dynamic_lambda))

  var dynamic_args = list[Id]()
  for arg in zip(args.iter(), lambda_type.args.iter()) do
    dynamic_args.&.push(body.static_to_dynamic(arg.a, arg.b, context))
  var dynamic_args = body.array(
    type_array(type_dynamic), dynamic_args.to_slice()
  )

  var result = body.call_lambda(
    body.unbox(closure), list(dynamic_args).to_slice(), type_dynamic
  )
  var converted =
    body.dynamic_to_static(result, lambda_type.return_type, context)

  compilation.done(YogurtFun { dag = dag.*, body = body.finish(converted) })
}
