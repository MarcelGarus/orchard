| Well-Aligned Form of Fixed-Layout Expressions  
|
| This compiler stage is pretty low-level. It's no longer graph based, but
| mainly tree based â€“ as a preparation for lowering to stack-based byte code.
| Types no longer exist. Instead, each expression corresponds to a slice of
| bytes. For expressions to be compatible (such as branches of a switch), they
| just have to have the same length.
| Structs have been converted into runs of expressions (shown using curly
| braces). Enums have been converted into tagged unions.
|
| main Int: @0:8
|   | Creating and accessing a struct.
|   | foo = & x: @0 y: 42   | & y: Int x: Int
|   | foo.y
|   @1 = {@0 42:8}.8:8
|   | Creating and switching on an enum.
|   | foo: Bool = True
|   | foo
|   | % True: Some 5
|   |   False: None
|   @2 = {1:1}.0:1 %
|     0 -> {padding:8 0:1}
|     1 -> {5:8 1:1}

import plum.mar

struct Waffle { funs: Map[String, WaffleFun] }

| Here, functions have explicit parameters. Instead, the local @0 represents the
| parameters. @0 is guaranteed to exist and be on the stack when the function
| starts executing.
struct WaffleFun { dag: Dag[WaffleExpr], body: WaffleBody }
struct WaffleBody { locals: Slice[Id], returns: WaffleExpr }

struct WaffleExpr { size: Int, alignment: Int, kind: WaffleExprKind }
enum WaffleExprKind {
  param,
  padding: Int,
  byte: Byte, | 8 bits
  int: Int,  | 64 bits
  local: Id,
  aggregate: Slice[WaffleExpr],
  member: WaffleMember,
  switch_: WaffleSwitch,
  | Call stuff
  call: WaffleCall,
  call_indirect: WaffleCallIndirect,
  function_ptr: String,
  | Arithmetics
  add: &WaffleExpr,
  sub: &WaffleExpr,
  mul: &WaffleExpr,
  div: &WaffleExpr,
  mod: &WaffleExpr,
  compare_zero: &WaffleExpr,
  | Bitwise operations
  and_: &WaffleExpr,
  or_: &WaffleExpr,
  xor: &WaffleExpr,
  | Memory
  malloc: &WaffleExpr,
  free: &WaffleExpr,
  load: &WaffleExpr,
  store: WaffleStore,
  | Error
  crash: &WaffleExpr,
}
struct WaffleMember { of: &WaffleExpr, offset: Int }
struct WaffleSwitch { byte: &WaffleExpr, cases: Slice[WaffleBody] }
struct WaffleCall { function: String, args: &WaffleExpr }
struct WaffleCallIndirect { function_ptr: &WaffleExpr, args: &WaffleExpr }
struct WaffleStore { ptr: &WaffleExpr, value: &WaffleExpr }

fun waffle_padding(amount: Int): WaffleExpr {
  WaffleExpr {
    size = amount, alignment = 1, kind = WaffleExprKind.padding(amount)
  }
}
fun waffle_byte(byte: Byte): WaffleExpr {
  WaffleExpr { size = 1, alignment = 1, kind = WaffleExprKind.byte(byte) }
}
fun waffle_int(int: Int): WaffleExpr {
  WaffleExpr { size = 8, alignment = 8, kind = WaffleExprKind.int(int) }
}
fun waffle_local(id: Id, size: Int, alignment: Int): WaffleExpr {
  WaffleExpr { size, alignment, kind = WaffleExprKind.local(id) }
}
fun waffle_aggregate(fields: Slice[WaffleExpr]): WaffleExpr {
  var size = 0
  var alignment = 1
  for field in fields do {
    size.is_multiple_of(field.alignment) or
      panic("badly aligned field in aggregate")
    size = size + field.size
    alignment = max(alignment, field.alignment)
  }
  WaffleExpr { size, alignment, kind = WaffleExprKind.aggregate(fields) }
}
fun waffle_member(
  of: WaffleExpr, offset: Int, size: Int, alignment: Int
): WaffleExpr {
  offset >= 0 or panic("negative offset")
  offset + size <= of.size or panic("offset too big: {offset}")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.member(WaffleMember { of = of.put_on_heap(), offset })
  }
}
fun waffle_switch(byte: WaffleExpr, cases: Slice[WaffleBody]): WaffleExpr {
  byte.size == 1 or panic("switch byte has invalid size")
  byte.alignment == 1 or panic("switch byte has invalid alignment")
  cases.is_not_empty() or panic("switch with no cases")
  var size = cases.get(0).returns.size
  var alignment = 1
  for case_ in cases do {
    size == case_.returns.size or panic({
      var b = string_builder().&
      b."switch cases have different sizes:"
      for case_ in cases do b."\n{case_.debug()}"
      b.to_string()
    })
    alignment = max(alignment, case_.returns.alignment)
  }
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.switch_(WaffleSwitch { byte = byte.put_on_heap(), cases })
  }
}
| The size and alignment are of the returned value, not the arguments.
fun waffle_call(
  function: String, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call(WaffleCall { function, args = args.put_on_heap() })
  }
}
| The size and alignment are of the returned value, not the arguments.
fun waffle_call_indirect(
  function_ptr: WaffleExpr, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call_indirect(WaffleCallIndirect {
      function_ptr = function_ptr.put_on_heap(), args = args.put_on_heap()
    })
  }
}
fun waffle_function_ptr(signature: String): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8, kind = WaffleExprKind.function_ptr(signature)
  }
}
fun is_int(expr: WaffleExpr): Bool { expr.size == 8 and expr.alignment == 8 }
fun is_ptr(expr: WaffleExpr): Bool { expr.size == 8 and expr.alignment == 8 }
fun waffle_int_operands(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  left.is_int() or panic("left is not an int ({left.size} bytes)")
  right.is_int() or panic("right is not an int ({right.size} bytes)")
  waffle_aggregate(list(left, right).to_slice())
}
fun waffle_add(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.add(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_sub(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.sub(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_mul(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mul(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_div(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.div(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_mod(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mod(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_compare_zero(int: WaffleExpr): WaffleExpr {
  int.is_int() or panic("expected int")
  WaffleExpr {
    size = 1, alignment = 1,
    kind = WaffleExprKind.compare_zero(int.put_on_heap()),
  }
}
fun waffle_and(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.and_(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_or(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.or_(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_xor(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.xor(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_malloc(size: WaffleExpr): WaffleExpr {
  size.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.malloc(size.put_on_heap())
  }
}
fun waffle_free(ptr: WaffleExpr, size: WaffleExpr): WaffleExpr {
  ptr.is_ptr() or panic("expected pointer")
  size.is_ptr() or panic("expected size")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.free(waffle_aggregate(
      list(ptr, size).to_slice()
    ).put_on_heap())
  }
}
fun waffle_load(expr: WaffleExpr, size: Int, alignment: Int): WaffleExpr {
  expr.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.load(expr.put_on_heap())
  }
}
fun waffle_store(ptr: WaffleExpr, value: WaffleExpr): WaffleExpr {
  ptr.is_ptr() or panic("expected pointer")
  WaffleExpr {
    size = 0, alignment = 1,
    kind = WaffleExprKind.store(WaffleStore {
      ptr = ptr.put_on_heap(), value = value.put_on_heap()
    })
  }
}
fun waffle_crash(message_ptr: WaffleExpr, message_len: WaffleExpr): WaffleExpr {
  message_ptr.is_ptr() or panic("crash, but message_ptr is not a ptr")
  message_len.is_int() or panic("crash, but message_len is not an int")
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.crash(
      waffle_aggregate(list(message_ptr, message_len).to_slice()).put_on_heap()
    ),
  }
}

struct WaffleBodyBuilder {
  dag: &Dag[WaffleExpr], locals: List[Id], alignment: Int
}
fun body_builder(dag: &Dag[WaffleExpr]): WaffleBodyBuilder {
  WaffleBodyBuilder { dag, locals = list[Id](), alignment = 1 }
}
fun local(builder: &WaffleBodyBuilder, expr: WaffleExpr): WaffleExpr {
  var id = builder.dag.put(expr)
  builder.locals.&.push(id)
  builder.alignment = max(builder.alignment, expr.alignment)
  waffle_local(id, expr.size, expr.alignment)
}
fun finish(builder: WaffleBodyBuilder, returns: WaffleExpr): WaffleBody {
  WaffleBody { locals = builder.locals.to_slice(), returns }
}

| Writing Waffle  

fun write[W](writer: W, waffle: Waffle) {
  var first = true
  for fun_ in waffle.funs do {
    if first then first = false else writer."\n"

    var signature = fun_.key
    var fun_ = fun_.value

    writer."{signature}:"
    writer.write(fun_.body, fun_.dag, indentation(1))
  }
}
fun write[W](
  writer: W, body: WaffleBody, dag: Dag[WaffleExpr], indentation: Indentation
) {
  for id in body.locals do {
    var expr = dag.get(id)
    writer."\n{indentation}local {id}:{expr.size} =\n"
    writer.write(expr, dag, indentation + 1)
  }
  writer."\n"
  writer.write(body.returns, dag, indentation)
}
fun write[W](
  writer: W, expr: WaffleExpr, dag: Dag[WaffleExpr], indentation: Indentation
) {
  writer."{indentation}"
  switch expr.kind
  case param writer."param"
  case padding(amount) writer."padding:{amount}"
  case byte(byte) writer."byte {byte}"
  case int(int) writer."int {int}"
  case local(id) writer."{id}"
  case aggregate(aggregate) {
    writer."aggregate"
    for field in aggregate do {
      writer."\n"
      writer.write(field, dag, indentation + 1)
    }
  }
  case member(member) {
    writer."member at {member.offset}:{expr.size}\n"
    writer.write(member.of.*, dag, indentation + 1)
  }
  case switch_(switch_) {
    writer."switch\n"
    writer.write(switch_.byte.*, dag, indentation + 1)
    for case_ in switch_.cases.iter().enumerate() do {
      writer."\n{indentation + 1}case {case_.index} ->"
      writer.write(case_.item, dag, indentation + 2)
    }
  }
  case call(call) {
    writer."call \"{call.function}\"\n"
    writer.write(call.args.*, dag, indentation + 1)
  }
  case call_indirect(call) {
    writer."call_indirect\n"
    writer.write(call.function_ptr.*, dag, indentation + 1)
    writer.write(call.args.*, dag, indentation + 1)
  }
  case function_ptr(signature) writer."function_ptr of \"{signature}\""
  case add(ops) {
    writer."add\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case sub(ops) {
    writer."sub\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case mul(ops) {
    writer."mul\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case div(ops) {
    writer."div\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case mod(ops) {
    writer."mod\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case compare_zero(op) {
    writer."compare_zero\n"
    writer.write(op.*, dag, indentation + 1)
  }
  case and_(ops) {
    writer."and\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case or_(ops) {
    writer."or\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case xor(ops) {
    writer."xor\n"
    writer.write(ops.*, dag, indentation + 1)
  }
  case malloc(size) {
    writer."malloc\n"
    writer.write(size.*, dag, indentation + 1)
  }
  case free(ptr) {
    writer."free\n"
    writer.write(ptr.*, dag, indentation + 1)
  }
  case load(ptr) {
    writer."load {expr.size}\n"
    writer.write(ptr.*, dag, indentation + 1)
  }
  case store(store) {
    writer."store\n"
    writer.write(store.ptr.*, dag, indentation + 1)
    writer.write(store.value.*, dag, indentation + 1)
  }
  case crash(ops) {
    writer."crash\n"
    writer.write(ops.*, dag, indentation + 1)
  }
}
