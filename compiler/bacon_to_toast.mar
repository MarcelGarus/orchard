| Parsing  
|
| Plum is strictly indentation-based and language constructs that span multiple
| lines are guaranteed to not have closing punctuation. For example, multiline
| parentheses are not allowed and struct, enum, function, and lambda definitions
| as well as structs are all terminated based on the indentation.
|
| Parsing in Plum works on two different granularities:
|
| - Blocks: Indentation-based units. See the Bacon for more info.
| - Lines: Things within a single line.
|
| Some syntax constructs can only work on the block granularity (such as
| switch). Some can only work on the line granularity (such as parentheses).
| Some work on both granularities (such as calls or struct creations).

import plum.mar

| The line parser walks through a string from start to end.
struct LineParser { input: String, input_src: Src, cursor: Int }
fun parser(input: String, src: Src): _ {
  LineParser { input, input_src = src, cursor = 0 }
}
fun src_of(parser: LineParser, cursor_range: Range[Int]): Src {
  var start_offset = parser.input_src.range.start
  parser.input_src.with_range(
    {start_offset + cursor_range.start}..{start_offset + cursor_range.end}
  )
}
fun src_of_rest(parser: LineParser): Src {
  parser.input_src.with_range(
    {parser.input_src.range.start + parser.cursor}..parser.input_src.range.end
  )
}
fun current(parser: LineParser): Char {
  parser.input.chars().get_maybe(parser.cursor) or 0.lower_byte().to_char()
}
fun advance(parser: &LineParser) { parser.cursor = parser.cursor + 1 }
fun is_at_end(parser: LineParser): Bool { parser.cursor == parser.input.len }
fun consume_whitespace(parser: &LineParser) {
  loop {
    parser.current().is_whitespace() or break
    parser.advance()
  }
}
fun is_done(parser: &LineParser): Bool {
  parser.consume_whitespace()
  parser.is_at_end()
}
fun ensure_is_at_end(parser: &LineParser): Result[Nothing, Error] {
  parser.is_done() or return error[Nothing, Error](error(
    "Additional garbage on line.", parser.src_of_rest()))
  ok[Nothing, Error]({})
}
fun consume(parser: &LineParser, prefix: String): Maybe[StringAndSrc] {
  parser.consume_whitespace()
  var start = parser.cursor
  for char in prefix.chars() do {
    parser.current() == char or {
      parser.cursor = start
      return none[StringAndSrc]()
    }
    parser.advance()
  }
  var end = parser.cursor
  some(prefix @ parser.src_of(start..end))
}

| Most parsing functions return a Result[Maybe[T], Error], where the different
| possibilities have the following meaning:
|
| - ok(some(t)): A value was successfully parsed.
| - ok(none): The parser didn't match.
| - error(e): The parser matched, but the input contains an error that should be
|   shown in the editor. You should not rely on the cursor anymore.
|
| Here's an example for the parse_parenthesized function:
|
| input         | "(4) foo"   | "foo bar" | "()"
| cursor before |  ^          |  ^        |  ^
| cursor after  |     ^       |  ^        | ?
| output        | ok(some(4)) | ok(none)  | error("expected expression")

fun no_match[T](): Result[Maybe[T], Error] {
  ok[Maybe[T], Error](none[T]())
}
fun bad_input[T](error: Error): Result[Maybe[T], Error] {
  error[Maybe[T], Error](error)
}
fun parsed[T](value: T): Result[Maybe[T], Error] {
  ok[Maybe[T], Error](some(value))
}

var identifier_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_+-*/<>"
fun parse_identifier(parser: &LineParser): Maybe[StringAndSrc] {
  parser.consume_whitespace()
  var start = parser.cursor
  loop {
    identifier_chars.iter().&.contains(parser.current()) or break
    parser.advance()
  }
  var end = parser.cursor
  if start == end then return none[StringAndSrc]()
  var identifier = parser.input.substr(start..end)
  if identifier == "->" then {
    parser.cursor = start
    return none[StringAndSrc]()
  }
  some(identifier @ parser.src_of(start..end))
}

| Parses a non-uppercase identifier (also allows punctuation).
fun parse_name(parser: &LineParser): Maybe[StringAndSrc] {
  parser.consume_whitespace()
  not(parser.current().is_upper()) or return none[StringAndSrc]()
  parser.parse_identifier()
}

| Parsing Types  
|
| Plum has structural typing. Even though you usually don't think about it that
| way, when you use "generic" types (aka types with type variables) your usage
| really behaves like a function call. For example, `List Int` "calls" the
| definition of List with the argument Int. So, don't be confused if you see
| "type variables" and "type calls" here.

| Parses an uppercase identifier.
fun parse_type_name(parser: &LineParser): Maybe[StringAndSrc] {
  parser.consume_whitespace()
  parser.current().is_upper() or return none[StringAndSrc]()
  parser.parse_identifier()
}

| Parses a lowercase identifier.
fun parse_type_variable(parser: &LineParser): Maybe[StringAndSrc] {
  parser.consume_whitespace()
  parser.current().is_lower() or return none[StringAndSrc]()
  parser.parse_identifier()
}

fun parse_parenthesized_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  var opening_paren = parser.consume("(") or return no_match[ToastType]()

  var type = parser.parse_type_expr()? or
    return bad_input[ToastType](error(
      "Expected type after parenthesis.", opening_paren.src))

  var closing_paren = parser.consume(")") or
    return bad_input[ToastType](error(
      "Expected a closing parenthesis.", parser.src_of_rest()))

  return parsed(type)
}

| Parses a type that doesn't contain whitespace (except in parentheses).
fun parse_type_atom(parser: &LineParser): Result[Maybe[ToastType], Error] {
  if parser.parse_parenthesized_type()? is some(expr) then return parsed(expr)

  if parser.parse_type_name() is some(name) then
    return parsed(ToastType.call(ToastTypeCall {
      name, args = empty_slice[ToastType]()
    }))

  if parser.parse_name() is some(name) then
    return parsed(ToastType.variable(name))

  no_match[ToastType]()
}

fun parse_type_atoms(parser: &LineParser): Result[Slice[ToastType], Error] {
  var atoms = list[ToastType]()
  loop atoms.&.push(parser.parse_type_atom()? or break)
  ok[Slice[ToastType], Error](atoms.to_slice())
}

fun parse_lambda_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  parser.consume("\\") or return no_match[ToastType]()

  var args = parser.parse_type_atoms()?

  parser.consume("->") or
    return bad_input[ToastType](error(
      "Expected lambda arrow ->.", parser.src_of_rest()))

  var return_type = parser.parse_type_atom()? or
    return bad_input[ToastType](error(
      "Expected the lambda return type.", parser.src_of_rest()))

  parsed(ToastType.lambda(ToastTypeLambda {
    args, return_type = return_type.put_on_heap(),
  }))
}

fun parse_struct_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  parser.consume("&") or return no_match[ToastType]()

  var fields = list[ToastTypeField]()
  loop {
    var name = parser.&.parse_name() or break {}

    parser.&.consume(":") or
      return bad_input[ToastType](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var type = parser.&.parse_type_atom()? or
      return bad_input[ToastType](error(
        "Expected type of field.", parser.src_of_rest()))

    fields.&.push(ToastTypeField { name, type })
  }
  parsed(ToastType.struct_(fields.to_slice()))
}

fun parse_enum_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  parser.consume("|") or return no_match[ToastType]()

  var variants = list[ToastTypeVariant]()
  loop {
    var name = parser.&.parse_name() or break {}

    var has_explicit_type = parser.&.consume(":") is some

    var type = if has_explicit_type then {
      parser.&.parse_type_atom()? or
        return bad_input[ToastType](error(
          "Expected type of variant.", parser.src_of_rest()))
    } else ToastType.struct_(empty_slice[ToastTypeField]())

    variants.&.push(ToastTypeVariant { name, type })
  }
  parsed(ToastType.enum_(variants.to_slice()))
}

| Parses a type that may contain whitespace.
fun parse_type_expr(parser: &LineParser): Result[Maybe[ToastType], Error] {
  if parser.parse_lambda_type()? is some(type) then return parsed(type)
  if parser.parse_struct_type()? is some(type) then return parsed(type)
  if parser.parse_enum_type()? is some(type) then return parsed(type)
  if parser.parse_type_name() is some(name) then {
    var args = list[ToastType]()
    loop args.&.push(parser.parse_type_atom()? or break)
    return parsed(ToastType.call(ToastTypeCall { name, args = args.to_slice() }))
  }
  if parser.parse_type_atom()? is some(type) then return parsed(type)
  no_match[ToastType]()
}

fun parse_struct_type(bacon: Bacon): Result[Maybe[ToastType], Error] {
  bacon.line == "&" or return no_match[ToastType]()

  var fields = list[ToastTypeField]()
  for child in bacon.children do {
    var parser = parser(child.line, child.src)

    var name = parser.&.parse_name() or
      return bad_input[ToastType](error(
        "Expected field name.", parser.src_of_rest()))

    parser.&.consume(":") or
      return bad_input[ToastType](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var type =
      if child.children.is_empty() then {
        var type = parser.&.parse_type_expr()? or
          return bad_input[ToastType](error(
            "Expected type of field.", parser.src_of_rest()))
        parser.&.ensure_is_at_end()?
        type
      } else {
        parser.&.ensure_is_at_end()?
        var children = child.children.parse_types()?
        children.len == 1 or
          return bad_input[ToastType](error(
            "Fields can only have one type.", parser.src_of_rest()))
        children.get(0)
      }

    fields.&.push(ToastTypeField { name, type })
  }
  parsed(ToastType.struct_(fields.to_slice()))
}

fun parse_enum_type(bacon: Bacon): Result[Maybe[ToastType], Error] {
  bacon.line == "|" or return no_match[ToastType]()

  var variants = list[ToastTypeVariant]()
  for child in bacon.children do {
    var parser = parser(child.line, child.src)

    var name = parser.&.parse_name() or
      return bad_input[ToastType](error(
        "Expected variant name.", parser.src_of_rest()))

    var has_explicit_type = parser.&.consume(":") is some

    var type = if has_explicit_type then {
      if child.children.is_empty() then {
        var type = parser.&.parse_type_expr()? or
          return bad_input[ToastType](error(
            "Expected type of variant.", parser.src_of_rest()))
        parser.&.ensure_is_at_end()?
        type
      } else {
        parser.&.ensure_is_at_end()?
        var children = child.children.parse_types()?
        children.len == 1 or
          return bad_input[ToastType](error(
            "Variant can only have one type.", parser.src_of_rest()))
        children.get(0)
      }
    } else ToastType.struct_(empty_slice[ToastTypeField]())

    variants.&.push(ToastTypeVariant { name, type })
  }

  parsed(ToastType.enum_(variants.to_slice()))
}

fun parse_type(bacon: Bacon): Result[ToastType, Error] {
  if bacon.parse_struct_type()? is some(s) then return ok[ToastType, Error](s)
  if bacon.parse_enum_type()?   is some(e) then return ok[ToastType, Error](e)

  var parser = parser(bacon.line, bacon.src)

  if bacon.children.is_empty() then {
    var type = parser.&.parse_type_expr()? or
      return error[ToastType, Error](error(
        "Expected a type expression.", parser.src_of_rest()))
    parser.&.ensure_is_at_end()?
    ok[ToastType, Error](type)
  } else {
    var name = parser.&.parse_type_name() or
      return error[ToastType, Error](error(
        "Expected type name.", parser.src_of_rest()))
    parser.&.ensure_is_at_end()?
    var args = bacon.children.parse_types()?
    ok[ToastType, Error](ToastType.call(ToastTypeCall { name, args }))
  }
}

fun parse_types(bacons: Slice[Bacon]): Result[Slice[ToastType], Error] {
  var types = list[ToastType]()
  for bacon in bacons do types.&.push(bacon.parse_type()?)
  ok[Slice[ToastType], Error](types.to_slice())
}

| Parsing Values  
|
| With types handled above, this part parses expressions on the value level.

fun parse_int(parser: &LineParser): Maybe[IntAndSrc] {
  parser.consume_whitespace()
  var num = 0
  var start = parser.cursor
  loop {
    var char = parser.current()
    char.is_digit() or break
    num = num * 10 + {char - #0}.to_int()
    parser.advance()
  }
  var end = parser.cursor
  if start == end then return none[IntAndSrc]()
  some(num @ parser.src_of(start..end))
}

fun parse_string(parser: &LineParser): Result[Maybe[StringAndSrc], Error] {
  var start_quote = parser.consume("\"") or return no_match[StringAndSrc]()
  var start = parser.cursor
  loop {
    if parser.is_at_end() then
      return bad_input[StringAndSrc](error(
        "string doesn't end until end of input", parser.src_of_rest()))
    if parser.current() == #" then break
    parser.advance()
  }
  var end = parser.cursor
  parser.advance() | consume the "
  var end_quote = "\"" @ parser.src_of(end ..+ 1)
  parsed(parser.input.substr(start..end) @ {start_quote.src ... end_quote.src})
}

fun parse_parenthesized(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var opening_paren = parser.consume("(") or return no_match[ToastExpr]()
  var expr = parser.parse_expr(true, true)? or
    return bad_input[ToastExpr](error(
      "Expected expression after parenthesis.", opening_paren.src))
  var closing_paren = parser.consume(")") or
    return bad_input[ToastExpr](error(
      "Expected the closing parenthesis.", parser.src_of_rest()))
  parsed(expr)
}

fun parse_struct(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var ampersand = parser.consume("&") or return no_match[ToastExpr]()
  var fields = list[ToastField]()
  loop {
    var name = parser.&.parse_name() or break {}

    parser.&.consume(":") or
      return bad_input[ToastExpr](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var value = parser.&.parse_expr(false, true)? or
      return bad_input[ToastExpr](error(
        "Expected value of field.", parser.src_of_rest()))

    fields.&.push(ToastField { name, value })
  }

  parsed(ToastExpr.struct_(ToastStruct {
    ampersand, fields = fields.to_slice()
  }))
}

fun parse_enum(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var pipe = parser.consume("|") or return no_match[ToastExpr]()
  var name = parser.&.parse_name() or
    return bad_input[ToastExpr](error(
      "Expected name of variant.", parser.src_of_rest()))
  var value =
    if parser.&.consume(":") is some then {
      parser.&.parse_expr(false, true)? or
        return bad_input[ToastExpr](error(
          "Expected value of variant.", parser.src_of_rest()))
    } else {
      ToastExpr.struct_(ToastStruct {
        ampersand = "&" @ pipe.src,
        fields = empty_slice[ToastField](),
      })
    }

  parsed(ToastExpr.enum_(ToastEnum {
    pipe, name, value = value.put_on_heap()
  }))
}

fun parse_expr(
  parser: &LineParser, allow_whitespace: Bool, allow_dots: Bool
): Result[Maybe[ToastExpr], Error] {
  var expr =
    if parser.parse_parenthesized()? is some(expr) then expr
    else if parser.parse_int()     is some(int)    then ToastExpr.int(int)
    else if parser.parse_string()? is some(string) then ToastExpr.string(string)
    else if parser.parse_name()    is some(name)   then ToastExpr.name(name)
    else if allow_whitespace then {
      parser.parse_struct()? or
      parser.parse_enum()? or return no_match[ToastExpr]()
    } else return no_match[ToastExpr]()

  if allow_whitespace then {
    var args = list[ToastExpr]()
    loop args.&.push(parser.parse_expr(false, false)? or break)
    if args.is_not_empty() then
      expr = ToastExpr.call(ToastCall {
        function = expr.put_on_heap(), args = args.to_slice()
      })
  }

  if allow_dots then {
    loop {
      parser.consume(".") or break
      var right = parser.parse_expr(allow_whitespace, false)? or
        return bad_input[ToastExpr](error(
          "Expected expression", parser.src_of_rest()))
      expr = dot(expr, right)
    }
  }

  if allow_whitespace and allow_dots then {
    var cursor_before = parser.cursor
    if parser.consume("=") is some(equal_sign) then {
      if parser.parse_expr(true, true)? is some(right) then
        expr = ToastExpr.var_(ToastVar {
          left = expr.put_on_heap(), equal_sign, right = right.put_on_heap()
        })
      else
        parser.cursor = cursor_before
    }
  }

  parsed(expr)
}

fun parse_struct(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  bacon.line == "&" or return no_match[ToastExpr]()
  var ampersand = "&" @ bacon.src

  var fields = list[ToastField]()
  for child in bacon.children do {
    var parser = parser(child.line, child.src)

    var name = parser.&.parse_name() or
      return bad_input[ToastExpr](error(
        "Expected field name.", parser.src_of_rest()))

    parser.&.consume(":") or
      return bad_input[ToastExpr](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var value =
      if child.children.is_empty() then {
        var value = parser.&.parse_expr(true, true)? or
          return bad_input[ToastExpr](error(
            "Expected value of field.", parser.src_of_rest()))
        parser.&.ensure_is_at_end()?
        value
      } else {
        parser.&.ensure_is_at_end()?
        var children = child.children.parse_exprs()?
        children.len == 1 or
          return bad_input[ToastExpr](error(
            "Fields can only have one value.", parser.src_of_rest()))
        children.get(0)
      }

    fields.&.push(ToastField { name, value })
  }

  parsed(ToastExpr.struct_(ToastStruct {
    ampersand, fields = fields.to_slice()
  }))
}

fun parse_enum(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  bacon.line == "|" or return no_match[ToastExpr]()
  var pipe = "|" @ bacon.src

  bacon.children.len == 1 or
    return bad_input[ToastExpr](error(
      "Enum literals can only have one variant.", bacon.src))
  var child = bacon.children.get(0)

  var parser = parser(child.line, child.src)
  var name = parser.&.parse_name() or
    return bad_input[ToastExpr](error(
      "Expected name of variant.", parser.src_of_rest()))
  var value =
    if parser.&.consume(":") is some then {
      if child.children.is_empty() then {
        parser.&.parse_expr(true, true)? or
          return bad_input[ToastExpr](error(
            "Expected value of variant.", parser.src_of_rest()))
      } else {
        child.children.len == 1 or
          return bad_input[ToastExpr](error(
            "Expected variant can only have one value.", parser.src_of_rest()))
        var grandchild = child.children.get(0)
        grandchild.parse_expr()? or
          return bad_input[ToastExpr](error(
            "Expected value of variant.", parser.src_of_rest()))
      }
    } else {
      child.children.is_empty() or
          return bad_input[ToastExpr](error(
            "Expected variant to not have a value.", parser.src_of_rest()))
      ToastExpr.struct_(ToastStruct {
        ampersand = "&" @ bacon.src,
        fields = empty_slice[ToastField](),
      })
    }
  

  parsed(ToastExpr.enum_(ToastEnum {
    pipe, name, value = value.put_on_heap()
  }))
}

fun parse_lambda(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  var parser = parser(bacon.line, bacon.src)

  var backslash = parser.&.consume("\\") or return no_match[ToastExpr]()

  var params = list[ToastParam]()
  loop params.&.push(parser.&.parse_param()? or break)

  var equal_sign = parser.&.consume("=") or
    return bad_input[ToastExpr](error(
      "Expected equals sign.", parser.src_of_rest()))

  var body =
    if bacon.children.is_empty() then {
      var body = parser.&.parse_expr(true, true)? or
        return bad_input[ToastExpr](error(
          "Expected body of the lambda.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      body
    } else {
      parser.&.ensure_is_at_end()?
      var children = bacon.children.parse_exprs()?
      if children.is_empty() then
        return bad_input[ToastExpr](error(
          "Expected lambda body.", equal_sign.src))
      ToastExpr.body(children)
    }

  parsed(ToastExpr.lambda(ToastLambda {
    backslash,
    params = params.to_slice(),
    body = body.put_on_heap(),
  }))
}

fun parse_param(parser: &LineParser): Result[Maybe[ToastParam], Error] {
  var name = parser.parse_name() or return no_match[ToastParam]()

  parser.consume(":") or
    return bad_input[ToastParam](error(
      "Expected : after param {name.string}.", name.src))

  var type = parser.&.parse_type_atom()? or
    return bad_input[ToastParam](error(
      "Expected type of param {name.string}", name.src))

  parsed(ToastParam { name, type })
}

fun parse_switch(
  bacon: Bacon, condition: ToastExpr
): Result[Maybe[ToastExpr], Error] {
  bacon.line == "%" or return no_match[ToastExpr]()
  var percent = "%" @ bacon.src

  var cases = list[ToastCase]()
  for case_ in bacon.children do {
    var parser = parser(case_.line, case_.src)

    var symbol = parser.&.parse_name() or
      return bad_input[ToastExpr](error(
        "Expected the name of an enum variant.", parser.src_of_rest()))

    var payload =
      if parser.&.consume(":") is some then {
        var name = parser.&.parse_name() or
          return bad_input[ToastExpr](error(
            "Expected a name for the enum payload.", parser.src_of_rest()))
        some(name)
      } else
        none[StringAndSrc]()

    var arrow = parser.&.consume("->") or
      return bad_input[ToastExpr](error(
        "Expected an arrow.", parser.src_of_rest()))

    var body =
      if parser.cursor == parser.input.len then {
        var children = case_.children.parse_exprs()?
        if children.is_empty() then
          return bad_input[ToastExpr](error(
            "Expected the body of the case.", arrow.src))
        ToastExpr.body(children)
      } else {
        var expr = parser.&.parse_expr(true, true)? or
          return bad_input[ToastExpr](error(
            "Expected a case expression.", parser.src_of_rest()))
        parser.&.ensure_is_at_end()?
        case_.children.is_empty() or
          return bad_input[ToastExpr](error(
            "A case is neither single- nor multi-line.", parser.src_of_rest()))
        expr
      }
    cases.&.push(ToastCase { symbol, payload, body })
  }

  parsed(ToastExpr.switch_(ToastSwitch {
    condition = condition.put_on_heap(), percent, cases = cases.to_slice()
  }))
}

fun parse_expr(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  if bacon.parse_struct()? is some(struct_) then return parsed(struct_)
  if bacon.parse_enum()? is some(enum_) then return parsed(enum_)
  if bacon.parse_lambda()? is some(lambda)  then return parsed(lambda)

  var parser = parser(bacon.line, bacon.src)

  if parser.&.consume("#") is some then return no_match[ToastExpr]()
  var expr = parser.&.parse_expr(true, true)? or
    return bad_input[ToastExpr](error(
      "Expected expression", parser.src_of_rest()))
  var children = bacon.children.parse_exprs()?
  if parser.&.consume("=") is some(equal_sign) then {
    if children.is_empty() then
      return bad_input[ToastExpr](error(
        "Expected a body.", equal_sign.src))
    expr = ToastExpr.var_(ToastVar {
      left = expr.put_on_heap(),
      equal_sign,
      right = ToastExpr.body(children).put_on_heap(),
    })
  } else if children.is_not_empty() then
    expr = ToastExpr.call(ToastCall {
      function = expr.put_on_heap(), args = children
    })
  parser.&.ensure_is_at_end()?
  parsed(expr)
}

fun parse_dot(
  bacon: Bacon, previous: ToastExpr
): Result[Maybe[ToastExpr], Error] {
  var parser = parser(bacon.line, bacon.src)
  var dot = parser.&.consume(".") or return no_match[ToastExpr]()

  var right = Bacon {
    line = bacon.line.substr(1..bacon.line.len),
    children = bacon.children,
    src = bacon.src,
  }.parse_expr()? or
      return bad_input[ToastExpr](error(
        "Dot with nothing on the right.", dot.src
      ))

  parsed(dot(previous, right))
}

fun dot(left: ToastExpr, right: ToastExpr): ToastExpr {
  if right is call(call) then {
    var args = list(left)
    for arg in call.args do args.&.push(arg)
    ToastExpr.call(ToastCall {
      function = call.function, args = args.to_slice()
    })
  } else
    ToastExpr.call(ToastCall {
      function = right.put_on_heap(), args = list(left).to_slice()
    })
}

fun parse_exprs(bacons: Slice[Bacon]): Result[Slice[ToastExpr], Error] {
  var exprs = list[ToastExpr]()
  var i = 0
  loop {
    var bacon = bacons.get_maybe(i) or break
    var expr = bacon.parse_expr()? or { i = i + 1  continue }

    loop {
      var next = bacons.get_maybe(i + 1) or break
      if      next.parse_switch(expr)? is some(new) then { expr = new }
      else if next.parse_dot(expr)?    is some(new) then { expr = new }
      else break
      i = i + 1
    }

    exprs.&.push(expr)
    i = i + 1
  }
  ok[Slice[ToastExpr], Error](exprs.to_slice())
}

| Declarative Parts  
|
| Now that we can parse types and values, let's parse imports, exports, type
| definitions and function definitions!

fun parse_signature(parser: &LineParser): Result[Maybe[ToastSignature], Error] {
  var name = parser.parse_identifier() or return no_match[ToastSignature]()

  var args = list[ToastType]()
  loop args.&.push(parser.parse_type_atom()? or break)
  var args = args.to_slice()

  parsed(ToastSignature { name, args })
}
fun parse_signatures(
  parser: &LineParser
): Result[Slice[ToastSignature], Error] {
  var signatures = list[ToastSignature]()
  loop {
    signatures.&.push(parser.parse_signature()? or break)
    parser.consume(",") or break
  }
  ok[Slice[ToastSignature], Error](signatures.to_slice())
}
fun parse_signatures(
  bacon: Bacon
): Result[Slice[ToastSignature], Error] {
  var parser = parser(bacon.line, bacon.src)
  var signatures = parser.&.parse_signatures()?
  parser.&.ensure_is_at_end()?
  ok[Slice[ToastSignature], Error](signatures)
}
fun parse_signatures(
  bacons: Slice[Bacon]
): Result[Slice[ToastSignature], Error] {
  var signatures = list[ToastSignature]()
  for bacon in bacons do signatures.&.push_all(bacon.parse_signatures()?)
  ok[Slice[ToastSignature], Error](signatures.to_slice())
}

fun parse_import(bacon: Bacon): Result[Maybe[ToastImport], Error] {
  if bacon.line == "import" then {
    | Multiline import.

    var parts = list[ToastImportPart]()
    for child in bacon.children do
      parts.&.push(child.parse_import_part()? or
        return bad_input[ToastImport](error("Expected import part.", child.src)))
    var parts = parts.to_slice()

    return parsed(ToastImport { keyword = bacon.line @ bacon.src, parts })
  }

  | Single-line import.
  var parser = parser(bacon.line, bacon.src)

  var keyword = parser.&.consume("import") or return no_match[ToastImport]()
  parser.current().is_whitespace() or return no_match[ToastImport]()

  bacon.children.is_empty() or
    return bad_input[ToastImport](error(
      "Multi-line import should just have a line that says import.",
      bacon.children.first().src ... bacon.children.last().src,
    ))

  var module = parser.&.parse_string()? or
    return bad_input[ToastImport](error(
      "Expected module for single-line import", parser.src_of_rest()))

  var signatures = parser.&.parse_signatures()?
  parser.&.ensure_is_at_end()?
  if signatures.is_empty() then
    return bad_input[ToastImport](error(
      "Expected imported signatures.", parser.src_of_rest()))

  parsed(ToastImport {
    keyword,
    parts = list(ToastImportPart {
      module = module.string, signatures
    }).to_slice(),
  })
}
fun parse_import_part(bacon: Bacon): Result[Maybe[ToastImportPart], Error] {
  var parser = parser(bacon.line, bacon.src)

  var module = parser.&.parse_string()? or
    return bad_input[ToastImportPart](error(
      "Expected module in import part", parser.src_of_rest()))

  parser.&.consume_whitespace()
  var signatures =
    if parser.is_at_end() then
      | Our children contain the signatures.
      bacon.children.parse_signatures()?
    else {
      bacon.children.is_empty() or
        return bad_input[ToastImportPart](error(
          "For multiline imports, the imported signatures should be on separate 
          'lines from the modules.",
          parser.src_of_rest()
        ))
      var signatures = parser.&.parse_signatures()?
      parser.&.ensure_is_at_end()?
      signatures
    }

  parsed(ToastImportPart { module = module.string, signatures })
}

fun parse_export(bacon: Bacon): Result[Maybe[ToastExport], Error] {
  if bacon.line == "export" then {
    | Multiline export.
    var signatures = bacon.children.parse_signatures()?
    return parsed(ToastExport { keyword = bacon.line @ bacon.src, signatures })
  }

  var parser = parser(bacon.line, bacon.src)

  var keyword = parser.&.consume("export") or return no_match[ToastExport]()
  parser.current().is_whitespace() or return no_match[ToastExport]()

  var signatures = parser.&.parse_signatures()?
  parser.&.ensure_is_at_end()?
  if signatures.is_empty() then
    return bad_input[ToastExport](error(
      "Expected exported signatures.", parser.src_of_rest()))

  parsed(ToastExport { keyword, signatures })
}

fun parse_type_def(bacon: Bacon): Result[Maybe[ToastTypeDef], Error] {
  var parser = parser(bacon.line, bacon.src)

  var name = parser.&.parse_type_name() or return no_match[ToastTypeDef]()

  var params = list[StringAndSrc]()
  loop params.&.push(parser.&.parse_type_variable() or break)

  parser.&.consume("=") or
    return bad_input[ToastTypeDef](error(
      "expected = after type signature", parser.src_of_rest()))

  var type =
    if bacon.children.is_empty() then {
      var type = parser.&.parse_type_expr()? or
        return bad_input[ToastTypeDef](error(
          "Expected a type expression.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      type
    } else {
      parser.&.ensure_is_at_end()?
      bacon.children.len == 1 or
        return bad_input[ToastTypeDef](error(
          "Type definition, but it has {bacon.children.len} children.",
          bacon.children.first().src ... bacon.children.last().src,
        ))
      bacon.children.get(0).parse_type()?
    }

  parsed(ToastTypeDef { name, params = params.to_slice(), type })
}

fun parse_fun_def(bacon: Bacon): Result[Maybe[ToastFun], Error] {
  var parser = parser(bacon.line, bacon.src)

  var name = parser.&.parse_name() or return no_match[ToastFun]()

  var params = list[ToastParam]()
  loop params.&.push(parser.&.parse_param()? or break)

  parser.&.consume("->") or
    return bad_input[ToastFun](error(
      "Expected -> for function {name.string}", parser.src_of_rest()))

  var return_type = parser.&.parse_type_atom()? or
    return bad_input[ToastFun](error(
      "Expected return type", parser.src_of_rest()))

  var equal_sign = parser.&.consume("=") or
    return bad_input[ToastFun](error("Expected =", parser.src_of_rest()))

  var body =
    if bacon.children.is_empty() then {
      var body = parser.&.parse_expr(true, true)? or
        return bad_input[ToastFun](error(
          "Expected fun body.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      body
    } else {
      var children = bacon.children.parse_exprs()?
      if children.is_empty() then
        return bad_input[ToastFun](error(
          "Expected function body.", equal_sign.src))
      ToastExpr.body(children)
    }

  parsed(ToastFun { name, params = params.to_slice(), return_type, body })
}

fun to_toast(bacon: Bacon): Result[Toast, Error] {
  bacon.line.is_empty() or panic("to_toast was given non-root Bacon")

  var defs = list[ToastDef]()
  for bacon in bacon.children do {
    if bacon.parse_import()? is some(import_) then {
      defs.&.push(ToastDef.import_(import_))
      continue
    }
    if bacon.parse_export()? is some(export) then {
      defs.&.push(ToastDef.export(export))
      continue
    }
    if bacon.parse_type_def()? is some(def) then {
      defs.&.push(ToastDef.type(def))
      continue
    }
    if bacon.parse_fun_def()? is some(def) then {
      defs.&.push(ToastDef.fun_(def))
      continue
    }
    if bacon.line.starts_with("#") then continue

    return error[Toast, Error](error("Couldn't parse line.", bacon.src))
  }

  ok[Toast, Error](Toast { defs = defs.to_slice() })
}
