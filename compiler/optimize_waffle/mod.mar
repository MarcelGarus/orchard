| Optimizing the Waffle  

import ../plum.mar
import inline.mar
import tree_shake.mar

fun optimize(fun_: WaffleFun): WaffleFun {
  var locals = list[WaffleExpr]()
  for local in fun_.locals do locals.&.push(local)
  var locals = locals.to_slice()

  var body = fun_.body.inline(locals.&)
  | eprintln("Inlined body: {body}")

  var body = body.tree_shake(locals.&)
  | eprintln("Tree shaked body: {body}")

  WaffleFun { locals, body }
}

fun optimize(waffle: Waffle): Waffle {
  var funs = map[String, WaffleFun]()
  for fun_ in waffle.funs do {
    eprintln("optimizing {fun_.key}")
    funs.&.put(fun_.key, fun_.value.optimize())
  }
  Waffle { funs }
}
