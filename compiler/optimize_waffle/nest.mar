import mod.mar

fun count_references(
  expr: WaffleExpr, dag: Dag[WaffleExpr], out: &Map[Id, Int]
) {
  switch expr.kind
  case param {}
  case padding {}
  case byte {}
  case int {}
  case local(id) {
    var count = out.get_ref_or_put_default(id, 0)
    count.* = count.* + 1
  }
  case aggregate(aggregate)
    for part in aggregate do part.count_references(dag, out)
  case member(member) member.of.count_references(dag, out)
  case switch_(switch_) {
    switch_.byte.count_references(dag, out)
    for case_ in switch_.cases do case_.count_references(dag, out)
  }
  case call(call) call.args.count_references(dag, out)
  case call_indirect(call) {
    call.function_ptr.count_references(dag, out)
    call.args.count_references(dag, out)
  }
  case function_ptr(signature) {}
  case add(args) args.count_references(dag, out)
  case sub(args) args.count_references(dag, out)
  case mul(args) args.count_references(dag, out)
  case div(args) args.count_references(dag, out)
  case mod(args) args.count_references(dag, out)
  case compare_zero(arg) arg.count_references(dag, out)
  case and_(args) args.count_references(dag, out)
  case or_(args)  args.count_references(dag, out)
  case xor(args)  args.count_references(dag, out)
  case malloc(size) size.count_references(dag, out)
  case free(args) args.count_references(dag, out)
  case load(ptr) ptr.count_references(dag, out)
  case store(store) {
    store.ptr.count_references(dag, out)
    store.value.count_references(dag, out)
  }
  case crash(args) args.count_references(dag, out)
}
fun count_references(
  body: WaffleBody, dag: Dag[WaffleExpr], out: &Map[Id, Int]
) {
  for local in body.locals do dag.get(local).count_references(dag, out)
  body.returns.count_references(dag, out)
}

fun must_have_been_used(used: Bool): Result[Nothing, Nothing] {
  if used then ok[Nothing, Nothing]({}) else error[Nothing, Nothing]({})
}

| Tries to nest the local inside the expression. If an impure expression happens
| before the previous local is used (such as a call, store, etc.), then we
| cannot nest the previous local directly in here because that would change the
| order of impure expressions. In that case, this function returns none.
fun try_nest_local(
  expr: WaffleExpr, dag: Dag[WaffleExpr], local: Id, used: &Bool
): Result[WaffleExpr, Nothing] {
  var kind =
    switch expr.kind
    case param unreachable()
    case padding(amount) WaffleExprKind.padding(amount)
    case byte(byte) WaffleExprKind.byte(byte)
    case int(int) WaffleExprKind.int(int)
    case local(id) {
      if id == local then {
        used.* = true
        return ok[WaffleExpr, Nothing](dag.get(id))
      } else
        WaffleExprKind.local(id)
    }
    case aggregate(aggregate) {
      var parts = list[WaffleExpr]()
      for part in aggregate do
        parts.&.push(part.try_nest_local(dag, local, used)?)
      WaffleExprKind.aggregate(parts.to_slice())
    }
    case member(member)
      WaffleExprKind.member(WaffleMember {
        of = member.of.try_nest_local(dag, local, used)?.put_on_heap(),
        offset = member.offset,
      })
    case switch_(switch_) {
      var byte = switch_.byte.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.switch_(WaffleSwitch {
        byte = byte.put_on_heap(), cases = switch_.cases
      })
    }
    case call(call) {
      var args = call.args.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.call(WaffleCall {
        function = call.function, args = args.put_on_heap()
      })
    }
    case call_indirect(call) {
      var function_ptr = call.function_ptr.try_nest_local(dag, local, used)?
      var args = call.args.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.call_indirect(WaffleCallIndirect {
        function_ptr = function_ptr.put_on_heap(), args = args.put_on_heap()
      })
    }
    case function_ptr(signature) WaffleExprKind.function_ptr(signature)
    case add(args)
      WaffleExprKind.add(args.try_nest_local(dag, local, used)?.put_on_heap())
    case sub(args)
      WaffleExprKind.sub(args.try_nest_local(dag, local, used)?.put_on_heap())
    case mul(args)
      WaffleExprKind.mul(args.try_nest_local(dag, local, used)?.put_on_heap())
    case div(args)
      WaffleExprKind.div(args.try_nest_local(dag, local, used)?.put_on_heap())
    case mod(args)
      WaffleExprKind.mod(args.try_nest_local(dag, local, used)?.put_on_heap())
    case compare_zero(arg)
      WaffleExprKind.compare_zero(
        arg.try_nest_local(dag, local, used)?.put_on_heap()
      )
    case and_(args)
      WaffleExprKind.and_(args.try_nest_local(dag, local, used)?.put_on_heap())
    case or_(args)
      WaffleExprKind.or_(args.try_nest_local(dag, local, used)?.put_on_heap())
    case xor(args)
      WaffleExprKind.xor(args.try_nest_local(dag, local, used)?.put_on_heap())
    case malloc(size) {
      var size = size.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.malloc(size.put_on_heap())
    }
    case free(free) {
      var free = free.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.free(free.put_on_heap())
    }
    case load(ptr) {
      var ptr = ptr.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.load(ptr.put_on_heap())
    }
    case store(store) {
      var ptr = store.ptr.try_nest_local(dag, local, used)?
      var value = store.value.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.store(WaffleStore {
        ptr = ptr.put_on_heap(), value = value.put_on_heap()
      })
    }
    case crash(args) {
      var args = args.try_nest_local(dag, local, used)?
      used.must_have_been_used()?
      WaffleExprKind.crash(args.put_on_heap())
    }

  ok[WaffleExpr, Nothing](WaffleExpr {
    kind, size = expr.size, alignment = expr.alignment
  })
}

fun try_nest_local(
  expr: WaffleExpr, previous: Maybe[Id],
  dag: Dag[WaffleExpr], num_references: Map[Id, Int],
): Maybe[WaffleExpr] {
  var previous = previous or return none[WaffleExpr]()
  if dag.get(previous).kind is param then return none[WaffleExpr]()
  {num_references.get_maybe(previous) or 0} == 1 or return none[WaffleExpr]()

  var used = false
  var new_version =
    expr.try_nest_local(dag, previous, used.&)
      or return none[WaffleExpr]()
  if used then some(new_version) else none[WaffleExpr]()
}

| If (pure or unpure) locals are defined and then immediately used without an
| impure expression in between, we move them.
fun nest_locals(body: WaffleBody, dag: &Dag[WaffleExpr]): WaffleBody {
  var num_references = map[Id, Int]()
  body.count_references(dag.*, num_references.&)

  var locals = list[Id]()
  for i in 0..body.locals.len do {
    var local = body.locals.get(i)
    locals.&.push(local)

    if dag.get(local)
      .try_nest_local(locals.get_maybe(i - 1), dag.*, num_references)
    is some(new_version)
    then {
      dag.set(local, new_version)
      locals.&.pop() | pop current
      locals.&.pop() | pop previous
      locals.&.push(local) | push current
    }
  }

  var returns = body.returns
  if returns.try_nest_local(locals.last_maybe(), dag.*, num_references)
  is some(new_version)
  then {
    returns = new_version
    locals.&.pop().ignore()
  }

  WaffleBody { locals = locals.to_slice(), returns }
}


| Tries to nest the param inside the expression. If any stack stuff happens
| before the param is used (such as a push, etc.), then we cannot nest it
| directly in here. In that case, this function returns none.
fun try_nest_param(
  expr: WaffleExpr,
  dag: Dag[WaffleExpr], | TODO: needed?
  used: &Bool,
): Result[WaffleExpr, Nothing] {
  var kind =
    switch expr.kind
    case param unreachable()
    case padding(amount) {
      used.must_have_been_used()?
      WaffleExprKind.padding(amount)
    }
    case byte(byte) {
      used.must_have_been_used()?
      WaffleExprKind.byte(byte)
    }
    case int(int) {
      used.must_have_been_used()?
      WaffleExprKind.int(int)
    }
    case local(id) {
      if id == id(0) then {
        used.* = true
        WaffleExprKind.param
      } else
        return error[WaffleExpr, Nothing]({})
    }
    case aggregate(aggregate) {
      var parts = list[WaffleExpr]()
      for part in aggregate do {
        parts.&.push(part.try_nest_param(dag, used)?)
        used.must_have_been_used()?
      }
      WaffleExprKind.aggregate(parts.to_slice())
    }
    case member(member) {
      var of = member.of.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.member(WaffleMember {
        of = of.put_on_heap(), offset = member.offset
      })
    }
    case switch_(switch_) {
      var byte = switch_.byte.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.switch_(WaffleSwitch {
        byte = byte.put_on_heap(), cases = switch_.cases
      })
    }
    case call(call) {
      var args = call.args.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.call(WaffleCall {
        function = call.function, args = args.put_on_heap()
      })
    }
    case call_indirect(call) {
      var function_ptr =
        call.function_ptr.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.call_indirect(WaffleCallIndirect {
        function_ptr = function_ptr.put_on_heap(), args = call.args
      })
    }
    case function_ptr(signature) {
      used.must_have_been_used()?
      WaffleExprKind.function_ptr(signature)
    }
    case add(args)
      WaffleExprKind.add(args.try_nest_param(dag, used)?.put_on_heap())
    case sub(args)
      WaffleExprKind.sub(args.try_nest_param(dag, used)?.put_on_heap())
    case mul(args)
      WaffleExprKind.mul(args.try_nest_param(dag, used)?.put_on_heap())
    case div(args)
      WaffleExprKind.div(args.try_nest_param(dag, used)?.put_on_heap())
    case mod(args)
      WaffleExprKind.mod(args.try_nest_param(dag, used)?.put_on_heap())
    case compare_zero(arg)
      WaffleExprKind.compare_zero(arg.try_nest_param(dag, used)?.put_on_heap())
    case and_(args)
      WaffleExprKind.and_(args.try_nest_param(dag, used)?.put_on_heap())
    case or_(args)
      WaffleExprKind.or_(args.try_nest_param(dag, used)?.put_on_heap())
    case xor(args)
      WaffleExprKind.xor(args.try_nest_param(dag, used)?.put_on_heap())
    case malloc(size) {
      var size = size.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.malloc(size.put_on_heap())
    }
    case free(free) {
      var free = free.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.free(free.put_on_heap())
    }
    case load(ptr) {
      var ptr = ptr.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.load(ptr.put_on_heap())
    }
    case store(store) {
      var ptr = store.ptr.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.store(WaffleStore {
        ptr = ptr.put_on_heap(), value = store.value
      })
    }
    case crash(args) {
      var args = args.try_nest_param(dag, used)?
      used.must_have_been_used()?
      WaffleExprKind.crash(args.put_on_heap())
    }

  ok[WaffleExpr, Nothing](WaffleExpr {
    kind, size = expr.size, alignment = expr.alignment
  })
}

fun nest_param(fun_: WaffleFun): WaffleFun {
  var num_references = map[Id, Int]()
  fun_.body.count_references(fun_.dag, num_references.&)
  if {num_references.get_maybe(id(0)) or 0} != 1 then return fun_

  var locals = list[Id]()
  var param_used = false
  for local in fun_.body.locals.without_first(1) do {
    locals.&.push(local)
    if not(param_used) then {
      var new_version =
        fun_.dag.get(local).try_nest_param(fun_.dag, param_used.&) or return fun_
      if param_used then fun_.dag.&.set(local, new_version)
    }
  }

  var returns = fun_.body.returns
  if not(param_used) then {
    returns = returns.try_nest_param(fun_.dag, param_used.&) or return fun_
    if not(param_used) then return fun_
  }

  WaffleFun {
    dag = fun_.dag, body = WaffleBody { locals = locals.to_slice(), returns }
  }
}
