import mod.mar

fun should_inline(expr: WaffleExpr): Bool {
  switch expr.kind
  case param false
  case padding true
  case byte true
  case int true
  case local true
  case aggregate(parts) {
    for part in parts do if not(part.should_inline()) then return false
    true
  }
  case member(member) member.of.should_inline()
  case switch_(switch_) {
    false | TODO
  }
  case call false
  case call_indirect false
  case function_ptr true
  case add(args) { args.should_inline() }
  case sub(args) { args.should_inline() }
  case mul(args) { args.should_inline() }
  case div(args) { args.should_inline() }
  case mod(args) { args.should_inline() }
  case compare_zero(arg) { arg.should_inline() }
  case and_(args)        { args.should_inline() }
  case or_(args)         { args.should_inline() }
  case xor(args)         { args.should_inline() }
  case malloc false
  case free false
  case load false
  case store false
  case crash false
}

fun inline(expr: WaffleExpr, locals: &Slice[WaffleExpr]): WaffleExpr {
  var kind =
    switch expr.kind
    case param unreachable()
    case padding(amount) WaffleExprKind.padding(amount)
    case byte(byte) WaffleExprKind.byte(byte)
    case int(int) WaffleExprKind.int(int)
    case local(local) {
      var referenced = locals.get(local.index)
      if referenced.should_inline() then
        return referenced
      else
        WaffleExprKind.local(local)
    }
    case aggregate(aggregate) {
      var parts = list[WaffleExpr]()
      for part in aggregate do
        parts.&.push(part.inline(locals))
      WaffleExprKind.aggregate(parts.to_slice())
    }
    case member(member) {
      WaffleExprKind.member(WaffleMember {
        of = member.of.inline(locals).put_on_heap(),
        offset = member.offset,
      })
    }
    case switch_(switch_) {
      var cases = list[WaffleBody]()
      for case_ in switch_.cases do
        cases.&.push(case_.inline(locals))
      WaffleExprKind.switch_(WaffleSwitch {
        byte = switch_.byte.inline(locals).put_on_heap(),
        cases = cases.to_slice(),
      })
    }
    case call(call) {
      WaffleExprKind.call(WaffleCall {
        function = call.function,
        args = call.args.inline(locals).put_on_heap(),
      })
    }
    case call_indirect(call) {
      WaffleExprKind.call_indirect(WaffleCallIndirect {
        function_ptr = call.function_ptr.inline(locals).put_on_heap(),
        args = call.args.inline(locals).put_on_heap(),
      })
    }
    case function_ptr(signature) WaffleExprKind.function_ptr(signature)
    case add(args) { WaffleExprKind.add(args.inline(locals).put_on_heap()) }
    case sub(args) { WaffleExprKind.sub(args.inline(locals).put_on_heap()) }
    case mul(args) { WaffleExprKind.mul(args.inline(locals).put_on_heap()) }
    case div(args) { WaffleExprKind.div(args.inline(locals).put_on_heap()) }
    case mod(args) { WaffleExprKind.mod(args.inline(locals).put_on_heap()) }
    case compare_zero(arg) {
      WaffleExprKind.compare_zero(arg.inline(locals).put_on_heap())
    }
    case and_(args)        { WaffleExprKind.and_(args.inline(locals).put_on_heap()) }
    case or_(args)         { WaffleExprKind.or_(args.inline(locals).put_on_heap()) }
    case xor(args)         { WaffleExprKind.xor(args.inline(locals).put_on_heap()) }
    case malloc(size) { WaffleExprKind.malloc(size.inline(locals).put_on_heap()) }
    case free(free) { WaffleExprKind.free(free.inline(locals).put_on_heap()) }
    case load(ptr) {
      WaffleExprKind.load(ptr.inline(locals).put_on_heap())
    }
    case store(store) {
      WaffleExprKind.store(WaffleStore {
        ptr = store.ptr.inline(locals).put_on_heap(),
        value = store.value.inline(locals).put_on_heap(),
      })
    }
    case crash(args)
      WaffleExprKind.crash(args.inline(locals).put_on_heap())
  WaffleExpr { kind, size = expr.size, alignment = expr.alignment }
}

| Assumes parameters to be in the mapping.
fun inline(
  body: WaffleBody, locals: &Slice[WaffleExpr],
): WaffleBody {
  for local in body.locals do
    locals.set(local.index, locals.get(local.index).inline(locals))
  WaffleBody {
    locals = body.locals, returns = body.returns.inline(locals)
  }
}
