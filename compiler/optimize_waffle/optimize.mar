import mod.mar

fun can_copy(expr: WaffleExpr): Bool {
  switch expr.kind
  case param false
  case padding true
  case byte true
  case int true
  case local true
  case aggregate(parts) {
    for part in parts do if not(part.can_copy()) then return false
    true
  }
  case member(member) member.of.can_copy()
  case switch_(switch_) {
    false | TODO
  }
  case call false
  case call_indirect false
  case function_ptr true
  case add(args) { args.can_copy() }
  case sub(args) { args.can_copy() }
  case mul(args) { args.can_copy() }
  case div(args) { args.can_copy() }
  case mod(args) { args.can_copy() }
  case compare_zero(arg) { arg.can_copy() }
  case and_(args)        { args.can_copy() }
  case or_(args)         { args.can_copy() }
  case xor(args)         { args.can_copy() }
  case malloc false
  case free false
  case load false
  case store false
  case store_multiple false
  case crash false
}

| Optimizes the expression. This function assumes that all expressions that this
| expressions depends on are in the dag and already optimized.
fun optimize(expr: WaffleExpr, dag: &Dag[WaffleExpr]): WaffleExpr {
  var kind =
    switch expr.kind
    case param WaffleExprKind.param
    case padding(amount) WaffleExprKind.padding(amount)
    case byte(byte) WaffleExprKind.byte(byte)
    case int(int) WaffleExprKind.int(int)
    case local(local) {
      var referenced = dag.get(local)
      if referenced.can_copy() then
        return referenced
      else
        WaffleExprKind.local(local)
    }
    case aggregate(parts) {
      | Optimize parts individually.
      var parts_1 = list[WaffleExpr]()
      for part in parts do
        parts_1.&.push(part.optimize(dag))

      | Remove zero-sized pure parts.
      var parts_2 = list[WaffleExpr]()
      for part in parts_1 do {
        if part.size == 0 and part.is_pure() then continue
        parts_2.&.push(part)
      }

      | Merge adjacent members of the same local.
      | {@0.0:8, @0.8:8, foo} -> {@0.0:16, foo}
      var parts_3 = list[WaffleExpr]()
      for part in parts_2 do {
        parts_3.&.push(part)
        var member = part.kind.member or continue
        var local = member.of.kind.local or continue
        var previous = parts_3.get_maybe(parts_3.len - 2) or continue
        var previous_member = previous.kind.member or continue
        var previous_local = previous_member.of.kind.local or continue
        previous_local == local or continue
        previous_member.offset + previous.size == member.offset or continue
        | Merge them!
        parts_3.&.pop()
        parts_3.&.pop()
        parts_3.&.push(WaffleExpr {
          kind = WaffleExprKind.member(WaffleMember {
            of = member.of, offset = previous_member.offset
          }),
          size = previous.size + part.size,
          alignment = max(previous.alignment, part.alignment),
        }.optimize(dag))
      }

      if parts_3.len == 1 then
        return parts_3.get(0)
      else
        WaffleExprKind.aggregate(parts_3.to_slice())
    }
    case member(member) {
      var of = member.of.optimize(dag)
      if of.size == expr.size then {
        member.offset == 0 or panic("weird member")
        return of
      }

      WaffleExprKind.member(WaffleMember {
        of = of.put_on_heap(),
        offset = member.offset,
      })
    }
    case switch_(switch_) {
      var cases = list[WaffleBody]()
      for case_ in switch_.cases do
        cases.&.push(case_.optimize(dag))
      WaffleExprKind.switch_(WaffleSwitch {
        byte = switch_.byte.optimize(dag).put_on_heap(),
        cases = cases.to_slice(),
      })
    }
    case call(call) {
      WaffleExprKind.call(WaffleCall {
        function = call.function,
        args = call.args.optimize(dag).put_on_heap(),
      })
    }
    case call_indirect(call) {
      WaffleExprKind.call_indirect(WaffleCallIndirect {
        function_ptr = call.function_ptr.optimize(dag).put_on_heap(),
        args = call.args.optimize(dag).put_on_heap(),
      })
    }
    case function_ptr(signature) WaffleExprKind.function_ptr(signature)
    case add(args) { WaffleExprKind.add(args.optimize(dag).put_on_heap()) }
    case sub(args) { WaffleExprKind.sub(args.optimize(dag).put_on_heap()) }
    case mul(args) { WaffleExprKind.mul(args.optimize(dag).put_on_heap()) }
    case div(args) { WaffleExprKind.div(args.optimize(dag).put_on_heap()) }
    case mod(args) { WaffleExprKind.mod(args.optimize(dag).put_on_heap()) }
    case compare_zero(arg) {
      WaffleExprKind.compare_zero(arg.optimize(dag).put_on_heap())
    }
    case and_(args)        { WaffleExprKind.and_(args.optimize(dag).put_on_heap()) }
    case or_(args)         { WaffleExprKind.or_(args.optimize(dag).put_on_heap()) }
    case xor(args)         { WaffleExprKind.xor(args.optimize(dag).put_on_heap()) }
    case malloc(size) { WaffleExprKind.malloc(size.optimize(dag).put_on_heap()) }
    case free(free) { WaffleExprKind.free(free.optimize(dag).put_on_heap()) }
    case load(ptr) {
      WaffleExprKind.load(ptr.optimize(dag).put_on_heap())
    }
    case store(store) {
      WaffleExprKind.store(WaffleStore {
        ptr = store.ptr.optimize(dag).put_on_heap(),
        value = store.value.optimize(dag).put_on_heap(),
      })
    }
    case store_multiple(store) {
      WaffleExprKind.store_multiple(WaffleStoreMultiple {
        ptr = store.ptr.optimize(dag).put_on_heap(),
        times = store.times.optimize(dag).put_on_heap(),
        value = store.value.optimize(dag).put_on_heap(),
      })
    }
    case crash(args)
      WaffleExprKind.crash(args.optimize(dag).put_on_heap())
  WaffleExpr { kind, size = expr.size, alignment = expr.alignment }
}

fun optimize(body: WaffleBody, dag: &Dag[WaffleExpr]): WaffleBody {
  for local in body.locals do
    dag.set(local, dag.get(local).optimize(dag))

  var body = WaffleBody {
    locals = body.locals,
    returns = body.returns.optimize(dag)
  }
  var body = body.tree_shake(dag.*)
  var body = body.nest_locals(dag)
  body
}
