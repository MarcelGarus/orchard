| Ground Builder  
|
| In order to make it easy to generate Ground byte code and for this to not get
| out of sync with our comptime model of the stack, we have a GroundBuilder. Its
| emit function pushes an instruction to the instruction buffer and also updates
| the stack model (except some instructions where you have to manually adjust
| the stack).

| TODO: Do the remove-code-after-crash optimization already in the Waffle so we
| don't just silently do no-ops here.

import mod.mar

struct GroundBuilder {
  instructions: &List[GroundInstruction],
  patches: &List[Patch],
}
struct Patch { where: Int, what: PatchWhat }
enum PatchWhat {
  call: String,
  jump: String,
  push_indirect: String,
}

struct GroundContext {
  fun_: WaffleFun,
  waffle: Waffle,
}
struct FlowGroundBuilder {
  ground: &GroundBuilder,
  context: GroundContext,
  | It doesn't seem super clean to have a has_diverged field that indicates
  | whether stack_mapping and stack_size make any sense. This could be properly
  | modeled using an enum. However, that would lead to lots of more bloated code
  | below.
  stack_mapping: Map[Id, Int],
  stack_size: Int,
  has_diverged: Bool,
}

fun split(builder: FlowGroundBuilder): FlowGroundBuilder {
  FlowGroundBuilder {
    ground = builder.ground,
    context = builder.context,
    stack_mapping = builder.stack_mapping.copy(),
    stack_size = builder.stack_size,
    has_diverged = false,
  }
}
fun join(builder: &FlowGroundBuilder, case_builders: Slice[FlowGroundBuilder]) {
  var stack_size = none[Int]()
  for case_ in case_builders do
    if not(case_.has_diverged) then {
      switch stack_size
      case some(s) if s != case_.stack_size then panic("inconsistent")
      case none stack_size = some(case_.stack_size)
    }

  switch stack_size
  case some(s) builder.stack_size = s
  case none {
    builder.stack_size = 99999999
    builder.has_diverged = true
  }
}

fun add_mapping(builder: &FlowGroundBuilder, id: Id, absolute_offset: Int) {
  builder.stack_mapping.&.put(id, absolute_offset)
}

fun assert_8_bytes_aligned(builder: &FlowGroundBuilder) {
  if not(builder.stack_size.is_multiple_of(8)) then
    panic("stack is not aligned to 8 bytes")
}

| Functions for all Ground instructions.

fun add_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.add_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun sub_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.sub_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun signed_mul_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.signed_mul_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun signed_div_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.signed_div_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun signed_mod_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.signed_mod_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun compare_zero_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.compare_zero_8)
  builder.stack_size = builder.stack_size - 8 + 1
}
fun and_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.and_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun or_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.or_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun xor_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.xor_8)
  builder.stack_size = builder.stack_size - 8 - 8 + 8
}
fun lower_byte(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.lower_byte)
  builder.stack_size = builder.stack_size - 8 + 1
}
fun byte_to_int(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.byte_to_int)
  builder.stack_size = builder.stack_size - 1 + 8
  builder.assert_8_bytes_aligned()
}
fun push_padding(builder: &FlowGroundBuilder, amount: Byte) {
  if amount.to_int() == 0 then return {}
  builder.ground.instructions.push(GroundInstruction.push_padding(amount))
  builder.stack_size = builder.stack_size + amount.to_int()
}
fun push_1(builder: &FlowGroundBuilder, value: Byte) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.push_1(value))
  builder.stack_size = builder.stack_size + 1
}
fun push_8(builder: &FlowGroundBuilder, value: Int) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.push_8(value))
  builder.stack_size = builder.stack_size + 8
}
fun push_1_from_stack(builder: &FlowGroundBuilder, start: Int) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.push_1_from_stack(
    builder.stack_size - start - 1
  ))
  builder.stack_size = builder.stack_size + 1
}
fun push_8_from_stack(builder: &FlowGroundBuilder, start: Int) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.push_8_from_stack(
    builder.stack_size - start - 8
  ))
  builder.stack_size = builder.stack_size + 8
}
fun pop(builder: &FlowGroundBuilder, amount: Byte) {
  if amount.to_int() == 0 then return {}
  builder.ground.instructions.push(GroundInstruction.pop(amount))
  builder.stack_size = builder.stack_size - amount.to_int()
}
fun pop_below_top(builder: &FlowGroundBuilder, skip: Int, amount: Byte) {
  if amount.to_int() == 0 then return {}
  if skip == 0 then return builder.pop(amount)
  builder.ground.instructions.push(GroundInstruction.pop_below_top(tuple(skip, amount)))
  builder.stack_size = builder.stack_size - amount.to_int()
}
fun malloc_8_aligned(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.malloc_8_aligned)
  builder.stack_size = builder.stack_size - 8 + 8
  builder.assert_8_bytes_aligned()
}
fun free_8_aligned(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.free_8_aligned)
  builder.stack_size = builder.stack_size - 8 - 8
  builder.assert_8_bytes_aligned()
}
fun store_1(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.store_1)
  builder.stack_size = builder.stack_size - 1 - 8
  builder.assert_8_bytes_aligned()
}
fun store_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.store_8)
  builder.stack_size = builder.stack_size - 8 - 8
}
fun load_1(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.load_1)
  builder.stack_size = builder.stack_size - 8 + 1
}
fun load_8(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.load_8)
  builder.stack_size = builder.stack_size - 8 + 8
}
fun store_bytes(builder: &FlowGroundBuilder, bytes: Slice[Byte]) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.store_bytes(bytes))
  builder.stack_size = builder.stack_size - 8
}
fun crash(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.crash)
  builder.stack_size = 999999999 | "invalidates" the stack
  builder.has_diverged = true
}
fun jump(builder: &FlowGroundBuilder, target: Int) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.jump(target))
}
fun jump_placeholder(builder: &FlowGroundBuilder): Int {
  if builder.has_diverged then panic("we have already crashed")
  var index = builder.ground.instructions.len
  builder.ground.instructions.push(GroundInstruction.jump(0))
  index
}
fun patch_jump(builder: &FlowGroundBuilder, index: Int, target: Int) {
  builder.ground.instructions.set(index, GroundInstruction.jump(target))
}
fun tail_call(builder: &FlowGroundBuilder, signature: String) {
  if builder.has_diverged then return {}
  var index = builder.ground.instructions.len
  builder.ground.instructions.push(GroundInstruction.jump(0)) | placeholder
  builder.ground.patches.push(Patch {
    where = index, what = PatchWhat.jump(signature)
  })
  builder.stack_size = 999999999 | "invalidates" the stack
  builder.has_diverged = true
}
fun jump_table_placeholder(builder: &FlowGroundBuilder): Int {
  if builder.has_diverged then panic("we have already crashed")
  var index = builder.ground.instructions.len
  builder.ground.instructions.push(GroundInstruction.jump_table(empty_slice[Int]()))
  builder.stack_size = builder.stack_size - 1
  index
}
fun patch_jump_table(builder: &FlowGroundBuilder, index: Int, targets: Slice[Int]) {
  builder.ground.instructions.set(index, GroundInstruction.jump_table(targets))
}
fun call(builder: &FlowGroundBuilder, signature: String, fun_stack_diff: Int) {
  if builder.has_diverged then return {}
  var index = builder.ground.instructions.len
  builder.ground.instructions.push(GroundInstruction.call(0)) | placeholder
  builder.stack_size = builder.stack_size + fun_stack_diff
  builder.ground.patches.push(Patch {
    where = index, what = PatchWhat.call(signature)
  })
}
fun push_indirect(builder: &FlowGroundBuilder, signature: String) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  var index = builder.ground.instructions.len
  builder.ground.instructions.push(GroundInstruction.push_indirect(0)) | placeholder
  builder.stack_size = builder.stack_size + 8
  builder.ground.patches.push(Patch {
    where = index, what = PatchWhat.push_indirect(signature)
  })
}
fun call_indirect(
  builder: &FlowGroundBuilder, pop_amount: Byte, fun_stack_diff: Int
) {
  if builder.has_diverged then return {}
  builder.assert_8_bytes_aligned()
  builder.ground.instructions.push(GroundInstruction.call_indirect(pop_amount))
  builder.stack_size =
    builder.stack_size - 8 - pop_amount.to_int() + fun_stack_diff
}
fun return_(builder: &FlowGroundBuilder) {
  if builder.has_diverged then return {}
  builder.ground.instructions.push(GroundInstruction.return_)
}

| Macro instructions that actually consist of multiple instructions

fun push_padding(builder: &FlowGroundBuilder, amount: Int) {
  if builder.has_diverged then return {}
  loop if amount < 256 then break else {
    builder.push_padding(255.lower_byte())
    amount = amount - 255
  }
  builder.push_padding(amount.lower_byte())
}
fun pop(builder: &FlowGroundBuilder, amount: Int) {
  if builder.has_diverged then return {}
  loop if amount < 256 then break else {
    builder.pop(255.lower_byte())
    amount = amount - 255
  }
  builder.pop(amount.lower_byte())
}
fun pop_below_top(builder: &FlowGroundBuilder, skip: Int, amount: Int) {
  if builder.has_diverged then return {}
  loop if amount < 256 then break else {
    builder.pop_below_top(skip, 255.lower_byte())
    amount = amount - 255
  }
  builder.pop_below_top(skip, amount.lower_byte())
}

fun align_to(builder: &FlowGroundBuilder, alignment: Int): Int {
  if builder.has_diverged then return 0
  var padding = builder.stack_size.round_up_to_multiple_of(alignment)
    - builder.stack_size
  builder.push_padding(padding)
  padding
}
fun copy_from_stack(builder: &FlowGroundBuilder, start: Int, size: Int) {
  if builder.has_diverged then return {}
  if start + size > builder.stack_size then
    panic("called copy_from_stack, but {start} + {size} > {builder.stack_size}")
  var cursor = 0
  loop if cursor + 8 > size then break else {
    builder.push_8_from_stack(start + cursor)
    cursor = cursor + 8
  }
  loop if cursor == size then break else {
    builder.push_1_from_stack(start + cursor)
    cursor = cursor + 1
  }
}
fun copy_from_stack(builder: &FlowGroundBuilder, id: Id, size: Int) {
  if builder.has_diverged then return {}
  builder.copy_from_stack(builder.stack_mapping.get(id), size)
}
fun add_8(builder: &FlowGroundBuilder, immediate: Int) {
  if builder.has_diverged then return {}
  if immediate != 0 then {
    builder.push_8(immediate)
    builder.add_8()
  }
}
