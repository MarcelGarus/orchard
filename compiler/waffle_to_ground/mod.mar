import ../plum.mar
import builder.mar

fun to_ground(waffle: Waffle): Ground {
  var instructions = list[GroundInstruction]()
  var signature_to_offset = map[String, Int]()
  var patches = list[Patch]()
  var builder = GroundBuilder {
    instructions = instructions.&, patches = patches.&
  }

  { | Compile the entry point.
    signature_to_offset.&.put(waffle.entry_point, 0)
    var fun_ = waffle.funs.get(waffle.entry_point)
    fun_.compile(builder.&, GroundContext { waffle, fun_ })
  }

  | Compile all other functions.
  for fun_ in waffle.funs do {
    if fun_.key == waffle.entry_point then continue
    signature_to_offset.&.put(fun_.key, instructions.len)
    fun_.value.compile(builder.&, GroundContext { waffle, fun_ = fun_.value })
  }

  for patch in patches do {
    var patched =
      switch patch.what
      case call(target) GroundInstruction.call(signature_to_offset.get(target))
      case jump(target) GroundInstruction.jump(signature_to_offset.get(target))
      case push_indirect(target)
        GroundInstruction.push_indirect(signature_to_offset.get(target))
    instructions.&.set(patch.where, patched)
  }

  Ground { instructions = instructions.to_slice() }
}
fun compile(fun_: WaffleFun, ground: &GroundBuilder, context: GroundContext) {
  var params = id(0)
  var builder = FlowGroundBuilder {
    ground, context,
    stack_mapping = map[Id, Int](), stack_size = 0, has_diverged = false,
  }.&

  | Now, the stack contains the params.
  fun_.body.compile(builder, true)
  if builder.has_diverged then return {}  | crash or there was a tail call

  | Now, the stack contains the return value.
  builder.return_()
}

fun compile(
  body: WaffleBody, builder: &FlowGroundBuilder, is_last_in_fun: Bool
) {
  var stack_size_at_body_start = builder.stack_size

  for local in body.locals do {
    if builder.has_diverged then return {}
    var expr = builder.context.fun_.dag.get(local)
    builder.align_to(expr.alignment)
    builder.add_mapping(local, builder.stack_size)
    expr.compile(builder, false)
    builder.stack_size >= builder.stack_mapping.get(local) or
      panic("removed too much from the stack")
  }

  if builder.has_diverged then return {}
  builder.align_to(body.returns.alignment)
  var locals_size = builder.stack_size - stack_size_at_body_start
  body.returns.compile(builder, is_last_in_fun)

  var return_value_size = body.returns.size

  if builder.has_diverged then return {}
  builder.pop_below_top(return_value_size, locals_size)
}

| Compiles an expression. Assumes that the stack is already aligned for the
| expression.
fun compile(
  expr: WaffleExpr, builder: &FlowGroundBuilder, is_last_in_fun: Bool
) {
  | eprintln("Compiling {expr.debug()}")
  | if not(builder.stack_size.is_multiple_of(expr.alignment)) then
  |   panic("stack not aligned for expr (stack size is {builder.stack_size})")

  switch expr.kind
  case param builder.stack_size = builder.stack_size + expr.size
  case padding(amount) builder.push_padding(amount)
  case byte(byte) builder.push_1(byte)
  case int(int) builder.push_8(int)
  case local(local) builder.copy_from_stack(local, expr.size)
  case aggregate(aggregate) {
    for field in aggregate.iter().enumerate() do
      field.item.compile(
        builder, if field.index == aggregate.len then is_last_in_fun else false
      )
  }
  case member(member) {
    | Quite often, you see things like @0.0:8 in the Waffle â€“ for example, if
    | we have an aggregate representing the arguments of a function and we want
    | to get a single argument, we extract that argument.
    | Lowering this in a naive way (first lowering @0, then lowering the member
    | access) leads to crazy amounts of copying: We copy the entire local
    | aggregate to the top of the stack, just to then discard the majority to
    | extract the field we want.
    | So, here, we special-case that pattern.
    if member.of.kind is local(local) then {
      builder.copy_from_stack(
        builder.stack_mapping.get(local) + member.offset,
        expr.size,
      )
    } else {
      var padding = builder.align_to(member.of.alignment)
      member.of.compile(builder, false)
      var amount_before_member = padding + member.offset
      var amount_after_member  = member.of.size - expr.size - member.offset
      builder.pop(amount_after_member)
      builder.pop_below_top(expr.size, amount_before_member)
    }
  }
  case switch_(switch_) {
    switch_.byte.compile(builder, false)

    var jump_table_index = builder.jump_table_placeholder()
    var stack_size_at_start_of_case = builder.stack_size

    var table = list[Int]()
    var end_jumps = list[Int]()
    var case_builders = list[FlowGroundBuilder]()
    for case_ in switch_.cases do {
      table.&.push(builder.ground.instructions.len)
      var builder = builder.split()
      case_.compile(builder.&, is_last_in_fun)
      if not(builder.has_diverged) then
        end_jumps.&.push(builder.&.jump_placeholder())
      case_builders.&.push(builder)
    }
    var end = builder.ground.instructions.len
    for jump in end_jumps do builder.patch_jump(jump, end)
    builder.patch_jump_table(jump_table_index, table.to_slice())
    builder.join(case_builders.to_slice())
  }
  case call(call) {
    var padding = builder.align_to(call.args.alignment)
    call.args.compile(builder, false)
    if is_last_in_fun and padding == 0 then {
      builder.pop_below_top(call.args.size, builder.stack_size - call.args.size)
      builder.tail_call(call.function)
    } else {
      builder.call(call.function, 0 - call.args.size + expr.size)
      builder.pop_below_top(expr.size, padding)
    }
  }
  case call_indirect(call) {
    var padding = builder.align_to(call.args.alignment)
    call.args.compile(builder, false)
    var more_padding = builder.align_to(8)
    call.function_ptr.compile(builder, false)
    var fun_stack_diff = 0
      - call.args.size | as well as the arguments
      + expr.size      | and pushes its result
    builder.call_indirect(more_padding.lower_byte(), fun_stack_diff)
    builder.pop_below_top(expr.size, padding)
  }
  case function_ptr(signature) builder.push_indirect(signature)
  case add(args) { args.compile(builder, false)  builder.add_8() }
  case sub(args) { args.compile(builder, false)  builder.sub_8() }
  case mul(args) { args.compile(builder, false)  builder.signed_mul_8() }
  case div(args) { args.compile(builder, false)  builder.signed_div_8() }
  case mod(args) { args.compile(builder, false)  builder.signed_mod_8() }
  case compare_zero(arg) {
    var padding = builder.align_to(8)
    arg.compile(builder, false)
    builder.compare_zero_8()
    builder.pop_below_top(1, padding)
  }
  case and_(args)        { args.compile(builder, false)  builder.and_8() }
  case or_(args)         { args.compile(builder, false)  builder.or_8() }
  case xor(args)         { args.compile(builder, false)  builder.xor_8() }
  case lower_byte(arg)   { arg.compile(builder, false)   builder.lower_byte() }
  case byte_to_int(arg)  { arg.compile(builder, false)   builder.byte_to_int() }
  case malloc(size) { size.compile(builder, false)  builder.malloc_8_aligned() }
  case free(free) {
    var padding = builder.align_to(8)
    free.compile(builder, false) | aggregate of pointer and size
    builder.free_8_aligned()
    builder.pop_below_top(8, padding)
  }
  case load(ptr) {
    var padding = builder.align_to(8)
    | Compute the pointer to be unboxed.
    var ptr_start = builder.stack_size
    ptr.compile(builder, false)

    | Copy the data from the heap.
    var data_start = builder.stack_size
    var cursor = 0
    loop if cursor + 8 > expr.size then break else {
      builder.push_8_from_stack(ptr_start)
      builder.push_8(cursor)
      builder.add_8()
      builder.load_8() | TODO: alignment
      cursor = cursor + 8
    }
    loop if cursor == expr.size then break else {
      var padding = builder.align_to(8)
      builder.push_8_from_stack(ptr_start)
      builder.push_8(cursor)
      builder.add_8()
      builder.load_1()
      builder.pop_below_top(1, padding)
      cursor = cursor + 1
    }
    builder.pop_below_top(expr.size, 8 + padding)
  }
  case store(store) {
    | Compute the pointer.
    var padding_before_ptr = builder.align_to(8)
    var ptr_start = builder.stack_size
    store.ptr.compile(builder, false)

    | Compute the data to be boxed.
    var data_start = builder.stack_size
    store.value.compile(builder, false)

    if store.value.size == 1 then {
      builder.store_1()
    } else if store.value.size == 8 then {
      builder.store_8()
    } else {
      | Store data piece by piece.
      var padding_before_work = builder.align_to(8)
      var cursor = 0
      loop if cursor + 8 > store.value.size then break else {
        builder.push_8_from_stack(ptr_start)
        builder.add_8(cursor)
        builder.push_8_from_stack(data_start + cursor)
        builder.store_8()
        cursor = cursor + 8
      }
      loop if cursor == store.value.size then break else {
        builder.push_8_from_stack(ptr_start)
        builder.add_8(cursor)
        builder.push_1_from_stack(data_start + cursor)
        builder.store_1()
        cursor = cursor + 1
      }
      builder.pop(padding_before_ptr + 8 + store.value.size + padding_before_work)
    }
  }
  case store_bytes(store) {
    var padding_before_ptr = builder.align_to(8)
    store.ptr.compile(builder, false)
    builder.store_bytes(store.bytes)
    builder.pop(padding_before_ptr)
  }
  case crash(message) {
    message.compile(builder, false)
    builder.crash()
  }
}
