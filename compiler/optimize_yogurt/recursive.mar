import mod.mar

fun is_trivially_recursive(fun_: YogurtFun, signature: String): Bool {
  fun_.body.is_trivially_recursive(fun_.dag, signature)
}

fun is_trivially_recursive(
  body: YogurtBody, dag: Dag[YogurtExpr], anchor: String
): Bool {
  for id in body.children do
    if id.is_trivially_recursive(dag, anchor) then return true
  false
}

fun is_trivially_recursive(id: Id, dag: Dag[YogurtExpr], anchor: String): Bool {
  switch dag.get(id).op
  case param false
  case byte false
  case int false
  case string false
  case array false
  case struct_ false
  case member false
  case enum_ false
  case switch_(switch_) {
    for case_ in switch_.cases do
      if case_.value.is_trivially_recursive(dag, anchor) then return true
    false
  }
  case lambda false
  case call(call) {
    switch call.callee
    case lambda false
    case fun_(called) called == anchor
    case builtin false
  }
  case type false
}
