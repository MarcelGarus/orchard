| Specializing functions for every combination of values is not practical.
| Example:
|   Suppose you write a recursive Mandelbrot function that accepts some
|   temporary results as well as a recursion limit as parameters. Let's further
|   assume that for some reason the recursion limit parameter is only runtime
|   known, but the starting conditions of the other parameters is compile time
|   known. We specifically do not want to generate a (possibly infinite) amount
|   of specialized functions for all combinations of these parameters because
|   that would hang the compiler.
| So, this function turns ints, bytes, etc. into holes. Specializing is mainly
| practical for lambdas (and structs containing lambdas etc.) because these
| enable further inlining and make i.e. iterators efficient.

import mod.mar

| fun specialize() {
|   | Create a specialized version of the lambda.
|     var holey_closure = mapping.get(lambda.closure).to_holey(builder.*)

|     var we_can_specialize_more =
|       not(lambda.function.ends_with("capturing {holey_closure.value}"))

|     if we_can_specialize_more then {
|       var wrapper_dag = dag[YogurtExpr]()
|       var wrapper_holes = list[Id]()
|       var wrapper_builder = body_builder(wrapper_dag.&).&
|       var args_in_wrapper = list[Id]()

|       for arg in expr.type.kind().lambda.unwrap().args do
|         args_in_wrapper.&.push(wrapper_builder.param(arg))
|       var wrapper_holes_arg_type = type_box(type_struct({
|         var fields = map[String, EggType]()
|         for hole in holey_closure.holes.iter().&.enumerate() do
|           fields.&.put("{hole.index}", builder.get(hole.item).type)
|         fields
|       }))
|       var wrapper_holes_arg = wrapper_builder.param(wrapper_holes_arg_type)

|       var wrapper_holes_struct = wrapper_builder.unbox(wrapper_holes_arg)
|       var wrapper_holes = list[Id]()
|       for hole in holey_closure.holes.iter().&.enumerate() do
|         wrapper_holes.&.push(
|           wrapper_builder.member(wrapper_holes_struct, "{hole.index}")
|         )

|       var wrapper_closure = wrapper_builder.fill(holey_closure.value, wrapper_holes.to_slice())
|       var result = wrapper_builder.call(
|         YogurtCallee.fun_(lambda.function),
|         (args_in_wrapper + list(wrapper_closure)).to_slice(),
|         expr.type,
|       )

|       var wrapper_body = wrapper_builder.finish(result)
|       var specialized_fun = YogurtFun { dag = wrapper_dag, body = wrapper_body }

|       eprintln("Specializing lambda {lambda.function}")
|       eprintln("Holey: {holey_closure.value}")
|       eprintln("Holes: {holey_closure.holes}.")
|       eprintln("Specialized lambda wrapper:\n")
|       stderr.write(specialized_fun.body, specialized_fun.dag, 1)
|       eprintln()

|       var signature =  "{lambda.function} capturing {holey_closure.value}"
|       optimized.&.put(signature, specialized_fun) | specialized_fun.optimize(optimized, yogurt))

|       var outer_closure = builder.box({
|         var fields = map[String, Id]()
|         for hole in holey_closure.holes.iter().enumerate() do
|           fields.&.put("{hole.index}", hole.item)
|         builder.struct_(fields)
|       })
|       builder.lambda(expr.type, signature, outer_closure)
|     } else {
|       builder.lambda(expr.type, lambda.function, mapping.get(lambda.closure))
|     }
| }

struct YogurtHoleyValue { kind: YogurtHoleyValueKind, type: EggType }
enum YogurtHoleyValueKind {
  hole,
  box: &YogurtHoleyValue,
  struct_: Map[String, YogurtHoleyValue],
  lambda: YogurtHoleyLambda,
}
struct YogurtHoleyEnum { name: String, value: &YogurtHoleyValue }
struct YogurtHoleyLambda { function: String, closure: &YogurtHoleyValue }

fun typed(kind: YogurtHoleyValueKind, type: EggType): YogurtHoleyValue {
  YogurtHoleyValue { kind, type }
}

fun write[W](writer: W, value: YogurtHoleyValue) {
  switch value.kind
  case hole writer."?"
  case box(inner) writer."(box {inner})"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case lambda(lambda)
    writer."(\\ {lambda.function.debug()} capturing {lambda.closure})"
}

struct HoleyResult { value: YogurtHoleyValue, holes: Slice[Id] }
fun to_holey(id: Id, builder: YogurtBodyBuilder): HoleyResult {
  var holes = list[Id]()
  var value = id.to_holey(builder, holes.&)
  HoleyResult { value, holes = holes.to_slice() }
}
fun hole(holes: &List[Id], id: Id): YogurtHoleyValueKind {
  holes.push(id)
  YogurtHoleyValueKind.hole
}
fun to_holey(
  id: Id, builder: YogurtBodyBuilder, holes: &List[Id]
): YogurtHoleyValue {
  var expr = builder.get(id)
  var kind =
    switch expr.op
    case struct_(struct_) {
      var fields = map[String, YogurtHoleyValue]()
      for field in struct_ do
        fields.&.put(field.key, field.value.to_holey(builder, holes))
      YogurtHoleyValueKind.struct_(fields)
    }
    case lambda(lambda)
      YogurtHoleyValueKind.lambda(YogurtHoleyLambda {
        function = lambda.function,
        closure = lambda.closure.to_holey(builder, holes).put_on_heap(),
      })
    case call(call) {
      var is_box =
        if call.callee is builtin(builtin) then builtin is box else false
      if is_box then
        YogurtHoleyValueKind.box(
          call.args.get(0).to_holey(builder, holes).put_on_heap()
        )
      else
        holes.hole(id)
    }
    default holes.hole(id)

  kind.typed(expr.type)
}

fun is_useful(holey: YogurtHoleyValue): Bool {
  switch holey.kind
  case hole false
  case struct_(fields) {
    for field in fields do if field.value.is_useful() then return true
    false
  }
  case lambda true
  case box(inner) inner.is_useful()
}

fun fill(
  builder: &YogurtBodyBuilder, holey: YogurtHoleyValue, holes: Slice[Id]
): Id {
  builder.fill(holey, holes.iter().&)
}
fun fill[I](
  builder: &YogurtBodyBuilder, holey: YogurtHoleyValue, holes: &Iter[Id, I]
): Id {
  switch holey.kind
  case hole holes.next().unwrap()
  case struct_(struct_) {
    var fields = map[String, Id]()
    for field in struct_ do
      fields.&.put(field.key, builder.fill(field.value, holes))
    builder.struct_(fields)
  }
  case lambda(lambda)
    builder.lambda(
      holey.type, lambda.function, builder.fill(lambda.closure.*, holes)
    )
  case box(inner) builder.box(builder.fill(inner.*, holes))
}
