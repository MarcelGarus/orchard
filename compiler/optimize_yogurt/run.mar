import mod.mar

struct YogurtComptimeValue { kind: YogurtComptimeValueKind, type: EggType }
enum YogurtComptimeValueKind {
  byte: Byte,
  int: Int,
  box: &YogurtComptimeValue,
  array: Slice[YogurtComptimeValue],
  struct_: Map[String, YogurtComptimeValue],
  enum_: YogurtEnumComptimeValue,
  lambda: YogurtLambdaComptimeValue,
  type: EggType,
}
struct YogurtEnumComptimeValue { name: String, value: &YogurtComptimeValue }
struct YogurtLambdaComptimeValue {
  function: String, closure: &YogurtComptimeValue
}

fun typed(kind: YogurtComptimeValueKind, type: EggType): YogurtComptimeValue {
  YogurtComptimeValue { kind, type }
}

fun write[W](writer: W, value: YogurtComptimeValue) {
  switch value.kind
  case byte(byte) writer."{byte}"
  case int(int) writer."{int}"
  case box(inner) writer."(box {inner})"
  case array(items) {
    writer."["
    var first = true
    for item in items do {
      if first then first = false else writer." "
      writer."{item}"
    }
    writer."]"
  }
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(enum_) {
    if enum_.value.kind is struct_(fields) then if fields.is_empty() then {
      writer."(| {enum_.name})"
      return {}
    }
    writer."(| {enum_.name}: {enum_.value})"
  }
  case lambda(lambda) writer."(\\ ...)"
  case type(type) writer."{type}"
}

fun extract_comptime(
  builder: YogurtBodyBuilder, id: Id
): Maybe[YogurtComptimeValue] {
  var expr = builder.get(id)
  var kind =
    switch expr.op
    case param return none[YogurtComptimeValue]()
    case int(int) YogurtComptimeValueKind.int(int)
    case byte(byte) YogurtComptimeValueKind.byte(byte)
    case string(string) {
      var bytes = list[YogurtComptimeValue]()
      for byte in string.bytes() do
        bytes.&.push(YogurtComptimeValueKind.byte(byte).typed(type_byte))
      YogurtComptimeValueKind.struct_(map(
        "utf8_bytes" -> YogurtComptimeValue {
          kind = YogurtComptimeValueKind.array(bytes.to_slice()),
          type = type_array(type_byte),
        }
      ))
    }
    case array(array) {
      var items = list[YogurtComptimeValue]()
      for item in array do
        items.&.push(
          builder.extract_comptime(item) or return none[YogurtComptimeValue]()
        )
      YogurtComptimeValueKind.array(items.to_slice())
    }
    case struct_(struct_) {
      var fields = map[String, YogurtComptimeValue]()
      for field in struct_ do
        fields.&.put(
          field.key,
          builder.extract_comptime(field.value)
            or return none[YogurtComptimeValue](),
        )
      YogurtComptimeValueKind.struct_(fields)
    }
    case member return none[YogurtComptimeValue]()
    case enum_(enum_)
      YogurtComptimeValueKind.enum_(YogurtEnumComptimeValue {
        name = enum_.name,
        value = {
          builder.extract_comptime(enum_.value)
            or return none[YogurtComptimeValue]()
        }.put_on_heap()
      })
    case switch_ return none[YogurtComptimeValue]()
    case lambda(lambda)
      YogurtComptimeValueKind.lambda(YogurtLambdaComptimeValue {
        function = lambda.function,
        closure = {
          builder.extract_comptime(lambda.closure)
            or return none[YogurtComptimeValue]()
        }.put_on_heap(),
      })
    case call return none[YogurtComptimeValue]()
    case type(type) YogurtComptimeValueKind.type(type)
  some(YogurtComptimeValue { kind, type = expr.type })
}

fun codify(builder: &YogurtBodyBuilder, value: YogurtComptimeValue): Id {
  switch value.kind
  case int(int) builder.int(int)
  case byte(byte) builder.byte(byte)
  case box(inner) builder.box(builder.codify(inner.*))
  case array(array) {
    var items = list[Id]()
    for item in array do items.&.push(builder.codify(item))
    builder.array(value.type, items.to_slice())
  }
  case struct_(struct_) {
    var fields = map[String, Id]()
    for field in struct_ do fields.&.put(field.key, builder.codify(field.value))
    builder.struct_(fields)
  }
  case enum_(enum_)
    builder.enum_(value.type, enum_.name, builder.codify(enum_.value.*))
  case lambda(lambda)
    builder.lambda(
      value.type, lambda.function, builder.codify(lambda.closure.*)
    )
  case type(type) builder.type(type)
}

struct YogurtRunResources {
  exprs: Int,
}
fun use_expr(res: &YogurtRunResources): Result[Nothing, Nothing] {
  if res.exprs > 0 then {
    res.exprs = res.exprs - 1
    ok[Nothing, Nothing]({})
  } else
    error[Nothing, Nothing]({})
}

fun run(
  function: String, args: Slice[YogurtComptimeValue], yogurt: Yogurt,
  res: &YogurtRunResources,
): Result[YogurtComptimeValue, Nothing] {
  | eprint("\"{function}\"")
  | for arg in args do eprint(" {arg}")
  | eprintln()

  var visible = map[Id, YogurtComptimeValue]()
  var fun_ = yogurt.funs.get(function)
  var value = fun_.body.run(args, fun_.dag, visible.&, yogurt, res)?

  ok[YogurtComptimeValue, Nothing](value)
}

fun run(
  body: YogurtBody, args: Slice[YogurtComptimeValue], dag: Dag[YogurtExpr],
  visible: &Map[Id, YogurtComptimeValue], yogurt: Yogurt, res: &YogurtRunResources,
): Result[YogurtComptimeValue, Nothing] {
  for both in zip(body.params.iter(), args.iter()) do
    visible.put(both.a, both.b)
  for id in body.children do
    visible.put(id, dag.get(id).run(dag, visible, yogurt, res)?)
  ok[YogurtComptimeValue, Nothing](visible.get(body.returns))
}

fun run(
  expr: YogurtExpr, dag: Dag[YogurtExpr],
  visible: &Map[Id, YogurtComptimeValue], yogurt: Yogurt, res: &YogurtRunResources,
): Result[YogurtComptimeValue, Nothing] {
  res.use_expr()?
  | eprintln("Running: {expr.debug()}")

  ok[YogurtComptimeValue, Nothing](
    switch expr.op
    case param unreachable()
    case int(int) YogurtComptimeValueKind.int(int).typed(type_int)
    case byte(byte) YogurtComptimeValueKind.byte(byte).typed(type_byte)
    case string(string) {
      var bytes = list[YogurtComptimeValue]()
      for byte in string.bytes() do
        bytes.&.push(YogurtComptimeValueKind.byte(byte).typed(type_byte))
      YogurtComptimeValueKind.struct_(map(
        "utf8_bytes" -> YogurtComptimeValue {
          kind = YogurtComptimeValueKind.array(bytes.to_slice()),
          type = type_array(type_byte),
        }
      )).typed(type_string)
    }
    case array(array) {
      var items = list[YogurtComptimeValue]()
      for item in array do items.&.push(visible.get(item))
      YogurtComptimeValueKind.array(items.to_slice()).typed(expr.type)
    }
    case struct_(struct_) {
      var fields = map[String, YogurtComptimeValue]()
      for field in struct_ do fields.&.put(field.key, visible.get(field.value))
      YogurtComptimeValueKind.struct_(fields).typed(expr.type)
    }
    case member(member)
      visible.get(member.of).kind.struct_.unwrap().get(member.name)
    case enum_(enum_)
      YogurtComptimeValueKind.enum_(YogurtEnumComptimeValue {
        name = enum_.name, value = visible.get(enum_.value).put_on_heap()
      }).typed(expr.type)
    case switch_(switch_) {
      var condition = visible.get(switch_.condition).kind.enum_.unwrap()
      var case_ = switch_.cases.get(condition.name)
      case_.run(list(condition.value.*).to_slice(), dag, visible, yogurt, res)?
    }
    case lambda(lambda)
      YogurtComptimeValueKind.lambda(YogurtLambdaComptimeValue {
        function = lambda.function,
        closure = visible.get(lambda.closure).put_on_heap(),
      }).typed(expr.type)
    case call(call) {
      var args = list[YogurtComptimeValue]()
      for arg in call.args do args.&.push(visible.get(arg))
      var args = args.to_slice()

      switch call.callee
      case lambda(lambda) {
        var lambda = visible.get(lambda).kind.lambda.unwrap()
        var all_args = list[YogurtComptimeValue]()
        for arg in args do all_args.&.push(arg)
        all_args.&.push(lambda.closure.*)
        lambda.function.run(all_args.to_slice(), yogurt, res)?
      }
      case fun_(signature) signature.run(args, yogurt, res)?
      case builtin(builtin) {
        switch builtin
        case lower_byte
          YogurtComptimeValueKind.byte(
            args.get(0).kind.int.unwrap().lower_byte()
          ).typed(expr.type)
        case byte_to_int
          YogurtComptimeValueKind.int(args.get(0).kind.byte.unwrap().to_int())
            .typed(expr.type)
        case add_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() + args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case sub_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() - args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case mul_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() * args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case div_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() / args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case mod_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() % args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case and_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() & args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case or_ints
          YogurtComptimeValueKind.int(
            or(args.get(0).kind.int.unwrap(), args.get(1).kind.int.unwrap())
          ).typed(expr.type)
        case xor_ints
          YogurtComptimeValueKind.int(
            args.get(0).kind.int.unwrap() ^ args.get(1).kind.int.unwrap()
          ).typed(expr.type)
        case compare_ints
          YogurtComptimeValueKind.enum_(YogurtEnumComptimeValue {
            name =
              switch
                args.get(0).kind.int.unwrap() <=> args.get(1).kind.int.unwrap()
              case less "less"
              case equal "equal"
              case greater "greater",
            value = YogurtComptimeValue {
              kind = YogurtComptimeValueKind.struct_(
                map[String, YogurtComptimeValue]()
              ),
              type = type_nothing,
            }.put_on_heap(),
          }).typed(expr.type)
        case box
          YogurtComptimeValueKind.box(args.get(0).put_on_heap())
            .typed(expr.type)
        case unbox args.get(0).kind.box.unwrap().*
        case generate_array {
          var len = args.get(0).kind.int.unwrap()
          var lambda = args.get(1).kind.lambda.unwrap()
          var items = list[YogurtComptimeValue]()
          for index in 0..len do
            items.&.push(
              lambda.function.run(
                list(
                  YogurtComptimeValueKind.int(index).typed(type_int),
                  lambda.closure.*,
                ).to_slice(),
                yogurt,
                res,
              )?
            )
          YogurtComptimeValueKind.array(items.to_slice()).typed(expr.type)
        }
        case array_get {
          var array = args.get(0).kind.array.unwrap()
          var index = args.get(1).kind.int.unwrap()
          array.get(index)
        }
        case array_set {
          var array = args.get(0).kind.array.unwrap()
          var index = args.get(1).kind.int.unwrap()
          var item  = args.get(2)
          var copy = list[YogurtComptimeValue]()
          for item in array do copy.&.push(item)
          copy.&.set(index, item)
          YogurtComptimeValueKind.array(copy.to_slice()).typed(expr.type)
        }
        case array_slice {
          var array = args.get(0).kind.array.unwrap()
          var range = args.get(1).kind.struct_.unwrap()
          var start = range.get("start").kind.int.unwrap()
          var end   = range.get("end").kind.int.unwrap()
          YogurtComptimeValueKind.array(array.subslice(start..end))
            .typed(expr.type)
        }
        case array_len
          YogurtComptimeValueKind.int(args.get(0).kind.array.unwrap().len)
            .typed(expr.type)
        case crash return error[YogurtComptimeValue, Nothing]({})
      }
    }
    case type(type) YogurtComptimeValueKind.type(type).typed(type_type)
  )
}
