import ../plum.mar
import choose_order.mar
import complexity.mar
import optimize.mar
import run.mar
import specialize.mar
import tree_shake.mar

fun optimize(yogurt: Yogurt): Yogurt {
  var order = yogurt.choose_optimization_order()
  var optimized = map[String, YogurtFun]()
  var specializations = set[String]()
  for signature in order do {
    eprintln("Optimizing {signature}")
    optimized.&.put(
      signature,
      yogurt.funs.get(signature)
        .optimize(specializations.&, optimized.&, yogurt),
    )
  }
  var yogurt = Yogurt { entry_point = yogurt.entry_point, funs = optimized }

  | Filter to functions that are used at all.
  var order = yogurt.choose_optimization_order()
  var funs = map[String, YogurtFun]()
  for fun_ in yogurt.funs do
    if order.iter().&.contains(fun_.key) then funs.&.put(fun_)
  Yogurt { entry_point = yogurt.entry_point, funs }
}
