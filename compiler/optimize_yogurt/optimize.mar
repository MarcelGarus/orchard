import mod.mar

fun optimize(fun_: YogurtFun, optimized: &Map[String, YogurtFun]): YogurtFun {
  var new_dag = dag[YogurtExpr]()
  var mapping = map[Id, Id]()
  var body = fun_.body.optimize(fun_.dag, true, new_dag.&, mapping.&, optimized)
  YogurtFun { dag = new_dag, body }
}

fun optimize(
  body: YogurtBody, dag: Dag[YogurtExpr], inlining: Bool,
  new_dag: &Dag[YogurtExpr],
  mapping: &Map[Id, Id], optimized: &Map[String, YogurtFun],
): YogurtBody {
  var builder = body_builder(new_dag).&
  for id in body.params do mapping.put(id, builder.push_param(dag.type_of(id)))
  for id in body.children do
    mapping.put(id, id.optimize(dag, inlining, builder, mapping, optimized))
  var body = builder.finish(mapping.get(body.returns))
  var body = body.tree_shake(new_dag.*)
  body
}

fun optimize(
  id: Id, dag: Dag[YogurtExpr], inlining: Bool,
  builder: &YogurtBodyBuilder, mapping: &Map[Id, Id],
  optimized: &Map[String, YogurtFun],
): Id {
  var expr = dag.get(id)

  | stderr."Optimizing:"
  | stderr.write(expr.op, dag, 0)
  | stderr."\n"

  switch expr.op
  case param unreachable()
  case int(int) builder.push_int(int)
  case string(string) builder.push_string(string)
  case array(items) {
    var new_items = list[Id]()
    for item in items do new_items.&.push(mapping.get(item))
    builder.push_array(new_items.to_slice(), expr.type)
  }
  case struct_(struct_) {
    var fields = map[String, Id]()
    for field in struct_ do fields.&.put(field.key, mapping.get(field.value))
    builder.push_struct(fields, expr.type)
  }
  case member(member) {
    var of = mapping.get(member.of)
    if builder.get(of).op is struct_(fields) then
      fields.get(member.name)
    else
      builder.push_member(of, member.name, expr.type)
  }
  case enum_(enum_)
    builder.push_enum(enum_.name, mapping.get(enum_.value), expr.type)
  case switch_(switch_) {
    var condition = mapping.get(switch_.condition)
    if builder.get(condition).op is enum_(enum_) then {
      var case_ = switch_.cases.get(enum_.name)
      var inner_mapping = map(case_.params.get(0) -> enum_.value)
      for id in case_.children do
        inner_mapping.&.put(
          id, id.optimize(dag, inlining, builder, inner_mapping.&, optimized)
        )
      return inner_mapping.get(case_.returns)
    }
    var cases = map[String, YogurtBody]()
    for case_ in switch_.cases do
      cases.&.put(
        case_.key,
        case_.value.optimize(dag, inlining, builder.dag, mapping, optimized),
      )
    builder.push_switch(condition, cases, expr.type)
  }
  case closure(inner) builder.push_closure(mapping.get(inner), expr.type)
  case get_closure(closure) {
    var closure = mapping.get(closure)
    if builder.get(closure).op is closure(inner) then
      inner
    else
      builder.push_get_closure(closure, expr.type)
  }
  case lambda(lambda)
    builder.push_lambda(lambda.function, mapping.get(lambda.closure), expr.type)
  case call(call) {
    var callee =
      switch call.callee
      case lambda(lambda) YogurtCallee.lambda(mapping.get(lambda))
      case fun_(signature) {
        if inlining then {
          if optimized.get_maybe(signature) is some(called) then {
            if called.complexity() < 10 then {
              | Inline the called function!
              var inner_mapping = map[Id, Id]()
              for both in zip(called.body.params.iter(), call.args.iter()) do
                inner_mapping.&.put(both.a, mapping.get(both.b))
              for id in called.body.children do
                inner_mapping.&.put(
                  id,
                  id.optimize(
                    called.dag, false, builder, inner_mapping.&, optimized
                  ),
                )
              return inner_mapping.get(called.body.returns)
            }
          }
        }
        YogurtCallee.fun_(signature)
      }
      case builtin(builtin) YogurtCallee.builtin(builtin)
    var args = list[Id]()
    for arg in call.args do args.&.push(mapping.get(arg))
    builder.push_call(callee, args.to_slice(), expr.type)
  }
  case type(type) builder.push_type(type)
}
