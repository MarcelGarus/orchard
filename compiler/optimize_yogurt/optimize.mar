import mod.mar

fun optimize(
  fun_: YogurtFun,
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): YogurtFun {
  var new_dag = dag[YogurtExpr]()
  var mapping = map[Id, Id]()
  var body = fun_.body.optimize(
    fun_.dag, true, new_dag.&, mapping.&,
    list[String]().&, set[String](), optimized, yogurt,
  )
  YogurtFun { dag = new_dag, body }
}

fun optimize(
  body: YogurtBody, dag: Dag[YogurtExpr], inline: Bool,
  new_dag: &Dag[YogurtExpr], mapping: &Map[Id, Id],
  specializing: &List[String], specializing_for: Set[String],
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): YogurtBody {
  var builder = body_builder(new_dag).&
  for id in body.params do mapping.put(id, builder.param(dag.type_of(id)))
  for id in body.children do
    mapping.put(
      id,
      id.optimize(
        dag, inline, builder, mapping,
        specializing, specializing_for, optimized, yogurt,
      ),
    )
  var body = builder.finish(mapping.get(body.returns))
  var body = body.tree_shake(new_dag.*)
  body
}

fun optimize(
  id: Id, dag: Dag[YogurtExpr], inline: Bool,
  builder: &YogurtBodyBuilder, mapping: &Map[Id, Id],
  specializing: &List[String], specializing_for: Set[String],
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): Id {
  dag.get(id).optimize(
    dag, inline, builder, mapping,
    specializing, specializing_for, optimized, yogurt,
  )
}
fun optimize(
  expr: YogurtExpr, dag: Dag[YogurtExpr], inline: Bool,
  builder: &YogurtBodyBuilder, mapping: &Map[Id, Id],
  specializing: &List[String], specializing_for: Set[String],
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): Id {
  | stderr."Optimizing:"
  | stderr.write(expr.op, dag, 0)
  | stderr."\n"

  switch expr.op
  case param unreachable()
  case byte(byte) builder.byte(byte)
  case int(int) builder.int(int)
  case string(string) builder.string(string)
  case array(items)
    builder.array(expr.type, {
      var new_items = list[Id]()
      for item in items do new_items.&.push(mapping.get(item))
      new_items.to_slice()
    })
  case struct_(struct_)
    builder.struct_({
      var fields = map[String, Id]()
      for field in struct_ do fields.&.put(field.key, mapping.get(field.value))
      fields
    })
  case member(member)
    builder.optimized_member(mapping.get(member.of), member.name)
  case enum_(enum_)
    builder.enum_(expr.type, enum_.name, mapping.get(enum_.value))
  case switch_(switch_) {
    var condition = mapping.get(switch_.condition)
    if builder.get(condition).op is enum_(enum_) then {
      var case_ = switch_.cases.get(enum_.name)
      mapping.put(case_.params.get(0) -> enum_.value)
      for id in case_.children do
        mapping.&.put(
          id,
          id.optimize(
            dag, inline, builder, mapping,
            specializing, specializing_for, optimized, yogurt,
          ),
        )
      return mapping.get(case_.returns)
    }
    builder.switch_(condition, expr.type, {
      var cases = map[String, YogurtBody]()
      for case_ in switch_.cases do
        cases.&.put(
          case_.key,
          case_.value.optimize(
            dag, inline, builder.dag, mapping,
            specializing, specializing_for, optimized, yogurt,
          ),
        )
      cases
    })
  }
  case lambda(lambda)
    builder.optimized_lambda(
      expr.type, lambda.function, mapping.get(lambda.closure)
    )
  case call(call) {
    var args = list[Id]()
    for arg in call.args do args.&.push(mapping.get(arg))
    var args = args.to_slice()

    switch call.callee
    case lambda(lambda)
      builder.optimized_lambda_call(
        mapping.get(lambda), args,
        inline, specializing, specializing_for, optimized, yogurt,
      )
    case fun_(signature)
      builder.optimized_fun_call(
        signature, args, expr.type,
        inline, true, specializing, specializing_for, optimized, yogurt,
      )
    case builtin(builtin)
      builder.optimized_builtin_call(builtin, args, expr.type)
  }
  case type(type) builder.type(type)
}

fun optimized_member(builder: &YogurtBodyBuilder, of: Id, name: String): Id {
  if builder.get(of).op is struct_(fields)
  then fields.get(name)
  else builder.member(of, name)
}

fun optimized_lambda(
  builder: &YogurtBodyBuilder, type: EggType, function: String, closure: Id,
): Id {
  var holey_closure = closure.to_holey(builder.*)

  | if not(holey_closure.value.is_useful()) or true then
    return builder.lambda(type, function, closure)

  | Create a specialized version of the lambda.

  | var closure_containing_only_holes = builder.box(builder.struct_({
  |   var fields = map[String, Id]()
  |   for hole in holey_closure.holes.iter().enumerate() do
  |     fields.&.put("{hole.index}", hole.item)
  |   fields
  | }))

  | var wrapper_dag = dag[YogurtExpr]()
  | var wrapper_holes = list[Id]()
  | var wrapper_builder = body_builder(wrapper_dag.&).&
  | var args_in_wrapper = list[Id]()

  | for arg in type.kind().lambda.unwrap().args do
  |   args_in_wrapper.&.push(wrapper_builder.param(arg))
  | var wrapper_holes_arg =
  |   wrapper_builder.param(builder.get(closure_containing_only_holes).type)

  | var wrapper_holes_struct = wrapper_builder.unbox(wrapper_holes_arg)
  | var wrapper_holes = list[Id]()
  | for hole in holey_closure.holes.iter().&.enumerate() do
  |   wrapper_holes.&.push(
  |     wrapper_builder.member(wrapper_holes_struct, "{hole.index}")
  |   )

  | var wrapper_closure =
  |   wrapper_builder.fill(holey_closure.value, wrapper_holes.to_slice())
  | var result = wrapper_builder.call(
  |   YogurtCallee.fun_(function),
  |   (args_in_wrapper + list(wrapper_closure)).to_slice(),
  |   type,
  | )

  | var wrapper_body = wrapper_builder.finish(result)
  | var specialized_fun = YogurtFun { dag = wrapper_dag, body = wrapper_body }

  | eprintln("Specializing lambda {function}")
  | eprintln("Holey: {holey_closure.value}")
  | eprintln("Holes: {holey_closure.holes}.")
  | | eprintln("Specialized lambda wrapper:\n")
  | | stderr.write(specialized_fun.body, specialized_fun.dag, 1)
  | | eprintln()

  | var signature =  "{function} capturing {holey_closure.value}"
  | optimized.&.put(signature, specialized_fun) | specialized_fun.optimize(optimized, yogurt))

  | builder.lambda(type, signature, closure_containing_only_holes)
}

fun optimized_lambda_call(
  builder: &YogurtBodyBuilder, lambda: Id, args: Slice[Id],
  inline: Bool, specializing: &List[String], specializing_for: Set[String],
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): Id {
  var expr = builder.get(lambda)
  var return_type = expr.type.kind().lambda.unwrap().return_type
  if expr.op is lambda(lambda) then {
    var actual_args = (args.to_list() + list(lambda.closure)).to_slice()
    return builder.optimized_fun_call(
      lambda.function, actual_args, return_type,
      true, true, specializing, specializing_for, optimized, yogurt,
    )
  }
  builder.call(YogurtCallee.lambda(lambda), args, return_type)
}

fun optimized_fun_call(
  builder: &YogurtBodyBuilder,
  signature: String, args: Slice[Id], type: EggType,
  inline: Bool, specialize: Bool,
  specializing: &List[String], specializing_for: Set[String],
  optimized: &Map[String, YogurtFun], yogurt: Yogurt,
): Id {
  | If all the arguments are compile-time-known, try to run the function at
  | compile time.
  var arg_values = list[YogurtComptimeValue]()
  for arg in args do arg_values.&.push(builder.extract_comptime(arg) or break)
  var arg_values = arg_values.to_slice()
  var all_comptime_known = arg_values.len == args.len
  if all_comptime_known then {
    var resources = YogurtRunResources { exprs = 1000 }
    if run(signature, arg_values, yogurt, resources.&) is ok(value) then
      return builder.codify(value)
  }

  | Possibly inline the function.
  if inline then {
    if optimized.get_maybe(signature) is some(called) then {
      var should_inline = called.complexity() < 50
      if should_inline then {
        eprintln("Inlining {signature} ({args} become {called.body.params})")
        | Inline the called function!
        var inner_mapping = map[Id, Id]()
        for both in zip(called.body.params.iter(), args.iter()) do
          inner_mapping.&.put(both.a, both.b)
        for id in called.body.children do
          inner_mapping.&.put(
            id,
            id.optimize(
              called.dag, false, builder, inner_mapping.&,
              specializing, specializing_for, optimized, yogurt,
            ),
          )
        return inner_mapping.get(called.body.returns)
      } else if not(specialize) then eprintln("Not inlinting {signature} coz too big")
    } else if not(specialize) then eprintln("Not inlining {signature} coz not ready yet")
  } else if not(specialize) then eprintln("Not inlining {signature} coz depth")

  if specialize then {
    | Create a specialized version of the lambda that only accepts values for the
    | holes of the arguments instead of the arguments themselves. This specialized
    | wrapper then simply reconstructs the original arguments and calls the
    | original function. Using inlining, this is still useful.
    var holey_args = list[HoleyResult]()
    for arg in args do holey_args.&.push(arg.to_holey(builder.*))
    var holey_args = holey_args.to_slice()
    var any_useful = false
    for arg in holey_args do if arg.value.is_useful() then any_useful = true
    if any_useful then {
      var specialized_signature = {
        var b = string_builder().&
        b."{signature} with"
        for arg in holey_args do b." {arg.value}"
        b.to_string()
      }

      if not(specializing.iter().&.contains(specialized_signature)) then {
        specializing.push(specialized_signature)

        var hole_types = list[EggType]()
        for arg in holey_args do
          for hole in arg.holes do hole_types.&.push(builder.get(hole).type)

        var dag = dag[YogurtExpr]()
        var builder = body_builder(dag.&).&

        var holes = list[Id]()
        for type in hole_types do holes.&.push(builder.param(type))

        var reconstructed_args = list[Id]()
        var holes = holes.iter().&
        for hole in holey_args do
          reconstructed_args.&.push(builder.fill(hole.value, holes))
        var reconstructed_args = reconstructed_args.to_slice()

        var result = builder.optimized_fun_call(
          signature, reconstructed_args, type, true,
          false, specializing, specializing_for, optimized, yogurt,
        )

        var body = builder.finish(result)
        var body = body.tree_shake(dag)

        var specialized_fun = YogurtFun { dag, body }
        optimized.&.put(specialized_signature, specialized_fun)
      } else {
        eprintln("Not specializing {specialized_signature} coz it already exists")
      }

      var holes = list[Id]()
      for arg in holey_args do for id in arg.holes do holes.&.push(id)
      return builder.call(
        YogurtCallee.fun_(specialized_signature), holes.to_slice(), type
      )
    } else {
      eprintln("not specializing call to {signature}")
    }
  }

  builder.call(YogurtCallee.fun_(signature), args, type)
}

fun optimized_builtin_call(
  builder: &YogurtBodyBuilder,
  builtin: YogurtBuiltin, args: Slice[Id], type: EggType,
): Id {
  switch builtin
  case lower_byte
    if builder.get(args.get(0)).op is int(int) then
      return builder.byte(int.lower_byte())
  case byte_to_int
    if builder.get(args.get(0)).op is byte(byte) then
      return builder.int(byte.to_int())
  case add_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if a == 0 then return args.get(1)
    if b.op is int(b) then if b == 0 then return args.get(0)
    if a.op is int(a) then if b.op is int(b) then return builder.int(a + b)
  }
  case sub_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if b.op is int(b) then if b == 0 then return args.get(0)
    if a.op is int(a) then if b.op is int(b) then return builder.int(a - b)
  }
  case mul_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if a == 1 then return args.get(1)
    if b.op is int(b) then if b == 1 then return args.get(0)
    if a.op is int(a) then if b.op is int(b) then return builder.int(a * b)
  }
  case div_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if b.op is int(b) then if b == 1 then return args.get(0)
    if a.op is int(a) then if b.op is int(b) then if b != 0 then
      return builder.int(a / b)
  }
  case mod_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if b.op is int(b) then if b == 1 then return builder.int(0)
    if a.op is int(a) then if b.op is int(b) then if b != 0 then
      return builder.int(a % b)
  }
  case and_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if a == 0 then return args.get(0)
    if b.op is int(b) then if b == 0 then return args.get(1)
    if a.op is int(a) then if a == -1 then return args.get(1)
    if b.op is int(b) then if b == -1 then return args.get(0)
    if a.op is int(a) then if b.op is int(b) then return builder.int(a & b)
  }
  case or_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if a == 0 then return args.get(1)
    if b.op is int(b) then if b == 0 then return args.get(0)
    if a.op is int(a) then if a == -1 then return args.get(0)
    if b.op is int(b) then if b == -1 then return args.get(1)
    if a.op is int(a) then if b.op is int(b) then return builder.int(or(a, b))
  }
  case xor_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if b.op is int(b) then return builder.int(a ^ b)
  }
  case compare_ints {
    var a = builder.get(args.get(0))
    var b = builder.get(args.get(1))
    if a.op is int(a) then if b.op is int(b) then {
      var symbol =
        switch a <=> b
        case less "less"
        case equal "equal"
        case greater "greater"
      return builder.enum_(type, symbol, builder.nothing())
    }
  }
  case box {}
  case unbox {
    | TODO
    | if builder.get(args.get(0)).op is call(a) then
    |   return builder.int(a ^ b)
  }
  case generate_array {
    | TODO
  }
  case array_get {
    var array = builder.get(args.get(0))
    var index = builder.get(args.get(1))
    if array.op is array(items) then if index.op is int(index) then
      if (0..items.len).contains(index) then return items.get(index)
  }
  case array_set {
    var array = builder.get(args.get(0))
    var index = builder.get(args.get(1))
    var item  = args.get(2)
    if array.op is array(items) then if index.op is int(index) then
      if (0..items.len).contains(index) then {
        var new_items = list[Id]()
        for item in items do new_items.&.push(item)
        new_items.&.set(index, item)
        return builder.array(type, new_items.to_slice())
      }
  }
  case array_slice {
    var array = builder.get(args.get(0))
    var range = builder.get(args.get(1))
    if array.op is array(items) then if range.op is struct_(range) then {
      var start = builder.get(range.get("start"))
      var end = builder.get(range.get("end"))
      if start.op is int(start) then if end.op is int(end) then {
        if (0..items.len).contains(start) and (0..items.len).contains(end)
        then return builder.array(type, items.subslice(start..end))
      }
    }
  }
  case array_len {
    var array = builder.get(args.get(0))
    if array.op is array(items) then return builder.int(items.len)
  }
  case crash {}

  builder.call(YogurtCallee.builtin(builtin), args, type)
}
