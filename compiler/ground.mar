| The Ground Byte Code  
|
| Internally, code runs in a stack-based virtual machine (VM), something like a
| mini-computer implemented in software. The VM has its own data stack and call
| stack and operates on instructions (called byte code instructions). From the
| point of view of the VM, Plum types no longer exist. Instead, the instructions
| operate on memory directly, reading from and writing to addresses.
|
| The byte code that Plum compiles to is called Ground, also created by me. This
| repository contains the specification of the byte code â€“ feel free to write
| your own intepreter to run Plum programs.

import plum.mar

struct Ground { instructions: Slice[GroundInstruction] }

| The Ground instructions. See the Ground spec (also in this repo) for
| explanations.
enum GroundInstruction {
  nop,
  | arithmetic stuff
  add_8,
  sub_8,
  mul_8,
  div_8,
  mod_8,
  compare_zero_8,
  | bitwise stuff
  and_8,
  or_8,
  xor_8,
  lower_byte,
  byte_to_int,
  | stack stuff
  push_padding: Byte,
  push_1: Byte,
  push_8: Int,
  push_1_from_stack: Int,
  push_8_from_stack: Int,
  pop: Byte,
  pop_below_top: Tuple2[Int, Byte],
  | memory stuff
  malloc,
  free,
  store_1,
  store_8,
  load_1,
  load_8,
  store_bytes: Slice[Byte],
  | error stuff
  crash,
  | control flow stuff
  jump: Int,              | index into the instructions array
  jump_table: Slice[Int], | indices into the instructions array
  call: Int,              | index into the instructions array
  push_indirect: Int,     | index into the instructions array
  call_indirect: Byte,
  return_,
}

fun write[W](writer: W, ground: Ground) {
  var first = true
  for entry in ground.instructions.iter().enumerate() do {
    if first then first = false else writer."\n"
    writer."{entry.index.format().pad_left(4)} | {entry.item}"
  }
}
fun write[W](writer: W, instruction: GroundInstruction) {
  switch instruction
  case nop writer."nop"
  case add_8 writer."add_8"
  case sub_8 writer."sub_8"
  case mul_8 writer."mul_8"
  case div_8 writer."div_8"
  case mod_8 writer."mod_8"
  case compare_zero_8 writer."compare_zero_8"
  case and_8 writer."and_8"
  case or_8 writer."or_8"
  case xor_8 writer."xor_8"
  case lower_byte writer."lower_byte"
  case byte_to_int writer."byte_to_int"
  case push_padding(amount) writer."push_padding {amount}"
  case push_1(byte) writer."push_1 {byte}"
  case push_8(int) writer."push_8 {int}"
  case push_1_from_stack(offset) writer."push_1_from_stack {offset}"
  case push_8_from_stack(offset) writer."push_8_from_stack {offset}"
  case pop(amount) writer."pop {amount}"
  case pop_below_top(tuple) writer."pop_below_top {tuple.a} {tuple.b}"
  case malloc writer."malloc"
  case free writer."free"
  case store_1 writer."store_1"
  case store_8 writer."store_8"
  case load_1 writer."load_1"
  case load_8 writer."load_8"
  case store_bytes(bytes) {
    writer."store_bytes"
    for byte in bytes do writer." {byte.radix(16)}"
  }
  case crash writer."crash"
  case jump(target) writer."jump {target}"
  case jump_table(table) {
    writer."jump_table"
    for target in table do writer." {target}"
  }
  case call(target) writer."call {target}"
  case push_indirect(target) writer."push_indirect {target}"
  case call_indirect(pop_amount) writer."call_indirect {pop_amount}"
  case return_ writer."return"
}

fun push_little_endian_bytes(bytes: &List[Byte], int: Int) {
  | TODO: This is hacky. Do this with math instead.
  var ref = int.&.cast[&Int, &Byte]()
  for i in 0..8 do bytes.push(ref.add_stride_offset(i).*)
}
fun replace_little_endian_bytes(bytes: &List[Byte], offset: Int, int: Int) {
  | TODO: This is hacky. Do this with math instead.
  var ref = int.&.cast[&Int, &Byte]()
  for i in 0..8 do bytes.set(offset + i, ref.add_stride_offset(i).*)
}

fun to_bytes(ground: Ground): Slice[Byte] {
  var bytes = list[Byte]().&
  var offsets = list[Int]() | for each instruction, at which offset it is
  var patches = list[Tuple2[Int, Int]]() | patches have an offset and instruction index

  for instruction in ground.instructions do {
    offsets.&.push(bytes.len)

    switch instruction
    case nop bytes.push(16#00.lower_byte())
    case add_8 bytes.push(16#a0.lower_byte())
    case sub_8 bytes.push(16#a1.lower_byte())
    case mul_8 bytes.push(16#a2.lower_byte())
    case div_8 bytes.push(16#a3.lower_byte())
    case mod_8 bytes.push(16#a4.lower_byte())
    case compare_zero_8 bytes.push(16#a5.lower_byte())
    case and_8 bytes.push(16#b0.lower_byte())
    case or_8  bytes.push(16#b1.lower_byte())
    case xor_8 bytes.push(16#b2.lower_byte())
    case lower_byte bytes.push(16#b3.lower_byte())
    case byte_to_int bytes.push(16#b4.lower_byte())
    case push_padding(amount) {
      bytes.push(16#c0.lower_byte())
      bytes.push(amount)
    }
    case push_1(byte) {
      bytes.push(16#c1.lower_byte())
      bytes.push(byte)
    }
    case push_8(int) {
      bytes.push(16#c2.lower_byte())
      bytes.push_little_endian_bytes(int)
    }
    case push_1_from_stack(offset) {
      bytes.push(16#c3.lower_byte())
      bytes.push_little_endian_bytes(offset)
    }
    case push_8_from_stack(offset) {
      bytes.push(16#c4.lower_byte())
      bytes.push_little_endian_bytes(offset)
    }
    case pop(amount) {
      bytes.push(16#c5.lower_byte())
      bytes.push(amount)
    }
    case pop_below_top(tuple) {
      bytes.push(16#c6.lower_byte())
      bytes.push_little_endian_bytes(tuple.a)
      bytes.push(tuple.b)
    }
    case malloc bytes.push(16#d0.lower_byte())
    case free bytes.push(16#d1.lower_byte())
    case store_1 bytes.push(16#d2.lower_byte())
    case store_8 bytes.push(16#d3.lower_byte())
    case load_1 bytes.push(16#d4.lower_byte())
    case load_8 bytes.push(16#d5.lower_byte())
    case store_bytes(literal) {
      bytes.push(16#d6.lower_byte())
      bytes.push_little_endian_bytes(literal.len)
      bytes.push_all(literal)
    }
    case crash bytes.push(16#e0.lower_byte())
    case jump(target) {
      bytes.push(16#f0.lower_byte())
      patches.&.push(tuple(bytes.len, target))
      bytes.push_little_endian_bytes(0) | placeholder
    }
    case jump_table(table) {
      bytes.push(16#f1.lower_byte())
      bytes.push(table.len.lower_byte())
      for target in table do {
        patches.&.push(tuple(bytes.len, target))
        bytes.push_little_endian_bytes(0) | placeholder
      }
    }
    case call(target) {
      bytes.push(16#f2.lower_byte())
      patches.&.push(tuple(bytes.len, target))
      bytes.push_little_endian_bytes(0) | placeholder
    }
    case push_indirect(target) {
      bytes.push(16#f3.lower_byte())
      patches.&.push(tuple(bytes.len, target))
      bytes.push_little_endian_bytes(0) | placeholder
    }
    case call_indirect(pop_amount) {
      bytes.push(16#f4.lower_byte())
      bytes.push(pop_amount)
    }
    case return_ bytes.push(16#f5.lower_byte())
  }

  for patch in patches do
    bytes.replace_little_endian_bytes(patch.a, offsets.get(patch.b))

  bytes.to_slice()
}
