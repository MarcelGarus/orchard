import mod.mar

fun visit[V](fun_: EggFun, visitor: V) { fun_.body.visit(visitor) }

fallback fun visit[V](body: EggBody, visitor: V) {
  for child in body.children do child.visit(visitor)
}

fun visit_children[V](id: EggId, visitor: V) {
  switch id.resolve()
  case param panic("param")
  case type {}
  case int {}
  case string {}
  case struct_ {}
  case enum_ {}
  case lambda(body) body.visit(visitor)
  case member {}
  case switch_(switch_) for case_ in switch_.cases do case_.value.visit(visitor)
  case call_fun {}
  case call_lambda {}
  case call_builtin {}
  case cast {}
  case byte {}
  case lower_byte {}
  case byte_to_int {}
  case add {}
  case subtract {}
  case multiply {}
  case divide {}
  case modulo {}
  case and_ {}
  case or_ {}
  case xor {}
  case compare {}
  case unchecked_divide {}
  case unchecked_modulo {}
  case box {}
  case unbox {}
  case array {}
  case generate_array(args) args.generator.visit(visitor)
  case array_get {}
  case array_set {}
  case array_slice {}
  case array_len {}
  case unchecked_generate_non_empty_array(args) args.generator.visit(visitor)
  case unchecked_array_get {}
  case unchecked_array_set {}
  case unchecked_array_slice {}
  case type_info {}
  case static_to_dynamic {}
  case dynamic_to_static {}
  case crash {}
  case unreachable {}
  case recursive(rec) rec.body.visit(visitor)
  case recurse {}
}
