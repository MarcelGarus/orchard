import mod.mar

fun pesto_type(id: EggId): PestoType {
  switch id.resolve()
  case pesto_param(type) type
  case case_param(param)
    param.switch_on.pesto_type().enum_.unwrap().get(param.variant)
  case byte PestoType.byte
  case lower_byte PestoType.byte
  case byte_to_int PestoType.int
  case int PestoType.int
  case add PestoType.int
  case subtract PestoType.int
  case multiply PestoType.int
  case unchecked_divide PestoType.int
  case unchecked_modulo PestoType.int
  case and_ PestoType.int
  case or_ PestoType.int
  case xor PestoType.int
  case compare PestoType.enum_(map("less" -> pesto_ordering_type))
  case struct_(fields) {
    var field_types = map[String, PestoType]()
    for field in fields do
      field_types.&.put(field.key, field.value.pesto_type())
    PestoType.struct_(field_types)
  }
  case member(member) member.of.pesto_type().struct_.unwrap().get(member.name)
  case enum_(enum_) enum_.type.to_pesto()
  case switch_(switch_)
    switch_.cases.iter().&.next().unwrap().value.returns.pesto_type()
  case function_ptr PestoType.ptr
  case pesto_call_fun(call) call.return_type
  case call_indirect(call) call.return_type
  case new(id) PestoType.ptr
  case load(load) load.type
  case free pesto_nothing_type
  case get_refcount PestoType.int
  case set_refcount pesto_nothing_type
  case new_buffer PestoType.ptr
  case get_buffer_length PestoType.int
  case load_buffer_item(load) load.item_type
  case store_buffer_item pesto_nothing_type
  case store_buffer_bytes pesto_nothing_type
  case free_buffer pesto_nothing_type
  case pesto_crash(crash) crash.type
  case pesto_unreachable(type) type
  case loop_(loop_) loop_.body.returns.pesto_type()
  case pesto_continue(continue_) continue_.type
  default unreachable("tried to get pesto type of {id.resolve().debug()}")
}
