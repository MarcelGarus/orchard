import mod.mar

fun type(id: EggId): EggType {
  switch id.resolve()
  case param(type) type
  case case_param(param)
    param.switch_on.type().kind().enum_.unwrap().get(param.variant)
  case type type_type
  case int type_int
  case string type_string
  case struct_(fields) {
    var field_types = map[String, EggType]()
    for field in fields do field_types.&.put(field.key, field.value.type())
    type_struct(field_types)
  }
  case enum_(enum_) enum_.type
  case inline_lambda(body) {
    var param_types = list[EggType]()
    for param in body.params do param_types.&.push(param.type())
    type_lambda(param_types.to_slice(), body.returns.type())
  }
  case raw_lambda(lambda) lambda.type
  case member(member) member.of.type().kind().struct_.unwrap().get(member.name)
  case switch_(switch_)
    switch_.cases.iter().&.next().unwrap().value.returns.type()
  case call_fun(call) call.return_type
  case call_lambda(call) call.lambda.type().kind().lambda.unwrap().return_type
  case call_builtin(call)
    call.builtin.type_signature().return_type.specialize(call.substitutions)
  case cast(cast) cast.type
  case byte type_byte
  case lower_byte type_byte
  case byte_to_int type_int
  case add type_int
  case subtract type_int
  case multiply type_int
  case divide type_int
  case modulo type_int
  case and_ type_int
  case or_ type_int
  case xor type_int
  case compare type_ordering
  case unchecked_divide type_int
  case unchecked_modulo type_int
  case box(arg) type_box(arg.type())
  case unbox(arg) arg.type().kind().box.unwrap()
  case array(array) type_array(array.item_type)
  case generate_array(args) type_array(args.generator.returns.type())
  case array_get(args) args.array.type().kind().array.unwrap()
  case array_set(args) args.array.type()
  case array_slice(args) args.array.type()
  case array_len type_int
  case unchecked_generate_non_empty_array(args) type_array(args.generator.returns.type())
  case unchecked_array_get(args) args.array.type().kind().array.unwrap()
  case unchecked_array_set(args) args.array.type()
  case unchecked_array_slice(args) args.array.type()
  case type_info type_type_info
  case static_to_dynamic type_dynamic
  case dynamic_to_static(args) args.static
  case crash(crash) crash.type
  case unreachable(type) type
  case loop_(loop_) loop_.body.returns.type()
  case continue_(continue_) continue_.type
  default unreachable("tried to get type of {id.resolve().debug()}")
}
