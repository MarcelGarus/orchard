import mod.mar

fun type(id: Id): EggType {
  switch egg_dag.get(id)
  case param(type) type
  case type type_type
  case int type_int
  case string type_string
  case struct_(fields) {
    var field_types = map[String, EggType]()
    for field in fields do field_types.&.put(field.key, field.value.type())
    type_struct(field_types)
  }
  case enum_(enum_) enum_.type
  case lambda(body) {
    var param_types = list[EggType]()
    for param in body.params do param_types.&.push(param.type())
    type_lambda(param_types.to_slice(), body.returns.type())
  }
  case member(member) member.of.type().kind().struct_.unwrap().get(member.name)
  case switch_(switch_) switch_.type
  case call_fun(call) call.return_type
  case call_lambda(call) call.lambda.type().kind().lambda.unwrap().return_type
  case call_builtin(type) {
    todo("type of builtin")
  }
  case cast(cast) cast.type
}
