import mod.mar

fun parse_string(parser: &LineParser): Result[Maybe[StringAndSrc], Error] {
  var start_quote = parser.consume("\"") or return no_match[StringAndSrc]()
  var b = string_builder().&
  var end_quote = loop {
    if parser.is_at_end() then
      return bad_input[StringAndSrc](error(
        "String doesn't end until the end of the input.", parser.src_of_rest()
      ))
    if parser.current() == #" then break(parser.consume("\"").unwrap())
    if parser.parse_escaped()? is some(escaped) then
      b.write(escaped)
    else
      b.write(parser.consume_char())
  }
  parsed(b.to_string() @ {start_quote.src ... end_quote.src})
}

fun parse_string(bacon: Bacon): Result[Maybe[StringAndSrc], Error] {
  bacon.line == "'" or return no_match[StringAndSrc]()
  var b = string_builder().&
  for child in bacon.children do {
    var parser = parser(child.line, child.src)
    loop {
      if parser.rest().is_empty() then break
      if parser.&.parse_escaped()? is some(escaped) then
        b.write(escaped)
      else
        b.write(parser.&.consume_char())
    }
  }
  parsed(b.to_string() @ bacon.src)
}

fun parse_escaped(parser: &LineParser): Result[Maybe[String], Error] {
  parser.current() == #\ or return no_match[String]()
  parser.advance()
  if parser.is_at_end() then
    return bad_input[String](
      error("Expected escape sequence.", parser.src_of_rest())
    )
  var char = parser.consume_char()
  if char == #\ then return parsed("\\")
  if char == #" then return parsed("\"")
  if char == #n then return parsed("\n")
  bad_input[String](error("Invalid escape sequence.", parser.src_of_rest()))
}
