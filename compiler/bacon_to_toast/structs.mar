import mod.mar

fun parse_struct_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  parser.consume("&") or return no_match[ToastType]()

  var fields = list[ToastTypeField]()
  loop {
    var name = parser.&.parse_name() or break {}

    parser.&.consume(":") or
      return bad_input[ToastType](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var type = parser.&.parse_type(false)? or
      return bad_input[ToastType](error(
        "Expected type of field.", parser.src_of_rest()))

    fields.&.push(ToastTypeField { name, type })
  }
  parsed(ToastType.struct_(fields.to_slice()))
}

fun parse_struct_type(bacon: Bacon): Result[Maybe[ToastType], Error] {
  bacon.line == "&" or return no_match[ToastType]()

  var fields = list[ToastTypeField]()
  for child in bacon.children do {
    var parser = parser(child.line, child.src)

    var name = parser.&.parse_name() or
      return bad_input[ToastType](error(
        "Expected field name.", parser.src_of_rest()))

    parser.&.consume(":") or
      return bad_input[ToastType](error(
        "Expected colon after field name.", parser.src_of_rest()))

    var type =
      if child.children.is_empty() then {
        var type = parser.&.parse_type(false)? or
          return bad_input[ToastType](error(
            "Expected type of field.", parser.src_of_rest()))
        parser.&.ensure_is_at_end()?
        type
      } else {
        parser.&.ensure_is_at_end()?
        var children = child.children.parse_types()?
        children.len == 1 or
          return bad_input[ToastType](error(
            "Fields can only have one type.", parser.src_of_rest()))
        children.get(0)
      }

    fields.&.push(ToastTypeField { name, type })
  }
  parsed(ToastType.struct_(fields.to_slice()))
}

fun parse_struct(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var ampersand = parser.consume("&") or return no_match[ToastExpr]()
  var fields = list[ToastField]()
  loop {
    var name = parser.&.parse_name() or break {}

    var value =
      if parser.&.consume(":") is some then
        parser.&.parse_expr(false, true)? or
          return bad_input[ToastExpr](error(
            "Expected value of field.", parser.src_of_rest()))
      else
        ToastExpr.name(name)

    fields.&.push(ToastField { name, value })
  }

  parsed(ToastExpr.struct_(ToastStruct {
    ampersand, fields = fields.to_slice()
  }))
}

fun parse_struct(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  bacon.line == "&" or return no_match[ToastExpr]()
  var ampersand = "&" @ bacon.src

  var fields = list[ToastField]()
  if bacon.children.len == 1 then {
    | If we only have a single child, then we allow multiple fields on the same
    | line.
    var child = bacon.children.get(0)
    var parser = parser(child.line, child.src)
    var children = child.children.parse_exprs()?

    loop {
      var name = parser.&.parse_name() or break {}
      var value =
        if parser.&.consume(":") is some then {
          switch parser.&.parse_expr(false, true)?
          case some(expr) {
            if not(children.is_empty()) then
              return bad_input[ToastExpr](error(
                "Field values on same line and on new line.",
                parser.src_of_rest(),
              ))
            expr
          }
          case none {
            parser.&.ensure_is_at_end()?
            children.len == 1 or
              return bad_input[ToastExpr](error(
                "Fields can only have one value.", parser.src_of_rest()))
            children.get(0)
          }
        } else {
          children.is_empty() or
            return bad_input[ToastExpr](error(
              "Field value after field with no colon.", parser.src_of_rest()))
          ToastExpr.name(name)
        }

      fields.&.push(ToastField { name, value })
    }
    parser.&.ensure_is_at_end()?
  } else for child in bacon.children do {
    var parser = parser(child.line, child.src)

    var name = parser.&.parse_name() or
      return bad_input[ToastExpr](error(
        "Expected field name.", parser.src_of_rest()))

    var value =
      if parser.&.consume(":") is some then {
        if child.children.is_empty() then {
          var value = parser.&.parse_expr(true, true)? or
            return bad_input[ToastExpr](error(
              "Expected value of field.", parser.src_of_rest()))
          parser.&.ensure_is_at_end()?
          value
        } else {
          parser.&.ensure_is_at_end()?
          var children = child.children.parse_exprs()?
          children.len == 1 or
            return bad_input[ToastExpr](error(
              "Fields can only have one value.", parser.src_of_rest()))
          children.get(0)
        }
      } else {
        parser.&.ensure_is_at_end()?
        ToastExpr.name(name)
      }

    fields.&.push(ToastField { name, value })
  }

  parsed(ToastExpr.struct_(ToastStruct {
    ampersand, fields = fields.to_slice()
  }))
}
