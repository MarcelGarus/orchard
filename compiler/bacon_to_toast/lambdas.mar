import mod.mar

fun parse_lambda_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  parser.consume("\\") or return no_match[ToastType]()

  var args = parser.parse_type_atoms()?

  parser.consume("->") or
    return bad_input[ToastType](error(
      "Expected lambda arrow ->.", parser.src_of_rest()))

  var return_type = parser.parse_type_atom()? or
    return bad_input[ToastType](error(
      "Expected the lambda return type.", parser.src_of_rest()))

  parsed(ToastType.lambda(ToastTypeLambda {
    args, return_type = return_type.put_on_heap(),
  }))
}

fun parse_lambda(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var backslash = parser.&.consume("\\") or return no_match[ToastExpr]()

  var params = list[ToastParam]()
  loop params.&.push(parser.&.parse_param()? or break)

  var arrow = parser.&.consume("->") or
    return bad_input[ToastExpr](error("Expected arrow.", parser.src_of_rest()))

  var body = parser.&.parse_expr(true, true)? or
    return bad_input[ToastExpr](error(
      "Expected body of the lambda.", parser.src_of_rest()))

  parsed(ToastExpr.lambda(ToastLambda {
    backslash,
    params = params.to_slice(),
    body = body.put_on_heap(),
  }))
}

fun parse_lambda(bacon: Bacon): Result[Maybe[ToastExpr], Error] {
  var parser = parser(bacon.line, bacon.src)

  var backslash = parser.&.consume("\\") or return no_match[ToastExpr]()

  var params = list[ToastParam]()
  loop params.&.push(parser.&.parse_param()? or break)

  var arrow = parser.&.consume("->") or
    return bad_input[ToastExpr](error("Expected arrow.", parser.src_of_rest()))

  var body =
    if bacon.children.is_empty() then {
      var body = parser.&.parse_expr(true, true)? or
        return bad_input[ToastExpr](error(
          "Expected body of the lambda.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      body
    } else {
      parser.&.ensure_is_at_end()?
      var children = bacon.children.parse_exprs()?
      if children.is_empty() then
        return bad_input[ToastExpr](error(
          "Expected lambda body.", arrow.src))
      ToastExpr.body(children)
    }

  parsed(ToastExpr.lambda(ToastLambda {
    backslash,
    params = params.to_slice(),
    body = body.put_on_heap(),
  }))
}

fun parse_param(parser: &LineParser): Result[Maybe[ToastParam], Error] {
  var name = parser.parse_name() or return no_match[ToastParam]()

  parser.consume(":") or
    return bad_input[ToastParam](error(
      "Expected : after param {name.string}.", name.src))

  var type = parser.&.parse_type_atom()? or
    return bad_input[ToastParam](error(
      "Expected type of param {name.string}", name.src))

  parsed(ToastParam { name, type })
}
