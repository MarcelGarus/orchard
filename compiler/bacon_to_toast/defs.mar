import mod.mar

fun parse_type_def(bacon: Bacon): Result[Maybe[ToastTypeDef], Error] {
  var parser = parser(bacon.line, bacon.src)

  var name = parser.&.parse_type_name() or return no_match[ToastTypeDef]()

  var params = list[StringAndSrc]()
  loop params.&.push(parser.&.parse_type_variable() or break)

  parser.&.consume("=") or
    return bad_input[ToastTypeDef](error(
      "expected = after type signature", parser.src_of_rest()))

  var type =
    if bacon.children.is_empty() then {
      var type = parser.&.parse_type_expr()? or
        return bad_input[ToastTypeDef](error(
          "Expected a type expression.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      type
    } else {
      parser.&.ensure_is_at_end()?
      bacon.children.len == 1 or
        return bad_input[ToastTypeDef](error(
          "Type definition, but it has {bacon.children.len} children.",
          bacon.children.first().src ... bacon.children.last().src,
        ))
      bacon.children.get(0).parse_type()?
    }

  parsed(ToastTypeDef { name, params = params.to_slice(), type })
}

fun parse_fun_def(bacon: Bacon): Result[Maybe[ToastFun], Error] {
  var parser = parser(bacon.line, bacon.src)

  var name = parser.&.parse_name() or return no_match[ToastFun]()

  var params = list[ToastParam]()
  loop params.&.push(parser.&.parse_param()? or break)

  parser.&.consume("->") or
    return bad_input[ToastFun](error(
      "Expected -> for function {name.string}", parser.src_of_rest()))

  var return_type = parser.&.parse_type_atom()? or
    return bad_input[ToastFun](error(
      "Expected return type", parser.src_of_rest()))

  var equal_sign = parser.&.consume("=") or
    return bad_input[ToastFun](error("Expected =", parser.src_of_rest()))

  var body =
    if bacon.children.is_empty() then {
      var body = parser.&.parse_expr(true, true)? or
        return bad_input[ToastFun](error(
          "Expected fun body.", parser.src_of_rest()))
      parser.&.ensure_is_at_end()?
      body
    } else {
      var children = bacon.children.parse_exprs()?
      if children.is_empty() then
        return bad_input[ToastFun](error(
          "Expected function body.", equal_sign.src))
      ToastExpr.body(children)
    }

  parsed(ToastFun { name, params = params.to_slice(), return_type, body })
}
