import mod.mar

fun parse_parenthesized_type(parser: &LineParser): Result[Maybe[ToastType], Error] {
  var opening_paren = parser.consume("(") or return no_match[ToastType]()

  var type = parser.parse_type(true)? or
    return bad_input[ToastType](error(
      "Expected type after parenthesis.", opening_paren.src))

  var closing_paren = parser.consume(")") or
    return bad_input[ToastType](error(
      "Expected a closing parenthesis.", parser.src_of_rest()))

  return parsed(type)
}

fun parse_parenthesized(parser: &LineParser): Result[Maybe[ToastExpr], Error] {
  var opening_paren = parser.consume("(") or return no_match[ToastExpr]()
  var expr = parser.parse_expr(true, true)? or
    return bad_input[ToastExpr](error(
      "Expected expression after parenthesis.", opening_paren.src))
  var closing_paren = parser.consume(")") or
    return bad_input[ToastExpr](error(
      "Expected the closing parenthesis.", parser.src_of_rest()))
  parsed(expr)
}