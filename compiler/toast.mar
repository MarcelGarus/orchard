| Totally Okay Abstract Syntax Tree  
|
| Tree that represents the syntactical language constructs. This data structure
| should roughly correspond to the content of Plum files.

import plum.mar

struct Toast { defs: Slice[ToastDef] }
enum ToastDef {
  import_: ToastImport,
  export: ToastExport,
  type: ToastTypeDef,
  fun_: ToastFun,
}

struct ToastImport { keyword: StringAndSrc, parts: Slice[ToastImportPart] }
struct ToastImportPart {
  module: String, items: Slice[ToastImportExportItem]
}
struct ToastExport {
  keyword: StringAndSrc, items: Slice[ToastImportExportItem]
}
enum ToastImportExportItem { type: ToastTypeSignature, fun_: ToastFunSignature }
struct ToastTypeSignature { name: StringAndSrc, args: Slice[StringAndSrc] }
struct ToastFunSignature { name: StringAndSrc, args: Slice[ToastParam] }

struct ToastTypeDef {
  name: StringAndSrc, params: Slice[StringAndSrc], type: ToastType
}
enum ToastType {
  primitive: ToastTypePrimitive,
  variable: StringAndSrc,
  call: ToastTypeCall,
  struct_: Slice[ToastTypeField],
  enum_: Slice[ToastTypeVariant],
  lambda: ToastTypeLambda,
}
struct ToastTypePrimitive { name: String, args: Slice[ToastType] }
struct ToastTypeCall { name: StringAndSrc, args: Slice[ToastType] }
struct ToastTypeField { name: StringAndSrc, type: ToastType }
struct ToastTypeVariant { name: StringAndSrc, type: ToastType }
struct ToastTypeLambda { args: Slice[ToastType], return_type: &ToastType }

struct ToastFun {
  name: StringAndSrc,
  params: Slice[ToastParam],
  return_type: ToastType,
  body: ToastExpr,
}
struct ToastParam { name: StringAndSrc, type: ToastType }
enum ToastExpr {
  todo: Src,
  int: IntAndSrc,
  string: StringAndSrc,
  type: ToastType,
  struct_: ToastStruct,
  enum_: ToastEnum,
  switch_: ToastSwitch,
  name: StringAndSrc,
  lambda: ToastLambda,
  call: ToastCall,
  var_: ToastVar,
  body: Slice[ToastExpr],
}
struct ToastStruct { ampersand: StringAndSrc, fields: Slice[ToastField] }
struct ToastField { name: StringAndSrc, value: ToastExpr }
struct ToastEnum { pipe: StringAndSrc, name: StringAndSrc, value: &ToastExpr }
struct ToastSwitch {
  condition: &ToastExpr, percent: StringAndSrc, cases: Slice[ToastCase]
}
struct ToastCase {
  symbol: StringAndSrc, payload: Maybe[ToastExpr], body: ToastExpr
}
struct ToastLambda {
  backslash: StringAndSrc, params: Slice[ToastParam], body: &ToastExpr
}
struct ToastCall { function: &ToastExpr, args: Slice[ToastExpr] }
struct ToastVar {
  left: &ToastExpr, equal_sign: StringAndSrc, right: &ToastExpr
}

struct IntAndSrc { int: Int, src: Src }
struct StringAndSrc { string: String, src: Src }

fun @(int: Int, src: Src): _ { IntAndSrc { int, src } }
fun @(string: String, src: Src): _ { StringAndSrc { string, src } }

fun ==(a: &ToastType, b: &ToastType): Bool { a.* == b.* }
fun ==(a: ToastType, b: ToastType): Bool {
  switch a
  case primitive(a) if b is primitive(b) then a == b else false
  case variable(a) if b is variable(b) then a.string == b.string else false
  case call(a)     if b is call(b)     then a == b else false
  case struct_(a)  if b is struct_(b)  then a == b else false
  case enum_(a)    if b is enum_(b)    then a == b else false
  case lambda(a)   if b is lambda(b)   then a == b else false
}
fun ==(a: ToastTypePrimitive, b: ToastTypePrimitive): Bool {
  a.name == b.name and a.args == b.args
}
fun ==(a: ToastTypeCall, b: ToastTypeCall): Bool {
  a.name.string == b.name.string and a.args == b.args
}
fun ==(a: ToastTypeField, b: ToastTypeField): Bool {
  a.name.string == b.name.string and a.type == b.type
}
fun ==(a: ToastTypeVariant, b: ToastTypeVariant): Bool {
  a.name.string == b.name.string and a.type == b.type
}
fun ==(a: ToastTypeLambda, b: ToastTypeLambda): Bool {
  a.args == b.args and a.return_type == b.return_type
}

fun write[W](writer: W, toast: Toast) {
  var first = true
  for def in toast.defs do {
    if first then first = false else writer."\n"
    writer.write(def, no_indentation)
  }
}
fun write[W](writer: W, def: ToastDef, indentation: Indentation) {
  writer."{indentation}"
  switch def
  case import_(import_) {
    writer."import"
    for part in import_.parts do {
      writer."\n  {part.module.debug()}"
      for item in part.items do writer."\n    {item}"
    }
  }
  case export(export) {
    writer."export"
    for item in export.items do writer."\n  {item}"
  }
  case type(type) {
    writer."{type.name.string}"
    for param in type.params do writer." {param.string}"
    writer." = "
    writer."{type.type}"
  }
  case fun_(fun_) {
    writer."{fun_.name.string}"
    for param in fun_.params do writer." {param.name.string}: {param.type}"
    writer." -> {fun_.return_type} =\n"
    writer.write(fun_.body, indentation + 1)
  }
}
fun write[W](writer: W, item: ToastImportExportItem) {
  switch item
  case type(signature) writer."{signature}"
  case fun_(signature) writer."{signature}"
}
fun write[W](writer: W, signature: ToastTypeSignature) {
  writer."{signature.name.string}"
  for arg in signature.args do writer." {arg.string}"
}
fun write[W](writer: W, signature: ToastFunSignature) {
  writer."{signature.name.string}"
  for arg in signature.args do writer." {arg.name.string}: {arg.type}"
}
fun write[W](writer: W, type: ToastType) {
  switch type
  case primitive(primitive) {
    writer."{primitive.name}"
    for arg in primitive.args do writer." {arg}"
  }
  case variable(variable) writer."{variable.string}"
  case call(call) {
    writer."{call.name.string}"
    for arg in call.args do writer." {arg}"
  }
  case struct_(fields) {
    writer."&"
    for field in fields do
      writer." {field.name.string}: {field.type.without_whitespace()}"
  }
  case enum_(variants) {
    writer."|"
    for variant in variants do writer." {variant.name.string}: {variant.type}"
  }
  case lambda(lambda) {
    writer."\\"
    for arg in lambda.args do writer." {arg.without_whitespace()}"
    writer." -> {lambda.return_type.*.without_whitespace()}"
  }
}
fun write[W](writer: W, type: FormatWithoutWhitespace[ToastType]) {
  switch type.value
  case primitive writer."({type.value})"
  case variable writer."{type.value}"
  case call writer."({type.value})"
  case struct_ writer."({type.value})"
  case enum_ writer."({type.value})"
  case lambda writer."({type.value})"
}
fun write[W](writer: W, body: Slice[ToastExpr], indentation: Indentation) {
  var first = true
  for expr in body do {
    if first then first = false else writer."\n"
    writer.write(expr, indentation)
  }
}
fun write[W](writer: W, expr: ToastExpr, indentation: Indentation) {
  switch expr
  case todo writer."..."
  case int(int) writer."{indentation}{int.int}"
  case string(string) writer."{indentation}{string.string.debug()}"
  case type(type) writer."{indentation}{type}"
  case struct_(struct_) {
    var is_first = true
    for field in struct_.fields do {
      writer."{indentation}{if is_first then "& " else "  "}{field.name.string}:\n"
      writer.write(field.value, indentation + 2)
      is_first = false
    }
    if struct_.fields.is_empty() then writer."{indentation}&"
  }
  case enum_(enum_) {
    writer."{indentation}| {enum_.name.string}:\n"
    writer.write(enum_.value.*, indentation + 2)
  }
  case switch_(switch_) {
    writer.write(switch_.condition.*, indentation)
    var is_first = true
    for case_ in switch_.cases do {
      writer."\n{indentation}{if is_first then "% " else "  "}
        '{case_.symbol.string}:\n"
      writer.write(case_.body, indentation + 2)
      is_first = false
    }
  }
  case name(name) writer."{indentation}{name.string}"
  case lambda(lambda) {
    writer."{indentation}\\"
    for param in lambda.params do writer." {param.name.string}"
    writer." =\n"
    writer.write(lambda.body.*, indentation + 1)
  }
  case call(call) {
    writer.write(call.function.*, indentation)
    writer."\n"
    writer.write(call.args, indentation + 1)
  }
  case var_(var_) {
    writer."{indentation}variable\n"
    writer.write(var_.left.*, indentation + 1)
    writer."\n"
    writer.write(var_.right.*, indentation + 1)
  }
  case body(body) writer.write(body, indentation)
}

fun src(expr: ToastExpr): Src {
  switch expr
  case todo(src) src
  case int(int) int.src
  case string(string) string.src
  case type invalid_src
  case struct_(struct_) {
    struct_.ampersand.src ...
      if struct_.fields.last_maybe() is some(field) then
        field.value.src()
      else
        struct_.ampersand.src
  }
  case enum_(enum_) enum_.pipe.src ... enum_.value.src()
  case switch_(switch_) {
    switch_.percent.src ...
      if switch_.cases.last_maybe() is some(case_) then
        case_.body.src()
      else
        switch_.percent.src
  }
  case name(name) name.src
  case lambda(lambda) lambda.backslash.src ... lambda.body.src()
  case call(call) call.function.src() ... call.args.last().src()
  case var_(var_) var_.left.src() ... var_.right.src()
  case body(body) body.first().src() ... body.last().src()
}
