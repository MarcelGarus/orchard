| Program Using Dup and Drop Instructions to Neutralize Garbage  

import plum.mar

struct Pudding { funs: Map[String, PuddingFun] }

struct PuddingFun { dag: Dag[PuddingExpr], body: PuddingBody }
struct PuddingBody { params: Slice[Id], exprs: Slice[Id], returns: Id }
struct PuddingExpr { op: PuddingOp, type: YogurtType }

enum PuddingOp {
  param,
  int: Int,
  string: String,
  type: YogurtType,
  struct_: Map[String, Id],
  member: PuddingMember,
  enum_: PuddingEnum,
  switch_: PuddingSwitch,
  closure: Id,
  get_closure: Id,
  lambda: PuddingLambda,
  call: PuddingCall,
  dup: Id,
  drop: Id,
}
struct PuddingMember { of: Id, name: String }
struct PuddingSwitch { condition: Id, cases: Map[String, PuddingBody] }
struct PuddingEnum { name: String, value: Id }
struct PuddingLambda { function: String, closure: Id }
struct PuddingCall { callee: PuddingCallee, args: Slice[Id] }
enum PuddingCallee { lambda: Id, fun_: String, builtin: PuddingBuiltin }
enum PuddingBuiltin {
  lower_byte, byte_to_int,
  add_ints, sub_ints, mul_ints, div_ints, mod_ints, and_ints, or_ints, xor_ints,
  compare_ints,
  generate_array, array_get, array_set, array_slice, array_len,
  crash,
}

| Constructing Pudding  

fun pudding(): Pudding { Pudding { funs = map[String, PuddingFun]() } }

fun $(op: PuddingOp, type: YogurtType): _ { PuddingExpr { op, type } }

fun return_type(fun_: PuddingFun): YogurtType {
  fun_.dag.type_of(fun_.body.returns)
}

| Writing Pudding  

fun write[W](writer: W, pudding: Pudding) {
  var first = true
  for fun_ in pudding.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, body: PuddingBody, fun_: PuddingFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.exprs do {
    var expr = fun_.dag.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: PuddingOp, fun_: PuddingFun, indentation: Int) {
  switch op
  case param(param) writer."param {param}"
  case int(int) writer."int {int}"
  case string(string) writer."string {string.debug()}"
  case type(type) writer."type {type}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."| {enum_.name} {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case closure(captured) writer."closure of {captured}"
  case get_closure(closure) writer."get_closure {closure}"
  case lambda(lambda) {
    writer."lambda [closure {lambda.closure}] {lambda.function}"
  }
  case call(call) {
    writer."call {call.callee}"
    for arg in call.args do writer." {arg}"
  }
  case dup(id) writer."dup {id}"
  case drop(id) writer."drop {id}"
}
fun write[W](writer: W, callee: PuddingCallee) {
  switch callee
  case lambda(lambda) writer."{lambda}"
  case fun_(fun_) writer."\"{fun_}\""
  case builtin(builtin) writer."{builtin.debug()}"
}
