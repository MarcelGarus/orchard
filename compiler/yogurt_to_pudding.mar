| Converting Yogurt to Pudding  

import plum.mar

fun to_pudding(
  expr: YogurtExpr,
  fun_: YogurtFun,
  fun_builder: &PuddingFunBuilder, builder: &PuddingBodyBuilder,
  mapping: &Map[Id, PuddingId],
  yogurt: Yogurt,
): PuddingExpr {
  switch expr.op
  case param unreachable()
  case uninitialized unreachable()
  case int(int) PuddingOp.int(int) $ type_int
  case string(string) PuddingOp.string(string) $ type_string
  case struct_(struct_) {
    var fields = map[String, PuddingId]()
    for field in struct_ do {
      var id = mapping.get(field.value)
      builder.push(PuddingOp.dup(id) $ PlumType.never)
      fields.&.put(field.key, id)
    }
    PuddingOp.struct_(fields) $ expr.type
  }
  case member(member) {
    | TODO: dup extracted member, not the original of (that is not freed at the end)
    var of = mapping.get(member.of)
    builder.push(PuddingOp.dup(of) $ PlumType.never)
    PuddingOp.member(PuddingMember { of, name = member.name }) $ expr.type
  }
  case enum_(enum_) {
    var value = mapping.get(enum_.value)
    builder.push(PuddingOp.dup(value) $ PlumType.never)
    PuddingOp.enum_(PuddingEnum { name = enum_.name, value }) $ expr.type
  }
  case switch_(switch_) {
    var condition = mapping.get(switch_.condition)
    builder.push(PuddingOp.dup(condition) $ PlumType.never)
    var cases = map[String, PuddingBody]()
    for case_ in switch_.cases do
      cases.&.put(case_.key, case_.value.to_pudding(
        fun_, fun_builder, mapping, yogurt
      ))
    PuddingOp.switch_(PuddingSwitch { condition, cases }) $ expr.type
  }
  case lambda(lambda) {
    var captures = list[PuddingId]()
    for capture in lambda.captures do {
      var id = mapping.get(capture)
      builder.push(PuddingOp.dup(id) $ PlumType.never)
      captures.&.push(id)
    }
    PuddingOp.lambda(PuddingLambda {
      function = lambda.function, captures = captures.to_slice()
    }) $ expr.type
  }
  case call(call) {
    var args = list[PuddingId]()
    for arg in call.args do {
      var id = mapping.get(arg)
      builder.push(PuddingOp.dup(id) $ PlumType.never)
      args.&.push(id)
    }
    var args = args.to_slice()

    switch call.callee
    case lambda(lambda) {
      var lambda = mapping.get(lambda)
      builder.push(PuddingOp.dup(lambda) $ PlumType.never)
      PuddingOp.lambda_call(PuddingLambdaCall { lambda, args }) $ expr.type
    }
    case fun_(fun_) {
      PuddingOp.call(PuddingCall { function = fun_, args }) $ expr.type
    }
    case builtin(builtin) {
      PuddingOp.instruction(PuddingInstruction {
        instruction =
          switch builtin
          case add_ints Instruction.add_ints
          case sub_ints Instruction.sub_ints
          case mul_ints Instruction.mul_ints
          case div_ints Instruction.div_ints
          case mod_ints Instruction.mod_ints
          case and_ints Instruction.and_ints
          case or_ints Instruction.or_ints
          case xor_ints Instruction.xor_ints
          case compare_ints Instruction.compare_ints
          case concat_strings Instruction.concat_strings
          case crash Instruction.crash,
        args,
      }) $ expr.type
    }
  }
  case type(type) PuddingOp.type(type) $ type_type
}

fun to_pudding(
  body: YogurtBody,
  fun_: YogurtFun, fun_builder: &PuddingFunBuilder,
  mapping: &Map[Id, PuddingId], yogurt: Yogurt,
): PuddingBody {
  var builder = fun_builder.&.body_builder()
  for param in body.params do {
    var id = builder.&.push_param(fun_.dag.get(param).type)
    mapping.&.put(param, id)
  }
  for id in body.children do {
    var expr = builder.&.push(fun_.dag.get(id).to_pudding(
      fun_, fun_builder, builder.&, mapping, yogurt
    ))
    mapping.&.put(id, expr)
  }
  var returns = mapping.get(body.returns)

  builder.&.push(PuddingOp.dup(returns) $ PlumType.never)
  for param in body.params do
    builder.&.push(PuddingOp.drop(mapping.get(param)) $ PlumType.never)
  for id in body.children do
    builder.&.push(PuddingOp.drop(mapping.get(id)) $ PlumType.never)

  builder.returns(returns)
}

fun to_pudding(fun_: YogurtFun, yogurt: Yogurt, pudding: &Pudding): PuddingFun {
  var fun_builder = pudding_fun_builder()
  var mapping = map[Id, PuddingId]()

  var captures =
    switch fun_.captures
    case none none[Slice[PuddingId]]()
    case some(captures) {
      var mapped = list[PuddingId]()
      for capture in captures do {
        var id = fun_builder.&.create(PuddingOp.param $ fun_.dag.get(capture).type)
        mapping.&.put(capture, id)
        mapped.&.push(id)
      }
      some(mapped.to_slice())
    }

  var body = fun_.body.to_pudding(
    fun_, fun_builder.&, mapping.&, yogurt
  )
  fun_builder.finish(captures, body)
}

fun to_pudding(yogurt: Yogurt): Pudding {
  var pudding = pudding()
  for fun_ in yogurt.funs do {
    eprintln("Compiling {fun_.key}")
    pudding.funs.&.put(fun_.key, fun_.value.to_pudding(yogurt, pudding.&))
  }
  pudding
}
