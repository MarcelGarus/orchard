import plum.mar

enum PestoValue {
  byte: Byte,
  int: Int,
  ptr: &PestoHeapValue,
  struct_: Map[String, PestoValue],
  enum_: PestoEnumValue,
  buffer: &PestoBufferValue,
  function_ptr: String,
}
struct PestoHeapValue {
  refcount: Int, freed: Bool, type: PestoType, value: PestoValue
}
struct PestoBufferValue {
  refcount: Int, freed: Bool, item_type: PestoType, items: Slice[PestoValue]
}
struct PestoEnumValue { name: String, value: &PestoValue }

var placeholder_pesto_value = PestoValue.int(0)

fun write[W](writer: W, value: PestoValue) {
  switch value
  case byte(byte) writer."{byte}"
  case int(int) writer."{int}"
  case ptr(ptr) writer."(Ptr {ptr.*.value})"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(enum_) writer."(| {enum_.name}: {enum_.value})"
  case buffer(buffer) {
    writer."(Buffer"
    for item in buffer.items do writer." {item}"
    writer.")"
  }
  case function_ptr(signature) writer."(FunctionPtr {signature.debug()})"
}

fun as_string(value: PestoValue): String {
  var array = value.struct_.unwrap().get("utf8_bytes").struct_.unwrap()
  var buffer_bytes = array.get("buffer").buffer.unwrap().items.subslice(
    array.get("start").int.unwrap() ..+ array.get("len").int.unwrap()
  )
  var bytes = list[Byte]()
  for byte in buffer_bytes do bytes.&.push(byte.byte.unwrap())
  bytes.to_slice().to_string()
}

fun run(pesto: Pesto, args: Slice[PestoValue]): PestoValue {
  var fields = map[String, PestoValue]()
  for arg in args.iter().enumerate() do fields.&.put("{arg.index}", arg.item)
  pesto.entry_point.run(PestoValue.struct_(fields), pesto, list[String]().&)
}

fun run(
  function: String, args: PestoValue, pesto: Pesto, stack: &List[String]
): PestoValue {
  for i in 0..stack.len do eprint(" ")
  eprintln("\"{function}\" {args}")

  var visible = map[Id, PestoValue]()
  stack.push(function)
  var fun_ = pesto.funs.get(function)
  var value = fun_.body.run(args, fun_.dag, visible.&, pesto, stack)
  stack.pop()

  for i in 0..stack.len do eprint(" ")
  eprintln("-> {value}")

  value
}

fun run(
  body: PestoBody, args: PestoValue, dag: Dag[PestoExpr],
  visible: &Map[Id, PestoValue], pesto: Pesto,
  stack: &List[String],
): PestoValue {
  visible.put(body.param, args)
  for id in body.exprs do {
    var value = dag.get(id).run(dag, visible, pesto, stack)
    | eprintln("{id} = {value}")
    visible.put(id, value)
  }
  visible.get(body.returns)
}

fun run(
  expr: PestoExpr, dag: Dag[PestoExpr],
  visible: &Map[Id, PestoValue], pesto: Pesto, stack: &List[String],
): PestoValue {
  | stderr."Run "
  | stderr.write(expr.op, dag, 1)
  | stderr."\n"

  switch expr.op
  case param unreachable()
  case byte(byte) PestoValue.byte(byte)
  case int(int) PestoValue.int(int)
  case struct_(struct_) {
    var fields = map[String, PestoValue]()
    for field in struct_ do fields.&.put(field.key, visible.get(field.value))
    PestoValue.struct_(fields)
  }
  case member(member) visible.get(member.of).struct_.unwrap().get(member.name)
  case enum_(enum_)
    PestoValue.enum_(PestoEnumValue {
      name = enum_.name, value = visible.get(enum_.value).put_on_heap()
    })
  case switch_(switch_) {
    var condition = visible.get(switch_.condition).enum_.unwrap()
    var case_ = switch_.cases.get(condition.name)
    case_.run(condition.value.*, dag, visible, pesto, stack)
  }
  case function_ptr(signature) PestoValue.function_ptr(signature)
  case call(call) call.function.run(visible.get(call.args), pesto, stack)
  case call_indirect(call)
    visible.get(call.function).function_ptr.unwrap()
      .run(visible.get(call.args), pesto, stack)
  case call_builtin(call) {
    var args = list[PestoValue]()
    for arg in call.args do args.&.push(visible.get(arg))
    var args = args.to_slice()

    switch call.builtin
    case lower_byte PestoValue.byte(args.get(0).int.unwrap().lower_byte())
    case byte_to_int PestoValue.int(args.get(0).byte.unwrap().to_int())
    case add_ints PestoValue.int(args.get(0).int.unwrap() + args.get(1).int.unwrap())
    case sub_ints PestoValue.int(args.get(0).int.unwrap() - args.get(1).int.unwrap())
    case mul_ints PestoValue.int(args.get(0).int.unwrap() * args.get(1).int.unwrap())
    case div_ints PestoValue.int(args.get(0).int.unwrap() / args.get(1).int.unwrap())
    case mod_ints PestoValue.int(args.get(0).int.unwrap() % args.get(1).int.unwrap())
    case and_ints PestoValue.int(args.get(0).int.unwrap() & args.get(1).int.unwrap())
    case or_ints PestoValue.int(or(args.get(0).int.unwrap(), args.get(1).int.unwrap()))
    case xor_ints PestoValue.int(args.get(0).int.unwrap() ^ args.get(1).int.unwrap())
    case compare_ints
      PestoValue.enum_(PestoEnumValue {
        name =
          switch args.get(0).int.unwrap() <=> args.get(1).int.unwrap()
          case less "less"
          case equal "equal"
          case greater "greater",
        value = PestoValue.struct_(map[String, PestoValue]()).put_on_heap(),
      })
    case crash panic(stack, "Plum code crashed: {args.get(0)}")
  }
  case new(value)
    PestoValue.ptr(PestoHeapValue {
      refcount = 1,
      freed = false,
      type = dag.type_of(value),
      value = visible.get(value),
    }.put_on_heap())
  case load(ptr) {
    var heap_value = visible.get(ptr).ptr.unwrap().*
    if heap_value.freed then panic(stack, "use after free")
    if heap_value.type != expr.type then
      panic(
        stack,
        "load with mismatched type: expected {expr.type}, but value on heap 
        'has type {heap_value.type}",
      )
    heap_value.value
  }
  case free(free) {
    var ptr = visible.get(free.ptr).ptr.unwrap()
    if ptr.refcount != 0 then
      panic(stack, "freeing ptr with refcount {ptr.refcount}")
    if ptr.type != free.type then
      panic(stack, "freeing ptr to {free.type}, but it points to {ptr.type}")
    ptr.freed = true
    placeholder_pesto_value
  }
  case new_buffer(new) {
    var len = visible.get(new.len).int.unwrap()
    PestoValue.buffer(PestoBufferValue {
      refcount = 1,
      freed = false,
      item_type = new.item_type,
      items = uninitialized_slice[PestoValue](len),
    }.put_on_heap())
  }
  case get_buffer_len(buffer) {
    var buffer = visible.get(buffer).buffer.unwrap()
    if buffer.freed then panic(stack, "use after free")
    PestoValue.int(buffer.items.len)
  }
  case load_buffer_item(load) {
    var buffer = visible.get(load.buffer).buffer.unwrap()
    if buffer.freed then panic(stack, "use after free")
    if buffer.item_type != expr.type then
      panic(
        stack,
        "load buffer item with mismatched type: tried to load {expr.type}, but 
        'buffer contains items of {buffer.item_type}",
      )
    buffer.items.get(visible.get(load.index).int.unwrap())
  }
  case store_buffer_item(store) {
    var buffer = visible.get(store.buffer).buffer.unwrap()
    if buffer.freed then panic(stack, "use after free")
    if buffer.item_type != dag.type_of(store.item) then
      panic(
        stack,
        "store buffer item with mismatched type: tried to store 
        '{dag.type_of(store.item)}, but buffer contains items of 
        '{buffer.item_type}",
      )
    buffer.items.&
      .set(visible.get(store.index).int.unwrap(), visible.get(store.item))
    placeholder_pesto_value
  }
  case store_buffer_bytes(store) {
    var buffer = visible.get(store.buffer).buffer.unwrap()
    if buffer.freed then panic(stack, "use after free")
    if buffer.item_type != PestoType.byte then
      panic(
        stack, "tried to store literal bytes into buffer of {buffer.item_type}"
      )
    var items = visible.get(store.buffer).buffer.unwrap().items
    for byte in store.bytes.iter().enumerate() do
      items.&.set(byte.index, PestoValue.byte(byte.item))
    placeholder_pesto_value
  }
  case free_buffer(free) {
    var buffer = visible.get(free.buffer).buffer.unwrap()
    if buffer.freed then panic(stack, "double free")
    if buffer.refcount != 0 then
      panic(stack, "freeing buffer with refcount {buffer.refcount}")
    if buffer.item_type != free.item_type then
      panic(
        stack,
        "freeing buffer to {free.item_type}, but it's a buffer of 
        '{buffer.item_type}",
      )
    placeholder_pesto_value
  }
  case get_reference_count(ptr) {
    switch visible.get(ptr)
    case ptr(ptr) {
      if ptr.freed then panic(stack, "use after free")
      PestoValue.int(ptr.refcount)
    }
    case buffer(buffer) {
      if buffer.freed then panic(stack, "use after free")
      PestoValue.int(buffer.refcount)
    }
    default panic(stack, "getting refcount of non-ptr/buffer")
  }
  case increment_reference_count(ptr) {
    switch visible.get(ptr)
    case ptr(ptr) {
      if ptr.freed then panic(stack, "use after free")
      ptr.refcount = ptr.refcount + 1
      PestoValue.int(ptr.refcount)
    }
    case buffer(buffer) {
      if buffer.freed then panic(stack, "use after free")
      buffer.refcount = buffer.refcount + 1
      PestoValue.int(buffer.refcount)
    }
    default panic(stack, "incrementing refcount of non-ptr/buffer")
  }
  case decrement_reference_count(ptr) {
    switch visible.get(ptr)
    case ptr(ptr) {
      if ptr.freed then panic(stack, "use after free")
      ptr.refcount = ptr.refcount - 1
      PestoValue.int(ptr.refcount)
    }
    case buffer(buffer) {
      if buffer.freed then panic(stack, "use after free")
      buffer.refcount = buffer.refcount - 1
      PestoValue.int(buffer.refcount)
    }
    default
      panic(
        stack,
        "decrementing refcount of non-ptr/buffer {visible.get(ptr).debug()}"
      )
  }
}

fun panic(stack: &List[String], message: String): Never {
  stderr."Panicked: {message}\n"
  for entry in stack.to_slice().rev_iter() do stderr."- {entry}\n"
  exit(1)
}
