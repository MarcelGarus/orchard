| Expression-Guided Graph  
| A representation of code that is simplified and more suitable for
| type-checking.
|
| Types:
|   Names of types are resolved. Usages of type definitions (which are more like
|   aliases anyway) have been resolved so that types have no names anymore â€“
|   they are completely structural.
|
| Functions:
|   Names of locals and types are resolved. Function calls are not resolved to
|   specific functions yet, as this requires overloading resolution. Nested
|   expressions in function bodies have been flattened to a series of small
|   expressions.

import plum.mar

struct Egg { entry_module: Module, funs: Map[String, EggFun] }

struct EggFun {
  module: Module, name: StringAndSrc, dag: Dag[EggExpr], body: EggBody
}
struct EggBody { params: Slice[Id], children: Slice[Id], returns: Id }

struct EggExpr { op: EggOp, type: PlumType, src: Src }
enum EggOp {
  param,
  int: Int,
  string: String,
  struct_: Map[String, Id],
  member: EggMember,
  enum_: EggEnum,
  switch_: EggSwitch,
  lambda: EggBody,
  call: EggCall,
  cast: Id,
  type: PlumType,
}
struct EggMember { of: Id, name: String }
struct EggSwitch { condition: Id, cases: Map[String, EggBody] }
struct EggEnum { name: String, value: Id }
struct EggCall { callee: EggCallee, args: Slice[Id] }
enum EggCallee { lambda: Id, fun_: MatchingFun, builtin: MatchingBuiltin }
struct MatchingFun { signature: String, substitutions: Substitutions }
struct MatchingBuiltin { builtin: EggBuiltin, substitutions: Substitutions }

enum EggBuiltin {
  | byte operations
  lower_byte, byte_to_int,
  | int operations
  add_ints, sub_ints, mul_ints, div_ints, mod_ints, and_ints, or_ints, xor_ints,
  compare_ints,
  | string operations
  concat_strings,
  | array operations
  generate_array, array_get, array_set, array_slice, array_len,
  | lambda operations
  call,
  | error stuff
  crash,
  | type operations
  type_of, type_info,
}

var egg_builtins =
  list(
    EggBuiltin.lower_byte, EggBuiltin.byte_to_int,
    EggBuiltin.add_ints, EggBuiltin.sub_ints, EggBuiltin.mul_ints,
    EggBuiltin.div_ints, EggBuiltin.mod_ints, EggBuiltin.and_ints,
    EggBuiltin.or_ints, EggBuiltin.xor_ints,
    EggBuiltin.compare_ints,
    EggBuiltin.concat_strings,
    EggBuiltin.generate_array, EggBuiltin.array_get, EggBuiltin.array_set,
    EggBuiltin.array_slice, EggBuiltin.array_len,
    EggBuiltin.call,
    EggBuiltin.crash,
    EggBuiltin.type_of, EggBuiltin.type_info,
  ).to_slice()

fun expr(op: EggOp, type: PlumType, src: Src): EggExpr {
  EggExpr { op, type, src }
}

fun param_types(fun_: EggFun): Slice[PlumType] {
  var types = list[PlumType]()
  for param in fun_.body.params do types.&.push(fun_.dag.type_of(param))
  types.to_slice()
}
fun return_type(fun_: EggFun): PlumType { fun_.dag.type_of(fun_.body.returns) }

fun write[W](writer: W, egg: Egg) {
  var first = true
  for fun_ in egg.funs do {
    var signature = fun_.key
    var fun_ = fun_.value
    if first then first = false else writer."\n"
    writer."{signature} = "
    writer.write(fun_.body, fun_.dag, 1)
  }
}
fun write[W](writer: W, body: EggBody, dag: Dag[EggExpr], indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.children do {
    for i in 0..indentation do writer."  "
    writer."{id}: {dag.type_of(id)} = "
    writer.write(dag.get(id), dag, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, expr: EggExpr, dag: Dag[EggExpr], indentation: Int) {
  switch expr.op
  case param(param) writer."param {param}"
  case int(int) writer."int {int}"
  case string(string) writer."string {string.debug()}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."| {enum_.name}: {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, dag, indentation + 2)
    }
  }
  case lambda(lambda) {
    writer."lambda"
    writer.write(lambda, dag, indentation + 1)
  }
  case call(call) {
    writer."call {call.callee}"
    for arg in call.args do writer." {arg}"
  }
  case cast(cast) writer."cast {cast}"
  case type(type) writer."type {type}"
}
fun write[W](writer: W, callee: EggCallee) {
  switch callee
  case lambda(lambda) writer."{lambda}"
  case fun_(fun_) writer."{fun_.signature} with {fun_.substitutions}"
  case builtin(builtin) writer."{builtin.builtin} with {builtin.substitutions}"
}
fun write[W](writer: W, builtin: EggBuiltin) { writer."{builtin.debug()}" }
