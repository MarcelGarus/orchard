| Converting Pudding to Pesto  

import ../plum.mar
import array_builtins.mar
import builder.mar
import dup_drop_free.mar
import types.mar

fun to_pesto(
  expr: PuddingExpr, fun_: PuddingFun,
  builder: &PestoBodyBuilder, mapping: &Map[Id, Id], pesto: &Pesto
): Id {
  var type = expr.type.to_pesto()

  switch expr.op
  case param unreachable()
  case int(int) builder.int(int)
  case string(string) builder.string(string)
  case array(items) {
    var item_type = expr.type.array.unwrap()
    var buffer = builder.new_buffer(item_type.to_pesto(), builder.int(items.len))
    for item in items.iter().enumerate() do
      builder.store_buffer_item(
        buffer, builder.int(item.index), mapping.get(item.item)
      )
    builder.struct_(map(
      "buffer" -> buffer,
      "start" -> builder.int(0),
      "len" -> builder.int(items.len),
    ))
  }
  case type builder.struct_(map[String, Id]())
  case struct_(struct_) {
    var fields = map[String, Id]()
    for field in struct_ do fields.&.put(field.key, mapping.get(field.value))
    builder.struct_(fields)
  }
  case member(member) builder.member(mapping.get(member.of), member.name)
  case enum_(enum_) {
    var value_type = type.enum_.unwrap().get(enum_.name)
    var value = mapping.get(enum_.value)
    if value_type is ptr then value = builder.new(value)
    builder.enum_(enum_.name, value, type)
  }
  case switch_(switch_) {
    var condition = mapping.get(switch_.condition)
    var cases = map[String, PestoBody]()
    for case_ in switch_.cases do {
      var payload_type = builder.type_of(condition).enum_.unwrap()
        .get(case_.key)
      var builder = body_builder(builder.dag, payload_type).&
      if case_.value.params.get_maybe(0) is some(binding) then {
        var payload =
          if payload_type is ptr then
            builder.load(
              builder.param, fun_.dag.type_of(binding).to_pesto()
            )
          else
            builder.param
        mapping.put(binding, payload)
      }
      var returns = case_.value.to_pesto(fun_, builder, mapping, pesto)
      var body = builder.finish(returns)
      cases.&.put(case_.key, body)
    }
    builder.switch_(condition, cases)
  }
  case closure(value) builder.new(mapping.get(value))
  case get_closure(closure) builder.load(mapping.get(closure), type)
  case lambda(lambda) {
    var closure_ptr = mapping.get(lambda.closure)
    var lambda_body_fun_ptr = builder.function_ptr(lambda.function)
    var free_fun_ptr = builder.function_ptr(
      compile_closure_free_fun(
        fun_.dag.type_of(lambda.closure).closure.unwrap().*, pesto
      )
    )
    builder.struct_(map(
      "closure" -> closure_ptr,
      "body" -> lambda_body_fun_ptr,
      "free" -> free_fun_ptr,
    ))
  }
  case call(call) {
    switch call.callee
    case fun_(fun_) {
      var args = map[String, Id]()
      for arg in call.args.iter().enumerate() do
        args.&.put("{arg.index}", mapping.get(arg.item))
      var args = builder.struct_(args)

      builder.call(fun_, args, type)
    }
    case lambda(lambda) {
      var lambda = mapping.get(lambda)
      var closure_ptr = builder.member(lambda, "closure")
      var body_ptr = builder.member(lambda, "body")

      var args = map[String, Id]()
      for arg in call.args.iter().enumerate() do
        args.&.put("{arg.index}", mapping.get(arg.item))
      args.&.put("closure", closure_ptr)
      var args = builder.struct_(args)

      builder.call_indirect(body_ptr, args, type)
    }
    case builtin(builtin) {
      var builtin =
        switch builtin
        case lower_byte PestoBuiltin.lower_byte
        case byte_to_int PestoBuiltin.byte_to_int
        case add_ints PestoBuiltin.add_ints
        case sub_ints PestoBuiltin.sub_ints
        case mul_ints PestoBuiltin.mul_ints
        case div_ints PestoBuiltin.div_ints
        case mod_ints PestoBuiltin.mod_ints
        case and_ints PestoBuiltin.and_ints
        case or_ints PestoBuiltin.or_ints
        case xor_ints PestoBuiltin.xor_ints
        case compare_ints PestoBuiltin.compare_ints
        case generate_array {
          var len       = call.args.get(0)
          var generator = call.args.get(1)
          var item_type = fun_.dag.type_of(generator).lambda.unwrap().return_type
          return builder.call(
            compile_generate_array(item_type.*, pesto),
            builder.struct_(map(
              "len" -> mapping.get(len),
              "generator" -> mapping.get(generator),
            )),
            type,
          )
        }
        case array_len {
          var array = call.args.get(0)
          var item_type =
            fun_.dag.type_of(array).assert_no_closure().extend_one_level()
              .primitive.unwrap().args.get(0).canonicalize().compile()
          return builder.call(
            compile_array_len(item_type, pesto),
            builder.struct_(map("array" -> mapping.get(array))),
            PestoType.int,
          )
        }
        case array_get {
          var array = call.args.get(0)
          var index = call.args.get(1)
          var item_type =
            fun_.dag.type_of(array).assert_no_closure().extend_one_level()
              .primitive.unwrap().args.get(0).canonicalize().compile()
          return builder.call(
            compile_array_get(expr.type, pesto),
            builder.struct_(map(
              "array" -> mapping.get(array),
              "index" -> mapping.get(index),
            )),
            type,
          )
        }
        case array_set {
          var array = call.args.get(0)
          var index = call.args.get(1)
          var item = call.args.get(2)
          return builder.call(
            compile_array_set(fun_.dag.type_of(item), pesto),
            builder.struct_(map(
              "array" -> mapping.get(array),
              "index" -> mapping.get(index),
              "item" -> mapping.get(item),
            )),
            pesto_array_type,
          )
        }
        case array_slice {
          var array = call.args.get(0)
          var range = call.args.get(1)
          var item_type =
            fun_.dag.type_of(array).assert_no_closure().extend_one_level()
              .primitive.unwrap().args.get(0).canonicalize().compile()
          return builder.call(
            compile_array_slice(item_type, pesto),
            builder.struct_(map(
              "array" -> mapping.get(array),
              "range" -> mapping.get(range),
            )),
            pesto_array_type,
          )
        }
        case crash PestoBuiltin.crash

      var args = list[Id]()
      for arg in call.args do args.&.push(mapping.get(arg))

      builder.call_builtin(builtin, args.to_slice(), type)
    }
  }
  case dup(value)
    builder.dup(mapping.get(value), fun_.dag.type_of(value), pesto)
  case drop(value)
    builder.drop(mapping.get(value), fun_.dag.type_of(value), pesto)
}

| Converts a body to pesto. Assumes that mappings for the parameters have
| already been added.
fun to_pesto(
  body: PuddingBody, fun_: PuddingFun,
  builder: &PestoBodyBuilder, mapping: &Map[Id, Id], pesto: &Pesto
): Id {
  for id in body.exprs do
    mapping.put(id, fun_.dag.get(id).to_pesto(fun_, builder, mapping, pesto))
  mapping.get(body.returns)
}

fun to_pesto(fun_: PuddingFun, pesto: &Pesto): PestoFun {
  | In the Pesto, functions accept a struct containing all arguments. So here,
  | we build a type for that.
  var param_type = {
    var param_types = map[String, PestoType]()
    for param in fun_.body.params.iter().enumerate() do
      param_types.&.put(
        "{param.index}", fun_.dag.type_of(param.item).to_pesto()
      )
    PestoType.struct_(param_types)
  }

  var dag = dag[PestoExpr]()
  var builder = body_builder(dag.&, param_type).&
  var mapping = map[Id, Id]().&

  | Extract the individual arguments from the struct.
  for param in fun_.body.params.iter().enumerate() do {
    var id = builder.member(builder.param, "{param.index}")
    mapping.put(param.item, id)
  }

  var body = builder.finish(fun_.body.to_pesto(fun_, builder, mapping, pesto))
  PestoFun { dag, body }
}

fun to_pesto(pudding: Pudding): Pesto {
  var pesto = pesto(pudding.entry_point)
  for fun_ in pudding.funs do
    pesto.funs.&.put(fun_.key, fun_.value.to_pesto(pesto.&))
  pesto
}
