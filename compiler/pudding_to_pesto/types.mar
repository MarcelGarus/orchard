import mod.mar

var pesto_array_type = PestoType.struct_(map[String, PestoType](
  "buffer" -> PestoType.ptr,
  "start" -> PestoType.int,
  "len" -> PestoType.int,
))

var pesto_lambda_type = PestoType.struct_(map(
  "closure" -> PestoType.ptr,
  "body" -> PestoType.ptr,
  "free" -> PestoType.ptr,
))

fun to_pesto(type: YogurtType): PestoType {
  switch type
  case byte PestoType.byte
  case int PestoType.int
  case type PestoType.struct_(map[String, PestoType]())
  case box PestoType.ptr
  case array pesto_array_type
  case never PestoType.never
  case struct_(struct_) {
    var fields = map[String, PestoType]()
    for field in struct_ do
      fields.&.put(field.key, field.value.to_pesto())
    PestoType.struct_(fields)
  }
  case enum_(enum_) {
    var variants = map[String, PestoType]()
    for variant in enum_ do {
      var payload = variant.value
      variants.&.put(
        variant.key,
        if payload.is_unboxed_recursive(1) then PestoType.ptr else payload.to_pesto(),
      )
    }
    PestoType.enum_(variants)
  }
  case closure PestoType.ptr
  case lambda pesto_lambda_type
  case recursive unreachable()
}

fun is_unboxed_recursive(type: YogurtType, depth: Int): Bool {
  switch type
  case byte false
  case int false
  case type false
  case box false
  case array(item) item.is_unboxed_recursive(depth + 1)
  case never false
  case struct_(struct_) {
    for field in struct_ do
      if field.value.is_unboxed_recursive(depth + 1) then return true
    false
  }
  case enum_(enum_) {
    for variant in enum_ do
      if variant.value.is_unboxed_recursive(depth + 1) then return true
    false
  }
  case closure unreachable()
  case lambda false
  case recursive(level) level >= depth
}

fun contains_ptr(type: PestoType): Bool {
  switch type
  case byte false
  case int false
  case ptr true
  case struct_(fields) {
    for field in fields do if field.value.contains_ptr() then return true
    false
  }
  case enum_(variants) {
    for variant in variants do if variant.value.contains_ptr() then return true
    false
  }
  case never false
}

fun assert_no_closure(type: YogurtType): EggType {
  switch type
  case byte type_byte
  case int type_int
  case type type_type
  case box(inner) type_box_without_canonicalizing(inner.assert_no_closure())
  case array(item) type_array_without_canonicalizing(item.assert_no_closure())
  case never type_never
  case struct_(struct_) {
    var fields = map[String, EggType]()
    for field in struct_ do
      fields.&.put(field.key, field.value.assert_no_closure())
    type_struct_without_canonicalizing(fields)
  }
  case enum_(enum_) {
    var variants = map[String, EggType]()
    for variant in enum_ do
      variants.&.put(variant.key, variant.value.assert_no_closure())
    type_enum_without_canonicalizing(variants)
  }
  case closure unreachable()
  case lambda(lambda) {
    var args = list[EggType]()
    for arg in lambda.args do args.&.push(arg.assert_no_closure())
    var args = args.to_slice()
    var return_type = lambda.return_type.assert_no_closure()
    type_lambda_without_canonicalizing(args, return_type)
  }
  case recursive(level) type_recursive(level)
}
