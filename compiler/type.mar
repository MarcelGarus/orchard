| Type Algorithms  
|
| Plum has a structural type system, which means that types don't have
| identities. If you define Foo = Int and Bar = Int, then Foo, Bar, and Int can
| be used interchangably. Starting with the Egg compiler stage, all types are
| self-contained and you don't any type definitions any more.
|
| Turns out, some of the things we want to do with types are not trivial because
| of recursive types. For example, unioning these two enums results in a mess:
|
| | Foo (| Bar ^2) = | Foo (| Bar (| Foo (| Bar (...))))
| | Foo ^1         = | Foo (| Foo (| Foo (| Foo (...))))
|
| The unioned type is this:
|
| | Foo (| Foo (| Foo ^1) Bar (| Foo (| Bar ^2)))
|
| Basically, the top-level is always the Foo variant and the level below that
| decides whether it is Foo forever or whether Foo and Bar alternate.
|
| This file contains most operations that we need to perform on types.

import plum.mar

| TODO: rename to EggType
enum PlumType {
  var_: String,
  primitive: PrimitiveType,
  never,
  struct_: Map[String, PlumType],
  enum_: Map[String, PlumType],
  lambda: LambdaType,
  recursive: Int, | how many levels above this should we continue?
}
struct PrimitiveType { name: String, args: Slice[PlumType] }
struct LambdaType { args: Slice[PlumType], return_type: &PlumType }

var type_nothing = PlumType.struct_(map[String, PlumType]())
var type_byte = PlumType.primitive(PrimitiveType {
  name = "Byte", args = empty_slice[PlumType]()
})
var type_int = PlumType.primitive(PrimitiveType {
  name = "Int", args = empty_slice[PlumType]()
})
var type_string = PlumType.struct_(map(
  "utf8_bytes" -> type_array(type_byte)
))
var type_type = PlumType.primitive(PrimitiveType {
  name = "Type", args = empty_slice[PlumType]()
})
fun type_array(type: PlumType): PlumType {
  PlumType.primitive(PrimitiveType {
    name = "Array", args = list(type).to_slice()
  })
}
var type_never = PlumType.never
var type_ordering = PlumType.enum_(map(
  "less"    -> type_nothing,
  "equal"   -> type_nothing,
  "greater" -> type_nothing,
))
var type_type_info = PlumType.enum_(map(
  "int"    -> type_nothing,
  "string" -> type_nothing,
  "struct" -> type_linked_list(type_field),
  "enum"   -> type_linked_list(type_variant),
  "type"   -> type_nothing,
))
var type_field = PlumType.struct_(map(
  "name" -> type_string,
  "type" -> type_type,
))
var type_variant = PlumType.struct_(map(
  "name" -> type_string,
  | TODO: update
  "args" -> type_linked_list(type_type),
))
fun type_linked_list(item: PlumType): PlumType {
  PlumType.enum_(map(
    "empty" -> type_nothing,
    "more"  -> PlumType.struct_(map(
      "item" -> item,
      "rest" -> PlumType.recursive(2),
    )),
  ))
}
fun type_range(item: PlumType): PlumType {
  PlumType.struct_(map("start" -> item, "end" -> item))
}
var type_var_t = PlumType.var_("t")

fun ==(a: PlumType, b: PlumType): Bool {
  switch a
  case var_(a)      if b is var_(b)      then a == b else false
  case primitive(a) if b is primitive(b) then a == b else false
  case never(a)     if b is never(b)     then a == b else false
  case struct_(a)   if b is struct_(b)   then a == b else false
  case enum_(a)     if b is enum_(b)     then a == b else false
  case lambda(a)    if b is lambda(b)    then a == b else false
  case recursive(a) if b is recursive(b) then a == b else false
}
fun ==(a: PrimitiveType, b: PrimitiveType): Bool {
  a.name == b.name and a.args == b.args
}
fun ==(a: LambdaType, b: LambdaType): Bool {
  a.args == b.args and a.return_type.* == b.return_type.*
}
fun hash(hasher: &Hasher, type: PlumType) {
  switch type
  case var_      { hasher.hash(0) }
  case primitive { hasher.hash(1) }
  case never     { hasher.hash(2) }
  case struct_   { hasher.hash(3) }
  case enum_     { hasher.hash(4) }
  case lambda    { hasher.hash(5) }
  case recursive { hasher.hash(6) }
}

fun write[W](writer: W, type: PlumType) {
  switch type
  case var_(name) writer."{name}"
  case primitive(primitive) {
    if primitive.args.is_not_empty() then writer."("
    writer."{primitive.name}"
    for arg in primitive.args do writer." {arg}"
    if primitive.args.is_not_empty() then writer.")"
  }
  case never writer."Never"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(variants) {
    writer."(|"
    for variant in variants do
      if variant.value == PlumType.struct_(map[String, PlumType]()) then
        writer." {variant.key}"
      else
        writer." {variant.key}: {variant.value}"
    writer.")"
  }
  case lambda(lambda) {
    writer."(\\"
    for arg in lambda.args do writer." {arg}"
    writer." -> {lambda.return_type})"
  }
  case recursive(level) writer."^{level}"
}

| Collecting Type Variables  

fun collect_type_variables(type: PlumType): Set[String] {
  var vars = set[String]()
  type.collect_type_variables(vars.&)
  vars
}
fun collect_type_variables(types: Slice[PlumType]): Set[String] {
  var vars = set[String]()
  types.collect_type_variables(vars.&)
  vars
}
fun collect_type_variables(type: PlumType, out: &Set[String]) {
  switch type
  case var_(name) out.put(name)
  case primitive(primitive) primitive.args.collect_type_variables(out)
  case never {}
  case struct_(fields)
    for field in fields do field.value.collect_type_variables(out)
  case enum_(variants)
    for variant in variants do variant.value.collect_type_variables(out)
  case lambda(lambda) {
    lambda.args.collect_type_variables(out)
    lambda.return_type.collect_type_variables(out)
  }
  case recursive {}
}
fun collect_type_variables(types: Slice[PlumType], out: &Set[String]) {
  for type in types do type.collect_type_variables(out)
}


| Matching Types  
| Checks if a concrete type without type variables is assignable to a generic
| type that possibly contains type variables. Returns a substitution map of what
| concrete types the type variables need to have for the types to match.
|
| Int            -> Int           ? {}
| Int            -> String        ? -
| Int            -> t             ? {t: Int}
| List Int       -> List t        ? {t: Int}
| Map Int String -> Map t t       ? -
| Never          -> Int           ? {}
| Never          -> List t        ? {}
| Never          -> Never         ? {}
| | Foo Bar      -> | Foo Bar Baz ? {}
fun match_against(
  concrete: PlumType, generic: PlumType, constraints: &TypeVariableConstraints
): Bool {
  concrete.match_against(
    generic, constraints, list[Tuple2[PlumType, PlumType]]().&
  )
}
fun match_against(
  concrete: Slice[PlumType], generic: Slice[PlumType],
  constraints: &TypeVariableConstraints
): Bool {
  concrete.match_against(
    generic, constraints, list[Tuple2[PlumType, PlumType]]().&
  )
}
| A mapping from type variables (lowercase) to concrete types that they need to
| be replaced with.
struct Substitutions { substitutions: Map[String, PlumType] }
struct TypeVariableConstraints {
  constraints: List[Tuple2[String, PlumType]]
}

fun constraints(): TypeVariableConstraints {
  TypeVariableConstraints {
    constraints = list[Tuple2[String, PlumType]]()
  }
}
fun add(constraints: &TypeVariableConstraints, name: String, type: PlumType) {
  constraints.constraints.&.push(tuple(name, type))
}
fun check_coherency(
  constraints: TypeVariableConstraints
): Maybe[Substitutions] {
  var substitutions = map[String, PlumType]()
  for constraint in constraints.constraints do {
    var variable = constraint.a
    var concrete = constraint.b
    var type =
      switch substitutions.get_maybe(variable)
      case some(existing)
        union(existing, concrete) or return none[Substitutions]()
      case none concrete
    substitutions.&.put(variable, type)
  }
  some(Substitutions { substitutions })
}
fun match_against(
  concrete: PlumType, generic: PlumType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if currently_matching.iter().&.find(tuple(concrete, generic)) is some(index)
  then return true

  currently_matching.push(tuple(concrete, generic))

  concrete = concrete.extend_one_level()
  generic = generic.extend_one_level()
  var result = match_against_logic(
    concrete, generic, constraints, currently_matching
  )

  currently_matching.pop()
  result
}
fun match_against_logic(
  concrete: PlumType, generic: PlumType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if concrete is never then return true

  switch generic
  case var_(name) {
    constraints.add(name, concrete)
    true
  }
  case primitive(generic_primitive) {
    var concrete_primitive = concrete.primitive or return false
    concrete_primitive.name == generic_primitive.name or return false
    concrete_primitive.args.match_against(
      generic_primitive.args, constraints, currently_matching
    )
  }
  case never concrete is never
  case struct_(generic_fields) {
    var concrete_fields = concrete.struct_ or return false
    for field in concrete_fields do {
      var concrete_type = field.value
      var generic_type = generic_fields.get_maybe(field.key) or return false
      concrete_type.match_against(generic_type, constraints, currently_matching)
        or return false
    }
    for field in generic_fields do
      concrete_fields.contains(field.key) or return false
    true
  }
  case enum_(generic_variants) {
    var concrete_variants = concrete.enum_ or return false
    for variant in concrete_variants do {
      var concrete_args = variant.value
      var generic_args = generic_variants.get_maybe(variant.key) or return false
      concrete_args.match_against(generic_args, constraints, currently_matching)
        or return false
    }
    true
  }
  case lambda(generic_lambda) {
    var concrete_lambda = concrete.lambda or return false
    concrete_lambda.args.match_against(
      generic_lambda.args, constraints, currently_matching
    ) or return false
    concrete_lambda.return_type.*.match_against(
      generic_lambda.return_type.*, constraints, currently_matching
    ) or return false
  }
  case recursive unreachable()
}
fun match_against(
  concrete: Slice[PlumType], generic: Slice[PlumType],
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  concrete.len == generic.len or return false
  for both in zip(concrete.iter(), generic.iter()) do
    both.a.match_against(both.b, constraints, currently_matching) or
      return false
  true
}

fun write[W](writer: W, substitutions: Substitutions) {
  var first = true
  for substitution in substitutions.substitutions do {
    if first then first = false else writer.", "
    writer."{substitution.key} = {substitution.value}"
  }
}


| Specializing types  
| For example, specializing (List t) using {t -> Int} to (List Int).

fun specialize(
  type: PlumType, substitutions: Substitutions
): PlumType {
  switch type
  case var_(name)
    substitutions.substitutions.get_maybe(name) or
      panic("substitution for {name} missing: {substitutions.substitutions}")
  case primitive(primitive)
    PlumType.primitive(PrimitiveType {
      name = primitive.name, args = primitive.args.specialize(substitutions)
    })
  case never PlumType.never
  case struct_(fields) PlumType.struct_(fields.specialize(substitutions))
  case enum_(variants) PlumType.enum_(variants.specialize(substitutions))
  case lambda(lambda)
    PlumType.lambda(LambdaType {
      args = lambda.args.specialize(substitutions),
      return_type = lambda.return_type.specialize(substitutions).put_on_heap(),
    })
  case recursive(level) PlumType.recursive(level)
}
fun specialize(
  types: Map[String, PlumType], substitutions: Substitutions
): Map[String, PlumType] {
  var specialized = map[String, PlumType]()
  for entry in types do
    specialized.&.put(entry.key, entry.value.specialize(substitutions))
  specialized
}
fun specialize(
  types: Slice[PlumType], substitutions: Substitutions
): Slice[PlumType] {
  var specialized = list[PlumType]()
  for type in types do specialized.&.push(type.specialize(substitutions))
  specialized.to_slice()
}
fun specialize(a: Substitutions, b: Substitutions): Substitutions {
  var result = map[String, PlumType]()
  for entry in a.substitutions do
    result.&.put(entry.key, entry.value.specialize(b))
  Substitutions { substitutions = result }
}


| Navigating into types  
| When navigating into types, you can't just naively take the contained types
| because they might refer to surrounding types via recursive types. This
| function extends recursive calls that reference the root type so that when you
| navigate into this type, the resulting types are still self-contained.
|
| For example, if you have this type:
|
| | A
|   B
|     | C
|       D ^2
|
| If you switch on a value of this type, the enum payload in the B case should
| have this type:
|
| | C
|   D
|     | A
|       B ^2
|
| As you see, we can't just naively take the type of the B variant because it
| refers to the outer type that we remove. Having ^2 in a type where there are
| no two types surrounding it is bad. So, types need to "wrap around" -- as you
| navigate into types, recursive types should be extended at the bottom so that
| you never actually reach a recursive marker.
|
| In particular, we need to extend all recursive types that refer to the former
| root type. To do that, we first create an extension that root-recursive types
| will be extended with:
|
| | A
|   B ^-1
|
| The -1 is just a temporary marker that means "replace this so that it points
| to the new root". Then, we walk the original type and replace all recursive
| types that reference the root with this extension, replacing -1 with the level
| that we are currently at.
fun extend_one_level(type: PlumType): PlumType {
  switch type
  case var_(name) PlumType.var_(name)
  case primitive(primitive) {
    var new_args = list[PlumType]()
    for arg in primitive.args.iter().enumerate() do
      new_args.&.push({
        | Type that is the original struct except the arg that we navigate
        | into. This arg has been replaced with a recursive type.
        var extension = {
          var ext_args = list[PlumType]()
          for ext_arg in primitive.args.iter().enumerate() do
            ext_args.&.push(
              if ext_arg.index == arg.index
              then PlumType.recursive(-1)
              else ext_arg.item
            )
          PlumType.primitive(PrimitiveType {
            name = primitive.name, args = ext_args.to_slice()
          })
        }
        arg.item.extend_recursive_types(1, extension)
      })
    PlumType.primitive(PrimitiveType {
      name = primitive.name, args = new_args.to_slice()
    })
  }
  case never PlumType.never
  case struct_(fields) PlumType.struct_({
    var new_fields = map[String, PlumType]()
    for field in fields do
      new_fields.&.put(field.key, {
        | Type that is the original struct except the field that we navigate
        | into. This field has been replaced with a recursive type.
        var extension = {
          var ext_fields = map[String, PlumType]()
          for ext_field in fields do
            ext_fields.&.put(
              ext_field.key,
              if ext_field.key == field.key
              then PlumType.recursive(-1)
              else ext_field.value
            )
          PlumType.struct_(ext_fields)
        }
        field.value.extend_recursive_types(1, extension)
      })
    new_fields
  })
  case enum_(variants) PlumType.enum_({
    var new_variants = map[String, PlumType]()
    for variant in variants do
      new_variants.&.put(variant.key, {
        | Type that is the original enum except the variant that we navigate into.
        | This variant has been replaced with a recursive type.
        var extension = {
          var ext_variants = map[String, PlumType]()
          for ext_variant in variants do
            ext_variants.&.put(
              ext_variant.key,
              if ext_variant.key == variant.key then
                PlumType.recursive(-1)
              else
                ext_variant.value
            )
          PlumType.enum_(ext_variants)
        }
        variant.value.extend_recursive_types(1, extension)
      })
    new_variants
  })
  case lambda(lambda) PlumType.lambda(LambdaType {
    args = {
      var args = list[PlumType]()
      for arg in lambda.args do
        args.&.push(arg.extend_recursive_types(1, type))
      args.to_slice()
    },
    return_type = lambda.return_type
      .extend_recursive_types(1, type).put_on_heap(),
  })
  case recursive unreachable()
}
fun extend_recursive_types(
  type: PlumType, level: Int, extension: PlumType
): PlumType {
  switch type
  case var_(name) PlumType.var_(name)
  case primitive(primitive) {
    var new_args = list[PlumType]()
    for arg in primitive.args do
      new_args.&.push(arg.extend_recursive_types(level + 1, extension))
    PlumType.primitive(PrimitiveType {
      name = primitive.name, args = new_args.to_slice()
    })
  }
  case never PlumType.never
  case struct_(fields) {
    var new_fields = map[String, PlumType]()
    for field in fields do
      new_fields.&.put(
        field.key, field.value.extend_recursive_types(level + 1, extension))
    PlumType.struct_(new_fields)
  }
  case enum_(variants) {
    var new_variants = map[String, PlumType]()
    for variant in variants do
      new_variants.&.put(
        variant.key, variant.value.extend_recursive_types(level + 1, extension)
      )
    PlumType.enum_(new_variants)
  }
  case lambda(lambda)
    PlumType.lambda(LambdaType {
      args = {
        var args = list[PlumType]()
        for arg in lambda.args do
          args.&.push(arg.extend_recursive_types(level + 1, extension))
        args.to_slice()
      },
      return_type = lambda.return_type
        .extend_recursive_types(level + 1, extension).put_on_heap()
    })
  case recursive(actual_level)
    if actual_level == level then
      extension.replace_recursive_level(-1, level)
    else
      PlumType.recursive(actual_level)
}
fun replace_recursive_level(type: PlumType, from: Int, to: Int): PlumType {
  switch type
  case var_(name) PlumType.var_(name)
  case primitive(primitive) {
    var args = list[PlumType]()
    for arg in primitive.args do
      args.&.push(arg.replace_recursive_level(from, to))
    PlumType.primitive(PrimitiveType {
      name = primitive.name, args = args.to_slice()
    })
  }
  case never PlumType.never
  case struct_(fields) {
    var new_fields = map[String, PlumType]()
    for field in fields do
      new_fields.&.put(
        field.key, field.value.replace_recursive_level(from, to))
    PlumType.struct_(new_fields)
  }
  case enum_(variants) {
    var new_variants = map[String, PlumType]()
    for variant in variants do
      new_variants.&.put(
        variant.key, variant.value.replace_recursive_level(from, to)
      )
    PlumType.enum_(new_variants)
  }
  case lambda(lambda)
    PlumType.lambda(LambdaType {
      args = {
        var args = list[PlumType]()
        for arg in lambda.args do
          args.&.push(arg.replace_recursive_level(from, to))
        args.to_slice()
      },
      return_type = lambda.return_type
        .replace_recursive_level(from, to).put_on_heap()
    })
  case recursive(actual_level)
    PlumType.recursive(if actual_level == from then to else actual_level)
}


| Comparing types  
| Multiple types may describe the same set of values. For example, these two
| types are semantically equivalent:
|
| First =
|   | A
|     B ^1
| Second =
|   | A
|     B
|       | A
|         B ^2
fun =~=(a: PlumType, b: PlumType): Bool {
  is_equivalent(a, b, list[Tuple2[PlumType, PlumType]]().&)
}
fun is_equivalent(
  a: PlumType, b: PlumType,
  currently_comparing: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if currently_comparing.iter().&.contains(tuple(a, b)) then return true

  currently_comparing.push(tuple(a, b))

  a = a.extend_one_level()
  b = b.extend_one_level()
  var result = is_equivalent_logic(a, b, currently_comparing)

  currently_comparing.pop()
  result
}
fun is_equivalent_logic(
  a: PlumType, b: PlumType,
  currently_comparing: &List[Tuple2[PlumType, PlumType]],
): Bool {
  switch a
  case var_(name) {b.var_ or return false} == name
  case primitive(a_primitive) {
    var b_primitive = b.primitive or return false
    a_primitive.name == b_primitive.name or return false
    a_primitive.args.len == b_primitive.args.len or return false
    for both in zip(a_primitive.args.iter(), b_primitive.args.iter()) do
      is_equivalent(both.a, both.b, currently_comparing) or return false
    true
  }
  case never  b is never
  case struct_(a_fields) {
    var b_fields = b.struct_ or return false
    a_fields.size == b_fields.size or return false

    for a_field in a_fields do {
      var a_type = a_field.value
      var b_type = b_fields.get_maybe(a_field.key) or return false
      is_equivalent(a_type, b_type, currently_comparing) or return false
    }
    true
  }
  case enum_(a_variants) {
    var b_variants = b.enum_ or return false
    a_variants.size == b_variants.size or return false

    for a_variant in a_variants do {
      var a_arg = a_variant.value
      var b_arg = b_variants.get_maybe(a_variant.key) or return false
      is_equivalent(a_arg, b_arg, currently_comparing) or return false
    }
    true
  }
  case lambda(a_lambda) {
    var b_lambda = b.lambda or return false
    a_lambda.args.len == b_lambda.args.len or return false
    for both in zip(a_lambda.args.iter(), b_lambda.args.iter()) do
      is_equivalent(both.a, both.b, currently_comparing) or return false
    is_equivalent(
      a_lambda.return_type.*, b_lambda.return_type.*, currently_comparing
    )
  }
  case recursive unreachable()
}


| Unioning types  
| When multiple branches evaluate to different types, those need to be unioned
| to get the overall result type. In that case, we need to make sure that all
| types "line up" -- for example, you can't have one branch evaluate to an Int
| and another one to a String. This process of unioning types is implemented
| here.
|
| A more complex example:
|
| First =
|   | A ^1
|     B ^1
| Second =
|   | A ^1
|     C ^C
| Unioned =
|   | A ^1
|     B
|       | A ^1
|         B ^1
|     C
|       | A ^1
|         C ^1
|
| Here, we have two enum types that are unioned. The resulting type contains a
| recursive A variant. As soon as either B or C occur, we know from which
| original type this value stems, so we have a more precise type for the
| contained payload.
fun union(types: Slice[PlumType]): Result[PlumType, String] {
  var common = types.get(0)
  for type in types.without_first() do
    common = union(common, type)?
  ok[PlumType, String](common)
}
fun union(a: PlumType, b: PlumType): Result[PlumType, String] {
  var stack = list[Tuple3[JoinMode, PlumType, PlumType]]()
  switch join(JoinMode.union, a, b, stack.&)
  case some(type) ok[PlumType, String](type)
  case none error[PlumType, String]({
    var b = string_builder().&
    b."Unioning types failed. This is the unioning stack:\n"
    for entry in stack do b."{entry.a.debug()}\n  {entry.b}\n  {entry.c}"
    b.to_string()
  })
}
enum JoinMode { union, intersection }
fun flip(mode: JoinMode): JoinMode {
  switch mode case union JoinMode.intersection case intersection JoinMode.union
}
fun ==(a: JoinMode, b: JoinMode): Bool {
  switch a
  case union b is union
  case intersection b is intersection
}
fun join(
  mode: JoinMode, a: PlumType, b: PlumType,
  currently_joining: &List[Tuple3[JoinMode, PlumType, PlumType]],
): Maybe[PlumType] {
  if currently_joining.iter().&.find(tuple(mode, a, b)) is some(index) then {
    var level = currently_joining.len - index
    return some(PlumType.recursive(level))
  }

  currently_joining.push(tuple(mode, a, b))

  a = a.extend_one_level()
  b = b.extend_one_level()
  var result = join_logic(mode, a, b, currently_joining)
    or return none[PlumType]()

  currently_joining.pop()
  some(result)
}
fun join_logic(
  mode: JoinMode, a: PlumType, b: PlumType,
  currently_joining: &List[Tuple3[JoinMode, PlumType, PlumType]],
): Maybe[PlumType] {
  if a is never then return some(switch mode case union b case intersection a)
  if b is never then return some(switch mode case union a case intersection b)

  switch a
  case var_(a_name) {
    var b_name = b.var_ or return none[PlumType]()
    a_name == b_name or return none[PlumType]()
    some(PlumType.var_(a_name))
  }
  case primitive(a_primitive) {
    var b_primitive = b.primitive or { eprintln("b is not a primitive") return none[PlumType]() }
    a_primitive.name == b_primitive.name or { eprintln("names don't match") return none[PlumType]() }
    | TODO: loosen constraints (this requires implementing casting arrays)
    a_primitive.args == b_primitive.args or { eprintln("args don't match") return none[PlumType]() }
    some(PlumType.primitive(a_primitive))
  }
  case never unreachable()
  case struct_(a_fields) {
    var b_fields = b.struct_ or return none[PlumType]()
    var fields = map[String, PlumType]()
    a_fields.size == b_fields.size or return none[PlumType]()
    for a_field in a_fields do {
      var key = a_field.key
      var a_type = a_field.value
      var b_type = b_fields.get_maybe(key) or return none[PlumType]()
      fields.&.put(
        key,
        join(mode, a_type, b_type, currently_joining)
          or return none[PlumType](),
      )
    }
    some(PlumType.struct_(fields))
  }
  case enum_(a_variants) {
    switch mode
    case union {
      var b_variants = b.enum_ or return none[PlumType]()
      var variants = map[String, PlumType]()
      for variant in a_variants do variants.&.put(variant.key, variant.value)
      for variant in b_variants do {
        var key = variant.key
        var b_arg = variant.value
        variants.&.put(key, {
          if variants.get_maybe(key) is some(a_arg) then
            join(mode, a_arg, b_arg, currently_joining)
              or return none[PlumType]()
          else
            b_arg
        })
      }
      some(PlumType.enum_(variants))
    }
    case intersection {
      var b_variants = b.enum_ or return none[PlumType]()
      var variants = map[String, PlumType]()
      for variant in a_variants do {
        var name = variant.key
        var a_arg = variant.value
        var b_arg = b_variants.get_maybe(name) or continue
        var arg = join(mode, a_arg, b_arg, currently_joining)
          or return none[PlumType]()
        variants.&.put(variant.key, variant.value)
      }
      some(PlumType.enum_(variants))
    }
  }
  case lambda(a_lambda) {
    var b_lambda = b.lambda or return none[PlumType]()

    | Lambda parameters are contravariant, the return type is covariant:
    | foo: (\ (| b c) -> (| x y z)) =
    |   condition
    |   % true ->  \ a: (| a b c) -> (| x z) = ...
    |     false -> \ a: (| b c d) -> (| y z) = ...
    var args = list[PlumType]()
    for both in zip(a_lambda.args.iter(), b_lambda.args.iter()) do
      args.&.push(
        join(mode.flip(), both.a, both.b, currently_joining)
          or return none[PlumType]()
      )
    var args = args.to_slice()

    var return_type = join(
      mode, a_lambda.return_type.*, b_lambda.return_type.*, currently_joining
    ) or return none[PlumType]()

    some(PlumType.lambda(LambdaType {
      args, return_type = return_type.put_on_heap()
    }))
  }
  case recursive unreachable()
}


| Checking if one type can be assigned to another  
| Types are really just sets of values. One type is considered to be assignable
| to another type if all values of the first type are also values of the second
| type.
fun is_assignable_to(from: PlumType, to: PlumType): Bool {
  {union(from, to) or return false} =~= to
}
