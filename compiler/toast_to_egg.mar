| Converting Toast To Egg  

import plum.mar

| Variable Scoping  
| Tracks which names are in scope using a simple vector:
| - When new names are defined, appends items to the vector.
| - When names are referenced, walks the vector from the back, searching for the
|   name. Names that are defined later shadow previously defined names.
| - When bodies are compiled, save the length of the vector before entering the
|   body. When exiting the body, trim the vector to that length â€“ all names
|   defined inside the body automatically go out of scope.

struct Visible { vars: List[NameBinding] }
struct NameBinding { name: String, id: EggId }
fun visible(): _ { Visible { vars = list[NameBinding]() } }
fun define(visible: &Visible, name: String, id: EggId) {
  visible.vars.&.push(NameBinding { name, id })
}
fun lookup(visible: Visible, name: String): Maybe[EggId] {
  for binding in visible.vars.to_slice().rev_iter() do
    if binding.name == name then return some(binding.id)
  none[EggId]()
}
struct VisibleSnapshot { vars_len: Int }
fun snapshot(visible: Visible): _ {
  VisibleSnapshot { vars_len = visible.vars.len }
}
fun restore(visible: &Visible, snapshot: VisibleSnapshot) {
  visible.vars.len = snapshot.vars_len
}

| Imports & Exports  

struct DefInScope { module: Module, kind: DefInScopeKind }
enum DefInScopeKind { type: TypeInScope, fun_: FunInScope }
enum TypeInScope { builtin: PlumType, custom: ToastTypeDef }
enum FunInScope { builtin: Builtin, custom: ToastFun }

fun name(def: DefInScope): String {
  switch def.kind
  case type(type) {
    switch type
    case builtin(type) type.format()
    case custom(type) type.name.string
  }
  case fun_(fun_) {
    switch fun_
    case builtin(fun_) fun_.format()
    case custom(fun_) fun_.name.string
  }
}

fun defs_in_scope(
  module: Module, toasts: Map[Module, Toast]
): Result[Slice[DefInScope], Error] {
  var defs = list[DefInScope]()
  for def in toasts.get(module).defs do
    switch def
    case import_(import_) {
      var imported_module = module.resolve_import(import_.module) or(error)
        return error[Slice[DefInScope], Error](error(error, import_.keyword.src))
      var matched_something = false
      for def in imported_module.exports(toasts)? do
        if def.name() == import_.definition then {
          defs.&.push(def)
          matched_something = true
        }
      if not(matched_something) then
        return error[Slice[DefInScope], Error](error(
          "Tried to import {import_.definition}, but that is not exported.",
          import_.keyword.src
        ))
    }
    case export {}
    case type(type)
      defs.&.push(DefInScope {
        module, kind = DefInScopeKind.type(TypeInScope.custom(type))
      })
    case fun_(fun_)
      defs.&.push(DefInScope {
        module, kind = DefInScopeKind.fun_(FunInScope.custom(fun_))
      })
  ok[Slice[DefInScope], Error](defs.to_slice())
}

fun exports(
  module: Module, toasts: Map[Module, Toast]
): Result[Slice[DefInScope], Error] {
  if module.is_builtin() then {
    var defs = list[DefInScope]()

    for type in list(type_int, type_string, type_type, type_never) do
      defs.&.push(DefInScope {
        module = builtin_module,
        kind = DefInScopeKind.type(TypeInScope.builtin(type)),
      })
    for builtin in builtins do
      defs.&.push(DefInScope {
        module = builtin_module,
        kind = DefInScopeKind.fun_(FunInScope.builtin(builtin)),
      })

    return ok[Slice[DefInScope], Error](defs.to_slice())
  }

  var exports = list[DefInScope]()
  var defs_in_scope = module.defs_in_scope(toasts)?
  for def in toasts.get(module).defs do
    if def is export(export) then {
      var matched_something = false
      for def in defs_in_scope do
        if def.name() == export.definition then {
          exports.&.push(def)
          matched_something = true
        }
      if not(matched_something) then
        return error[Slice[DefInScope], Error](error({
          var b = string_builder().&
          b."Tried to export {export.definition}, but that is not in scope. 
            'The only things in scope:"
          for def in defs_in_scope do b." {def.name()}"
          b.to_string()
        }, export.keyword.src))
    }
  ok[Slice[DefInScope], Error](exports.to_slice())
}

| Compilation  

fun to_egg(toasts: Map[Module, Toast], entry_module: Module): Result[Egg, Error] {
  var funs = list[EggFun]()
  for builtin in builtins do funs.&.push(builtin.create_builtin_fun())
  for entry in toasts do {
    var module = entry.key
    var toast = entry.value
    var in_scope = module.defs_in_scope(toasts)?
    toast.to_egg(module, in_scope, funs.&)?
  }
  ok[Egg, Error](Egg { entry_module, funs })
}
fun to_egg(
  toast: Toast, module: Module, in_scope: Slice[DefInScope], funs: &List[EggFun]
): Result[Nothing, Error] {
  for def in toast.defs do
    if def is fun_(fun_) then
      funs.push(EggFun {
        module,
        name = fun_.name,
        params = {
          var params = list[EggParam]()
          for param in fun_.params do
            params.&.push(param.name.string / param.type.to_egg(in_scope)?)
          params.to_slice()
        },
        return_type = fun_.return_type.to_egg(in_scope)?,
        impl = EggFunImpl.code({
          var visible = visible()
          var compiler = egg_code_compiler(in_scope).&
          var body = compiler.egg_body_compiler().&

          for param in fun_.params do
            visible.&.define(param.name.string, body.push_param(param.name.src))
          var returned = fun_.body.to_egg(body, visible.&)?
          var body = body.finish(returned)

          EggCode { exprs = compiler.exprs.to_slice(), body }
        })
      })
  ok[Nothing, Error]({})
}

fun to_egg(type: ToastType, in_scope: Slice[DefInScope]): Result[PlumType, Error] {
  type.to_egg(in_scope, map[String, PlumType](), list[OngoingTypeCall](), 0)
}
struct OngoingTypeCall { depth: Int, name: String, args: Slice[PlumType] }
fun to_egg(
  type: ToastType, in_scope: Slice[DefInScope], env: Map[String, PlumType],
  parent_calls: List[OngoingTypeCall], depth: Int,
): Result[PlumType, Error] {
  switch type
  case variable(variable)
    ok[PlumType, Error](
      if env.get_maybe(variable.string) is some(type)
      then type
      else PlumType.primitive(variable.string)
    )
  case call(call) {
    var name = call.name

    | Lower the arguments.
    var args = list[PlumType]()
    for arg in call.args do
      args.&.push(arg.to_egg(in_scope, env, parent_calls, depth)?)
    var args = args.to_slice()

    | Are we recursively lowering a type? If so, we need to insert a recursive
    | type instead of endlessly digging down into the type.
    for call in parent_calls do
      if call.name == name.string and call.args == args then
        return ok[PlumType, Error](PlumType.recursive(depth - call.depth))

    | Look for a type with the name.
    for def in in_scope do {
      if def.kind is type(type) then {
        switch type
        case builtin(type) {
          if type.primitive.unwrap() == name.string then {
            return ok[PlumType, Error](type)
          }
        }
        case custom(type) {
          if type.name.string == name.string then {
            var inner_env = map[String, PlumType]()
            type.params.len == args.len or
              return error[PlumType, Error](error(
                "Tried to instantiate {type.name.string} with {args.len} args, but it needs {type.params.len}.",
                name.src
              ))
            for both in zip(type.params.iter(), args.iter()) do
              inner_env.&.put(both.a.string, both.b)
            parent_calls.&.push(OngoingTypeCall { name = name.string, args, depth })
            var type = type.type.to_egg(in_scope, inner_env, parent_calls, depth)?
            parent_calls.&.pop()
            return ok[PlumType, Error](type)
          }
        }
      }
    }

    return error[PlumType, Error](error({
      var b = string_builder().&
      b."{name.string} doesn't exist.\nIn scope:"
      for def in in_scope do
        b." {def.name()}"
      b.to_string()
    }, name.src))
  }
  case struct_(struct_) {
    var fields = map[String, PlumType]()
    | TODO: check for duplicates
    for field in struct_ do
      fields.&.put(
        field.name.string,
        field.type.to_egg(in_scope, env, parent_calls, depth + 1)?
      )
    ok[PlumType, Error](PlumType.struct_(fields))
  }
  case enum_(enum_) {
    var variants = map[String, Slice[PlumType]]()
    for variant in enum_ do {
      var payloads = list[PlumType]()
      for payload in variant.payloads do
        payloads.&.push(payload.to_egg(in_scope, env, parent_calls, depth + 1)?)
      | TODO: check for duplicates
      variants.&.put(variant.name.string, payloads.to_slice())
    }
    ok[PlumType, Error](PlumType.enum_(variants))
  }
  case lambda(lambda) {
    var args = list[PlumType]()
    for arg in lambda.args do
      args.&.push(arg.to_egg(in_scope, env, parent_calls, depth + 1)?)
    ok[PlumType, Error](PlumType.lambda(LambdaType {
      args = args.to_slice(),
      return_type = lambda.return_type
        .to_egg(in_scope, env, parent_calls, depth + 1)?.put_on_heap(),
    }))
  }
}

fun create_builtin_fun(builtin: Builtin): EggFun {
  var signature = builtin.signature()
  EggFun {
    module = builtin_module,
    name = "{builtin}" @ invalid_src(),
    params = signature.params,
    return_type = signature.return_type,
    impl = EggFunImpl.builtin(builtin),
  }
}

struct EggCodeCompiler { in_scope: Slice[DefInScope], exprs: List[EggExpr] }
struct EggBodyCompiler {
  parent: &EggCodeCompiler, params: List[EggId], exprs: List[EggId]
}
fun egg_code_compiler(in_scope: Slice[DefInScope]): _ {
  EggCodeCompiler { in_scope, exprs = list[EggExpr]() }
}
fun egg_body_compiler(parent: &EggCodeCompiler): _ {
  EggBodyCompiler { parent, params = list[EggId](), exprs = list[EggId]() }
}
fun finish(body: EggBodyCompiler, id: EggId): EggBody {
  EggBody {
    params = body.params.to_slice(), exprs = body.exprs.to_slice(), returns = id
  }
}
fun push_param(body: &EggBodyCompiler, src: Src): EggId {
  var id = EggId { int = body.parent.exprs.len }
  body.parent.exprs.&.push(EggExprKind.param @ src)
  body.params.&.push(id)
  id
}
fun push(body: &EggBodyCompiler, expr: EggExpr): EggId {
  var id = EggId { int = body.parent.exprs.len }
  body.parent.exprs.&.push(expr)
  body.exprs.&.push(id)
  id
}

fun to_egg(
  toast: ToastExpr, body: &EggBodyCompiler, visible: &Visible
): Result[EggId, Error] {
  ok[EggId, Error](
    switch toast
    case int(int) body.push(EggExprKind.int(int.int) @ int.src)
    case string(string) body.push(EggExprKind.string(string.string) @ string.src)
    case struct_(struct_) {
      var fields = map[String, EggId]()
      | TODO: check for duplicates
      for field in struct_.fields do
        fields.&.put(field.name.string, field.value.to_egg(body, visible)?)
      body.push(EggExprKind.struct_(fields) @ struct_.ampersand.src)
    }
    case member(member) {
      var of = member.of.to_egg(body, visible)?
      body.push(EggExprKind.member(EggMember {
        of, name = member.name.string
      }) @ member.name.src)
    }
    case symbol(symbol) body.push(EggExprKind.symbol(symbol.string) @ symbol.src)
    case switch_(switch_) {
      var condition = switch_.condition.to_egg(body, visible)?
      var cases = map[String, EggBody]()
      for case_ in switch_.cases do {
        var snapshot = visible.snapshot()
        var case_body = body.parent.egg_body_compiler().&
        for payload in case_.payloads do
          visible.define(payload.string, case_body.push_param(payload.src))
        var returns = case_.body.to_egg(case_body, visible)?
        var case_body = case_body.finish(returns)
        visible.restore(snapshot)
        cases.&.put(case_.symbol.string, case_body)
      }
      body.push(
        EggExprKind.switch_(EggSwitch { condition, cases })
          @ switch_.percent.src
      )
    }
    case name(name)
      visible.lookup(name.string) or
        return error[EggId, Error](error(
          "Unknown referenced name {name.string}.", name.src
        ))
    case lambda(lambda) {
      var snapshot = visible.snapshot()
      var lambda_body = body.parent.egg_body_compiler().&
      for param in lambda.params do
        visible.define(param.name.string, lambda_body.push_param(param.name.src))
      var returns = lambda.body.to_egg(lambda_body, visible)?
      var lambda_body = lambda_body.finish(returns)
      visible.restore(snapshot)

      body.push(EggExprKind.lambda(EggLambda {
        params = {
          var params = list[EggParam]()
          for param in lambda.params do
            params.&.push(param.name.string / param.type.to_egg(body.parent.in_scope)?)
          params.to_slice()
        },
        body = lambda_body,
      }) @ lambda.backslash.src)
    }
    case call(call) {
      var args = list[EggId]()
      for arg in call.args do args.&.push(arg.to_egg(body, visible)?)
      var args = args.to_slice()

      body.push({
        switch call.function.*
        case name(name) {
          switch visible.lookup(name.string)
          case some(lambda) EggExprKind.lambda_call(EggLambdaCall { lambda, args })
          case none {
            var candidates = set[Tuple2[Module, String]]()
            for def in body.parent.in_scope do
              if def.kind is fun_(fun_) then {
                candidates.&.put(tuple(def.module,
                  switch fun_
                  case builtin(fun_) "{fun_}"
                  case custom(fun_) fun_.name.string
                ))
              }
            EggExprKind.call(EggCall { name, candidates, args })
          }
        }
        case symbol(symbol)
          EggExprKind.variant(EggVariant { symbol = symbol.string, payloads = args })
        default {
          var lambda = call.function.to_egg(body, visible)?
          EggExprKind.lambda_call(EggLambdaCall { lambda, args })
        }
      } @ call.function.src())
    }
    case var_(var_) {
      var name = var_.left.name or return error[EggId, Error](error(
        "Variables have to be lowercase.", var_.equal_sign.src
      ))

      var value = var_.right.to_egg(body, visible)?
      visible.define(name.string, value)
      value
    }
    case body(exprs) {
      var last = none[EggId]()
      for expr in exprs do last = some(expr.to_egg(body, visible)?)
      last or unreachable()
    }
  )
}
