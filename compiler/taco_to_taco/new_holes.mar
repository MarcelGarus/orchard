import mod.mar

| Create new hole identities for the holes that expressions introduce.
fun new_holes(expr: TacoExpr): TacoExpr {
  expr.map(NewHoles { mapping = map[Hole, Hole]().& })
}
fun new_holes(body: TacoBody): TacoBody {
  body.map(NewHoles { mapping = map[Hole, Hole]().& })
}
struct NewHoles { mapping: &Map[Hole, Hole] }
fun map(expr: TacoExpr, new_holes: NewHoles): TacoExpr {
  if expr.op is hole(hole) then
    if new_holes.mapping.get_maybe(hole) is some(mapped) then
      return taco_hole(mapped)
  expr.map_children(new_holes)
}
fun map(body: TacoBody, new_holes: NewHoles): TacoBody {
  var params = list[Hole]()
  for old in body.params do {
    var new = hole(old.type)
    new_holes.mapping.&.put(old, new)
    params.&.push(new)
  }
  TacoBody { params = params.to_slice(), expr = body.expr.map(new_holes) }
}
