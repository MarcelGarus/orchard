import mod.mar

fun complexity(fun_: EggFun): Int { fun_.body.complexity() }

fun complexity(body: EggBody): Int {
  var complexity = 0
  for id in body.children do complexity = complexity + id.get().complexity()
  complexity + body.returns.complexity()
}

fun complexity(expr: EggExpr): Int {
  switch expr.op
  case param unreachable()
  case id 0
  case byte 1
  case int 1
  case array(array) {
    var complexity = 1
    for item in array do complexity = complexity + item.complexity()
    complexity
  }
  case struct_(struct_) {
    var complexity = 1
    for field in struct_ do complexity = complexity + field.value.complexity()
    complexity
  }
  case member(member) member.of.complexity() + 1
  case enum_(enum_) 1 + enum_.value.complexity()
  case switch_(switch_) {
    var complexity = 1 + switch_.condition.complexity()
    for case_ in switch_.cases do
      complexity = complexity + case_.value.complexity()
    complexity
  }
  case lambda(lambda) 1 + lambda.complexity()
  case call(call) {
    var complexity =
      switch call.callee
      case fun_ 1
      case lambda(lambda) 1 + lambda.complexity()
      case builtin 1
    for arg in call.args do complexity = complexity + arg.complexity()
    complexity
  }
  case recursive(recursive) {
    var complexity = 1
    for arg in recursive.args do complexity = complexity + arg.complexity()
    complexity + recursive.body.complexity()
  }
  case recurse(args) {
    var complexity = 1
    for arg in args do complexity = complexity + arg.complexity()
    complexity
  }
  case cast(inner) 1 + inner.complexity()
  case type 1
}
