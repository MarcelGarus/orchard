import mod.mar

fun desugar_divide(taco: Taco): Taco {
  var funs = map[String, TacoBody]()
  for fun_ in taco.funs do
    funs.&.put(fun_.key, fun_.value.map(DesugarDivide {}))
  Taco { funs, entry_point = taco.entry_point }
}

struct DesugarDivide {}
fun map(expr: TacoExpr, desugar: DesugarDivide): TacoExpr {
  var expr = expr.map_children(desugar)

  switch expr.op
  case divide(args)
    return both(
      if_(
        compare(args.b.*, taco_int(0)).is_equal(),
        taco_crash(type_nothing),
        taco_nothing,
      ),
      unchecked_divide(args.a.*, args.b.*),
    )
  case modulo(args)
    return both(
      if_(
        compare(args.b.*, taco_int(0)).is_equal(),
        taco_crash(type_nothing),
        taco_nothing,
      ),
      unchecked_modulo(args.a.*, args.b.*),
    )
  default expr
}
