| Your Official Graph Using Resolved Types  
|
| Starting from the main function, called functions are compiled to the Yogurt.
| Generic functions are specilized for concrete types. Casts are turned into
| calls of casting functions.

import plum.mar

struct Yogurt { funs: Map[String, YogurtFun] }

struct YogurtFun { dag: Dag[YogurtExpr], body: YogurtBody }
struct YogurtBody { params: Slice[Id], children: Slice[Id], returns: Id }
struct YogurtExpr { op: YogurtOp, type: YogurtType }

enum YogurtType {
  byte,
  int,
  type,
  array: &YogurtType,
  never,
  struct_: Map[String, YogurtType],
  enum_: Map[String, YogurtType],
  closure: &YogurtType,
  lambda: YogurtLambdaType,
  recursive: Int, | how many levels above this should we continue?
}
struct YogurtLambdaType { args: Slice[YogurtType], return_type: &YogurtType }

enum YogurtOp {
  param,
  int: Int,
  string: String,
  struct_: Map[String, Id],
  member: YogurtMember,
  enum_: YogurtEnum,
  switch_: YogurtSwitch,
  closure: Id,
  get_closure: Id,
  lambda: YogurtLambda,
  call: YogurtCall,
  type: YogurtType,
}
struct YogurtMember { of: Id, name: String }
struct YogurtSwitch { condition: Id, cases: Map[String, YogurtBody] }
struct YogurtEnum { name: String, value: Id }
struct YogurtLambda { function: String, closure: Id }
struct YogurtCall { callee: YogurtCallee, args: Slice[Id] }
enum YogurtCallee { lambda: Id, fun_: String, builtin: YogurtBuiltin }

enum YogurtBuiltin {
  | byte operations
  lower_byte, byte_to_int,
  | int operations
  add_ints, sub_ints, mul_ints, div_ints, mod_ints, and_ints, or_ints, xor_ints,
  compare_ints,
  | array operations
  generate_array, array_get, array_set, array_slice, array_len,
  | error stuff
  crash,
}

fun yogurt(): _ { Yogurt { funs = map[String, YogurtFun]() } }

fun signature(module: Module, name: String, params: Slice[YogurtType]): String {
  var b = string_builder().&
  b."{module}.{name}"
  for param in params do b." {param}"
  b.to_string()
}

fun return_type(fun_: YogurtFun): YogurtType {
  fun_.dag.type_of(fun_.body.returns)
}

fun ==(a: YogurtType, b: YogurtType): Bool {
  switch a
  case byte         b is byte
  case int          b is int
  case type         b is type
  case array(a)     if b is array(b)     then a.* == b.* else false
  case never(a)     if b is never(b)     then a == b else false
  case struct_(a)   if b is struct_(b)   then a == b else false
  case enum_(a)     if b is enum_(b)     then a == b else false
  case closure(a)   if b is closure(b)   then a.* == b.* else false
  case lambda(a)    if b is lambda(b)    then a == b else false
  case recursive(a) if b is recursive(b) then a == b else false
}
fun ==(a: YogurtLambdaType, b: YogurtLambdaType): Bool {
  a.args == b.args and a.return_type.* == b.return_type.*
}

fun hash(hasher: &Hasher, type: YogurtType) {
  switch type
  case byte      { hasher.hash(0) }
  case int       { hasher.hash(1) }
  case type      { hasher.hash(2) }
  case array     { hasher.hash(3) }
  case never     { hasher.hash(4) }
  case struct_   { hasher.hash(5) }
  case enum_     { hasher.hash(6) }
  case closure   { hasher.hash(7) }
  case lambda    { hasher.hash(8) }
  case recursive { hasher.hash(9) }
}

fun write[W](writer: W, yogurt: Yogurt) {
  var first = true
  for fun_ in yogurt.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, type: YogurtType) {
  switch type
  case byte writer."Byte"
  case int writer."Int"
  case type writer."Type"
  case array(item) writer."(Array {item})"
  case never writer."Never"
  case struct_(fields) {
    writer."(&"
    for field in fields do writer." {field.key}: {field.value}"
    writer.")"
  }
  case enum_(variants) {
    writer."(|"
    for variant in variants do
      if variant.value == YogurtType.struct_(map[String, YogurtType]()) then
        writer." {variant.key}"
      else
        writer." {variant.key}: {variant.value}"
    writer.")"
  }
  case closure(inner) writer."(Closure {inner})"
  case lambda(lambda) {
    writer."(\\"
    for arg in lambda.args do writer." {arg}"
    writer." -> {lambda.return_type})"
  }
  case recursive(level) writer."^{level}"
}
fun write[W](writer: W, body: YogurtBody, fun_: YogurtFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.children do {
    var expr = fun_.dag.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: YogurtOp, fun_: YogurtFun, indentation: Int) {
  switch op
  case param(param) writer."param {param}"
  case int(int) writer."int {int}"
  case string(string) writer."string {string}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."enum {enum_.name} {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case closure(inner) writer."closure {inner}"
  case get_closure(closure) writer."get_closure {closure}"
  case lambda(lambda)
    writer."lambda [closure {lambda.closure}] {lambda.function}"
  case call(call) {
    writer."call {call.callee}"
    for arg in call.args do writer." {arg}"
  }
  case type(type) writer."type {type}"
}
fun write[W](writer: W, callee: YogurtCallee) {
  switch callee
  case lambda(lambda) writer."{lambda}"
  case fun_(fun_) writer."\"{fun_}\""
  case builtin(builtin) writer."{builtin.debug()}"
}
