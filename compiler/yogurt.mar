| Your Official Graph Using Resolved Types  
|
| Starting from the main function, called functions are compiled to the Yogurt.
| Generic functions are specilized for concrete types. Casts are turned into
| calls of casting functions.
| TODO: Think about making bodys accept only a single parameter and turning
| closures into explicit structs.

import plum.mar

struct Yogurt { funs: Map[String, YogurtFun] }

struct YogurtFun {
  dag: Dag[YogurtExpr], captures: Maybe[Slice[Id]], body: YogurtBody
}
struct YogurtBody { params: Slice[Id], children: Slice[Id], returns: Id }
struct YogurtExpr { op: YogurtOp, type: PlumType }

enum YogurtOp {
  param,
  uninitialized,
  int: Int,
  string: String,
  struct_: Map[String, Id],
  member: YogurtMember,
  enum_: YogurtEnum,
  switch_: YogurtSwitch,
  lambda: YogurtLambda,
  call: YogurtCall,
  type: PlumType,
}
struct YogurtMember { of: Id, name: String }
struct YogurtSwitch { condition: Id, cases: Map[String, YogurtBody] }
struct YogurtEnum { name: String, value: Id }
struct YogurtLambda { function: String, captures: Slice[Id] }
struct YogurtCall { callee: YogurtCallee, args: Slice[Id] }
enum YogurtCallee { lambda: Id, fun_: String, builtin: YogurtBuiltin }

enum YogurtBuiltin {
  | byte operations
  | TODO: add when we have bytes
  | int operations
  add_ints, sub_ints, mul_ints, div_ints, mod_ints, and_ints, or_ints, xor_ints,
  compare_ints,
  | string operations
  concat_strings,
  | error stuff
  crash,
}

fun yogurt(): _ { Yogurt { funs = map[String, YogurtFun]() } }

fun $(op: YogurtOp, type: PlumType): _ { YogurtExpr { op, type } }

fun signature(module: Module, name: String, params: Slice[PlumType]): String {
  var b = string_builder().&
  b."{module}.{name}"
  for param in params do b." {param}"
  b.to_string()
}

fun return_type(fun_: YogurtFun): PlumType { fun_.get(fun_.body.returns).type }

fun write[W](writer: W, yogurt: Yogurt) {
  var first = true
  for fun_ in yogurt.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    if fun_.value.captures is some(captures) then {
      writer." (captures "
      for capture in captures do writer." {capture}"
      writer.")"
    }
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, body: YogurtBody, fun_: YogurtFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.children do {
    var expr = fun_.dag.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: YogurtOp, fun_: YogurtFun, indentation: Int) {
  switch op
  case uninitialized writer."uninitialized"
  case int(int) writer."int {int}"
  case string(string) writer."string {string}"
  case param(param) writer."param {param}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case enum_(enum_) writer."enum {enum_.name} {enum_.value}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case lambda(lambda) {
    writer."lambda [capturing"
    for capture in lambda.captures do writer." {capture}"
    writer."] {lambda.function}"
  }
  case call(call) {
    writer."call {call.callee}"
    for arg in call.args do writer." {arg}"
  }
  case type(type) writer."type {type}"
}
fun write[W](writer: W, callee: YogurtCallee) {
  switch callee
  case lambda(lambda) writer."{lambda}"
  case fun_(fun_) writer."{fun_}"
  case builtin(builtin) writer."{builtin.debug()}"
}
