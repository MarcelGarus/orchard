import mod.mar

struct SushiBuilder { sections: List[SushiSection] }
struct SushiSectionBuilder {
  sushi: &SushiBuilder,
  name: String,
  index: SectionIndex,
  instructions: List[SushiInstruction],
}

fun sushi_builder(): SushiBuilder {
  SushiBuilder { sections = list[SushiSection]() }
}

fun section(sushi: &SushiBuilder, name: String): SushiSectionBuilder {
  var index = SectionIndex { index = sushi.sections.len }
  sushi.sections.&.push(uninitialized[SushiSection]().*)
  SushiSectionBuilder {
    sushi, name, index, instructions = list[SushiInstruction]()
  }
}

fun push(section: &SushiSectionBuilder, instruction: SushiInstruction) {
  section.instructions.&.push(instruction)
}

fun finish(section: SushiSectionBuilder) {
  section.sushi.sections.&.set(
    section.index.index,
    SushiSection {
      name = section.name, instructions = section.instructions.to_slice()
    },
  )
}

fun finish(sushi: SushiBuilder, entry_point: SectionIndex): Sushi {
  Sushi { entry_point, sections = sushi.sections.to_slice() }
}
