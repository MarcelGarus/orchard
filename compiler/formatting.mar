import plum.mar

struct Indentation { amount: Int }

var no_indentation = indentation(0)

fun indentation(amount: Int): _ { Indentation { amount } }
fun +(indentation: Indentation, extra: Int): _ { indentation(indentation.amount + extra) }
fun write[W](writer: W, indentation: Indentation) {
  writer."{ansi_escape}[37;1m"
  for i in 0..indentation.amount do writer."| "
  writer."{ansi_escape}[0m"
}

struct FormatWithoutWhitespace[T] { value: T }

fun without_whitespace[T](value: T): _ { FormatWithoutWhitespace { value } }

var colored = true

var ansi_escape = AnsiEscape {}
struct AnsiEscape {}
fun write[W](writer: W, ansi_escape: AnsiEscape) {
  writer.write_byte(27.lower_byte())
}

fun pretty(id: Id): PrettyId { PrettyId { id } }
struct PrettyId { id: Id }
fun write[W](writer: W, id: PrettyId) {
  writer."{ansi_escape}[32;1m{id.id}{ansi_escape}[0m"
}

fun pretty_op(op: String): PrettyOp { PrettyOp { op } }
struct PrettyOp { op: String }
fun write[W](writer: W, op: PrettyOp) {
  writer."{ansi_escape}[35;1m{op.op}{ansi_escape}[0m"
}

fun pretty(type: EggType): PrettyType { PrettyType { type } }
struct PrettyType { type: EggType }
fun write[W](writer: W, type: PrettyType) {
  writer."{ansi_escape}[36m{type.type}{ansi_escape}[0m"
}

fun pretty_signature(signature: String): PrettySignature {
  PrettySignature { signature }
}
struct PrettySignature { signature: String }
fun write[W](writer: W, signature: PrettySignature) {
  writer."{ansi_escape}[31m{signature.signature}{ansi_escape}[0m"
}

fun pretty_signature_def(signature: String): PrettySignatureDef {
  PrettySignatureDef { signature }
}
struct PrettySignatureDef { signature: String }
fun write[W](writer: W, signature: PrettySignatureDef) {
  writer."{ansi_escape}[31;1m{signature.signature}{ansi_escape}[0m"
}
