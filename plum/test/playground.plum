import
  "...core"
    Int, String, Dynamic, to_dynamic t, format Dynamic, list t t t, List t,
    iterate (List t), map (Iterator a) (\ a -> b), sum (Iterator Int),
    Iterator t, + Int Int, format Int, debug_format value:t, list t t t t t,
    any t:Type, Type, Bool, + String String, generate_array Int (\ Int -> t),
    list t, empty_list t:Type, length (Array t), Array t, < Int Int,
    push (List t) t, get_maybe (Array t) Int, else (Maybe t) t, Maybe t,
    crash String, String, as t t:Type, call (\ -> t), compare Int Int,
    mod Int Int, get (Array t) Int, >= Int Int, to_int Byte, <= Int Int, Byte,
    and Bool Bool, - Int Int, is_empty (Array t), substring String (Range Int),
    Range t, * Int Int, length String, to t t, to_byte Int,
    lower_byte Int, iterate (Array t), filter (Iterator t) (\ t -> Bool),
    / Int Int, list t t, max Int Int, == Int Int
  "...graphics"
    Size, Texture, Color, Rectangle, generate_texture Size (\ Int Int -> t),
    generate_texture Size Color, draw Texture Position Texture, Position,
    rgb Int Int Int, fill_rectangle Texture Rectangle Color
  "...ui" Widget, colored Color Widget, empty_widget Int, padding Int Widget

# TODO: figure out what to do with Tasks
# Task =
#   | exit
#     print: (& message: String then: \ -> Task)
#     random: \ Int -> Task
#     read_line: \ String -> Task
# 
# print message: String then: (\ -> Task) -> Task = | print: & message then
# random then: (\ Int -> Task) -> Task = | random: then
# read_line then: (\ String -> Task) -> Task = | read_line: then

App =
  & render: (\ Size -> Texture)

hello point: (& x: Int y: Int) -> Int =
  point.x .+ (point.y)

LinkedList t = | empty more: (& item: t rest: (LinkedList t))

make_linked_list n: Int -> (LinkedList Int) =
  n .== 0
  % true -> | empty
    false -> | more: & item: n rest: (make_linked_list (n .- 1))

length list: (LinkedList t) -> Int =
  list
  % empty -> 0
    more: (& item rest) -> 1 .+ (rest.length)

main a: Int -> App =
  #generate_array 100 \ i: Int -> i
  #. iterate
  #. map \ i: Int -> i .+ 1
  #. filter \ i: Int -> i .<= 40
  #. sum
  #a.to_byte
  & render:
      \ size: Size ->
        generate_texture
          size
          rgb
            255
            200
            200
        . fill_rectangle
            & top: 5 left: 5 right: 50 bottom: 50
            rgb
              255
              50
              50

fibonacci n: Int -> Int =
  n .< 2
  % true -> 1
    false -> + (fibonacci (n .- 1)) (fibonacci (n .- 2))

test_iterators a: Int -> Int =
  list a a a
  . iterate
  . map \ a: Int -> a .+ 1
  . filter \ a: Int -> a .>= 2
  . sum

test_widget a: Int -> Widget =
  white  = rgb (239) (230) (221)
  yellow = rgb (243) (223) (162)
  blue   = rgb (126) (189) (194)
  red    = rgb (187) (68)  (48)
  
  colored
    white
    padding
      1
      colored
        yellow
        padding 2 (colored blue (padding 3 (colored red (empty_widget 0))))
