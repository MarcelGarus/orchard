import
  "...core"
    Int, String, Dynamic, to_dynamic t, format Dynamic, list t t t, List t,
    iterate (List t), map (Iterator a) (\ a -> b), sum (Iterator Int),
    Iterator t, + Int Int, format Int, debug_format value:t, list t t t t t,
    any t:Type, Type, Bool, + String String, generate_array Int (\ Int -> t),
    list t, empty_list t:Type, length (Array t), Array t, < Int Int,
    push (List t) t, get_maybe (Array t) Int, else (Maybe t) t, Maybe t,
    crash String, String, as t t:Type, call (\ -> t), compare Int Int,
    mod Int Int, get (Array t) Int, >= Int Int, to_int Byte, <= Int Int, Byte,
    and Bool Bool, - Int Int, is_empty (Array t), substring String (Range Int),
    Range t, * Int Int, length String, to t t, to_byte Int,
    lower_byte Int, iterate (Array t), filter (Iterator t) (\ t -> Bool),
    / Int Int, list t t, max Int Int, == Int Int, generate_matrix Size (\ Int Int -> t),
    Matrix t, set (Array t) Int t
  "...graphics"
    Size, Texture, Color, Rectangle, generate_texture Size (\ Int Int -> t),
    generate_texture Size Color, draw Texture Position Texture, Position,
    rgb Int Int Int, fill_rectangle Texture Rectangle Color,
    Font, my_font Int,
    draw_text Texture String Position Int Font Color

# TODO: figure out what to do with Tasks
# Task =
#   | exit
#     print: (& message: String then: \ -> Task)
#     random: \ Int -> Task
#     read_line: \ String -> Task
# 
# print message: String then: (\ -> Task) -> Task = | print: & message then
# random then: (\ Int -> Task) -> Task = | random: then
# read_line then: (\ String -> Task) -> Task = | read_line: then

App = & render: (\ Size -> Texture)

main a: Int -> App =
  & render:
      \ size: Size ->
        # Scale down the size for better performance and a retro style.
        size =  & width: (size.width ./ 20) height: (size.height ./ 20)
        generate_texture
          size
          \ x: Int y: Int ->
            rgb
              255
              x .* 20 .mod 256
              y .* 20 .mod 256
        .draw_text "Hello" (& x: 10 y: 10) 100 (my_font 0) (rgb 0 0 0)

fibonacci n: Int -> Int =
  n .< 2
  % true -> 1
    false -> + (fibonacci (n .- 1)) (fibonacci (n .- 2))
