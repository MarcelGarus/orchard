import
  "..core"
    Byte, Matrix t, Size, Int, + Int Int, to Int Int, contains (Range Int) Int,
    Range t, and Bool Bool, Bool, Position, - Int Int,
    generate_matrix Size (\ Int Int -> t), to_int Byte, == Int Int, to_byte Int,
    get (Matrix t) Int Int, set (Matrix t) Int Int t

Color = & red: Byte blue: Byte green: Byte alpha: Byte

rgba red: Int green: Int blue: Int alpha: Int -> Color =
  & red: red.to_byte green: green.to_byte blue: blue.to_byte alpha: 255.to_byte

rgb red: Int green: Int blue: Int -> Color = rgba red green blue 255

blend bottom: Color top: Color -> Color =
  top.alpha.to_int .== 0
  % true -> bottom
    false -> top

Rectangle = & left: Int top: Int right: Int bottom: Int

by at: Position size: Size -> Rectangle =
  & left: at.x
    top: at.y
    right: (at.x .+ (size.width))
    bottom: (at.y .+ (size.height))

contains rect: Rectangle pos: Position -> Bool =
  and
    rect.left .to (rect.right) .contains (pos.x)
    rect.top .to (rect.bottom) .contains (pos.y)

Texture = Matrix Color

generate_texture size: Size generator: (\ Int Int -> Color) -> Texture =
  generate_matrix size generator

generate_texture size: Size color: Color -> Texture =
  generate_texture size \ x: Int y: Int -> color

update_area
  texture: Texture rectangle: Rectangle update: (\ Int Int Color -> Color)
  -> Texture
= texture .update_from_column rectangle update (rectangle.top)

update_from_column
  texture: Texture
  rectangle: Rectangle
  update: (\ Int Int Color -> Color)
  y: Int
  -> Texture
= y .== (rectangle.bottom)
  % true -> texture
    false -> texture .update_from_row rectangle update (rectangle.left) y

update_from_row
  texture: Texture
  rectangle: Rectangle
  update: (\ Int Int Color -> Color)
  x: Int
  y: Int
  -> Texture
= x .== (rectangle.right)
  % true -> texture
    false -> texture .set x y (update x y (texture .get x y))

draw to: Texture at: Position what: Texture -> Texture =
  to
  . update_area
      at .by (what.size)
      \ x: Int y: Int old: Color ->
        old .blend (what .get (x .- (at.x)) (y .- (at.y)))

fill_rectangle to: Texture rectangle: Rectangle color: Color -> Texture =
  to .update_area rectangle (\ x: Int y: Int old: Color -> old .blend color)
