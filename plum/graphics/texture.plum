import
  "...core"
    Int
    Matrix t
    Position
    Size
    == Int Int
    - Int Int
    generate_matrix Size (\ Int Int -> t)
    get (Matrix t) Int Int
    set (Matrix t) Int Int t
  "..color" Color, blend Color Color
  "..rectangle" Rectangle, by Position Size
  "..texture" Texture

Texture = Matrix Color

generate_texture size: Size generator: (\ Int Int -> Color) -> Texture =
  generate_matrix size generator

generate_texture size: Size color: Color -> Texture =
  generate_texture size \ x: Int y: Int -> color

update_area
  texture: Texture rectangle: Rectangle update: (\ Int Int Color -> Color)
  -> Texture
= texture .update_from_column rectangle update (rectangle.top)

update_from_column
  texture: Texture
  rectangle: Rectangle
  update: (\ Int Int Color -> Color)
  y: Int
  -> Texture
= y .== (rectangle.bottom)
  % true -> texture
    false -> texture .update_from_row rectangle update (rectangle.left) y

update_from_row
  texture: Texture
  rectangle: Rectangle
  update: (\ Int Int Color -> Color)
  x: Int
  y: Int
  -> Texture
= x .== (rectangle.right)
  % true -> texture
    false -> texture .set x y (update x y (texture .get x y))

draw to: Texture at: Position what: Texture -> Texture =
  to
  . update_area
      at .by (what.size)
      \ x: Int y: Int old: Color ->
        old .blend (what .get (x .- (at.x)) (y .- (at.y)))

fill_rectangle to: Texture rectangle: Rectangle color: Color -> Texture =
  to .update_area rectangle (\ x: Int y: Int old: Color -> old .blend color)
