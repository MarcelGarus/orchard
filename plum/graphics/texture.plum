export
  Texture
  filled_texture Size Color -> Texture
  generate_texture Size (\ Position -> Color) -> Texture
  update_area Texture Rectangle (\ Position Color -> Color) -> Texture
  draw_texture Texture Position Texture -> Texture
  fill_rectangle Texture Rectangle Color -> Texture

import
  ...core
  ..color
  ..rectangle
  ..texture
  ..matrix

Texture = Matrix Color

filled_texture size: Size color: Color -> Texture = filled_matrix size color

generate_texture size: Size generator: (\ Position -> Color) -> Texture =
  generate_matrix size generator

update_area
  texture: Texture rectangle: Rectangle update: (\ Position Color -> Color)
  -> Texture
= rectangle = intersection rectangle ((& x: 0 y: 0) .by (texture.size))
  loop
    & texture y: (rectangle.top)
    \ state: (& texture: Texture y: Int) ->
      (& texture y) = state
      y .>= (min (rectangle.bottom) (texture.size.width))
      % true -> | break: texture
        false ->
          | continue:
              & y: (y .+ 1)
                texture:
                  loop
                    & texture x: (rectangle.left)
                    \ state: (& texture: Texture x: Int) ->
                      (& texture x) = state
                      x .>= (rectangle.right)
                      % true -> | break: texture
                        false ->
                          | continue:
                              & x: (x .+ 1)
                                texture:
                                  texture
                                  . set x y (update (& x y) (texture .get x y))

draw to: Texture at: Position what: Texture -> Texture =
  to
  . update_area
      at .by (what.size)
      \ position: Position old: Color -> old .blend (what .get (position .- at))

fill_rectangle to: Texture rectangle: Rectangle color: Color -> Texture =
  to
  . update_area rectangle (\ position: Position old: Color -> old .blend color)
