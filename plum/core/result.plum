# Result

export
  Result o e
  is_ok (Result o e) -> Bool
  is_error (Result o e) -> Bool
  unwrap (Result o e) -> o
  unwrap (Result o e) String -> o
  map (Result a e) (\ a -> b) -> (Result b e)
  map_error (Result o a) (\ a -> b) -> (Result o b)

import
  ..bool
  ..never
  ..string

Result o e = | ok: o error: e

is_ok result: (Result o e) -> Bool =
  result
  % ok -> | true
    error -> | false

is_error result: (Result o e) -> Bool =
  result
  % ok -> | false
    error -> | true

unwrap result: (Result o e) message: String -> o =
  result
  % ok: value -> value
    error: error -> crash message

unwrap result: (Result o e) -> o = result .unwrap "Called unwrap on error"

map result: (Result o e) mapper: (\ o -> t) -> (Result t e) =
  result
  % ok: value -> | ok: (mapper value)
    error: error -> | error: error

map_error result: (Result o e) mapper: (\ e -> t) -> (Result o t) =
  result
  % ok: value -> | ok: value
    error: error -> | error: (mapper error)
