# Result  

import
  "..bool" Bool
  "..never" crash String
  "..string" String
export Result o e, unwrap (Result o e)

Result o e = | ok: o error: e

is_ok result: (Result o e) -> Bool =
  result
  % ok -> | true
    error -> | false

is_error result: (Result o e) -> Bool =
  result
  % ok -> | false
    error -> | true

unwrap result: (Result o e) message: String -> o =
  result
  % ok: value -> value
    error: error -> crash message

unwrap result: (Result o e) -> o = result .unwrap "Called unwrap on error"

map result: (Result o e) mapper: (\ o -> t) -> (Result t e) =
  result
  % ok: value -> | ok: (mapper value)
    error: error -> | error: error

map_error result: (Result o e) mapper: (\ e -> t) -> (Result o t) =
  result
  % ok: value -> | ok: value
    error: error -> | error: (mapper error)
