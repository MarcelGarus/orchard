# Lists
#
# In Plum, Lists are array lists.

export
  List a
  empty_list a:Type -> (List a)
  list a -> (List a)
  list a a -> (List a)
  list a a a -> (List a)
  list a a a a -> (List a)
  list a a a a a -> (List a)
  list a a a a a a -> (List a)
  list a a a a a a a -> (List a)
  list a a a a a a a a -> (List a)
  list a a a a a a a a a -> (List a)
  list a a a a a a a a a a -> (List a)
  reserve_for_length (List a) Int -> (List a)
  reserve_for_extra (List a) Int -> (List a)
  is_empty (List a) -> Bool
  push (List a) a -> (List a)
  push_without_growing (List a) a -> (Result (List a) Nothing)
  push_all (List a) (Iterator a) -> (List a)
  get_maybe (List a) Int -> (Maybe a)
  get (List a) Int -> a
  slice (List a) (Range Int) -> (List a)
  shrink (List a) -> (List a)
  to_array (List a) -> (Array a)
  iterate (List a) -> (Iterator a)
  to_list (Iterator a) -> (List a)

import
  ..any
  ..array
  ..bool
  ..int
  ..iterator
  ..maybe
  ..never
  ..string
  ..range
  ..test
  ..type

List t = & array: (Array t) length: Int

empty_list t: Type -> (List t) =
  & array: generate_array 0 \ index: Int -> crash "not called" .as t
    length: 0
list a: t -> (List t) = empty_list t .reserve_for_length 1 .push a
list a: t b: t -> (List t) = empty_list t .reserve_for_length 2 .push a .push b
list a: t b: t c: t -> (List t) =
  empty_list t .reserve_for_length 3 .push a .push b .push c
list a: t b: t c: t d: t -> (List t) =
  empty_list t .reserve_for_length 4 .push a .push b .push c .push d
list a: t b: t c: t d: t e: t -> (List t) =
  empty_list t .reserve_for_length 5 .push a .push b .push c .push d .push e
list a: t b: t c: t d: t e: t f: t -> (List t) =
  empty_list t
  . reserve_for_length 6
  . push a
  . push b
  . push c
  . push d
  . push e
  . push f
list a: t b: t c: t d: t e: t f: t g: t -> (List t) =
  empty_list t
  . reserve_for_length 7
  . push a
  . push b
  . push c
  . push d
  . push e
  . push f
  . push g
list a: t b: t c: t d: t e: t f: t g: t h: t -> (List t) =
  empty_list t
  . reserve_for_length 8
  . push a
  . push b
  . push c
  . push d
  . push e
  . push f
  . push g
  . push h
list a: t b: t c: t d: t e: t f: t g: t h: t i: t -> (List t) =
  empty_list t
  . reserve_for_length 9
  . push a
  . push b
  . push c
  . push d
  . push e
  . push f
  . push g
  . push h
  . push i
list a: t b: t c: t d: t e: t f: t g: t h: t i: t j: t -> (List t) =
  empty_list t
  . reserve_for_length 10
  . push a
  . push b
  . push c
  . push d
  . push e
  . push f
  . push g
  . push h
  . push i
  . push j

# Makes sure that the list can reach the target_length without reallocating.
reserve_for_length list: (List t) target_length: Int -> (List t) =
  & array:
      list.array.length .< target_length
      % true  -> | grow
        false -> | fits
      % grow ->
          default_item = any t
          generate_array
            target_length .round_up_to_power_of 2
            \ index: Int -> list.array .get_maybe index .else default_item
        fits -> list.array
    length: list.length

reserve_for_extra list: (List t) extra: Int -> (List t) =
  list .reserve_for_length (list.length .+ extra)

is_empty list: (List t) -> Bool = list.length .== 0

push_without_growing list: (List t) item: t -> (Maybe (List t)) =
  (& array length: len) = list
  len .< (array.length)
  % true -> | some: & array: (array .set len item) length: (len .+ 1)
    false -> | none

push list: (List t) item: t -> (List t) =
  list .reserve_for_extra 1 .push_without_growing item .unwrap

push_all list: (List t) iterator: (Iterator t) -> (List t) =
  iterator.next
  % empty -> list
    more: (& item rest) -> list .push item .push_all rest

get_maybe list: (List t) index: Int -> (Maybe t) =
  0 .to (list.length) .contains index
  % true -> | some: list.array .get index
    false -> | none

get list: (List t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

slice list: (List t) range: (Range Int) -> (List t) =
  & array: (list.array .slice range) length: range.length

shrink list: (List t) -> (List t) = list .slice (0 .to (list.length))

to_array list: (List t) -> (Array t) = list.shrink.array

iterate list: (List t) -> (Iterator t) = list.to_array.iterate

to_list iterator: (Iterator t) -> (List t) = empty_list t .push_all iterator
