# Lists
#
# In Plum, Lists are array lists.

import
  "..any" any t:Type
  "..array"
    Array t
    copy (Array t) (Array t) (Range Int)
    generate_array Int (\ Int -> t)
    get (Array t) Int
    get_maybe (Array t) Int
    length (Array t)
    set (Array t) Int t
    slice (Array t) (Range Int)
    iterate (Array t)
  "..bool" Bool
  "..int"
    Int
    == Int Int
    < Int Int
    + Int Int
    * Int Int
    max Int Int
    round_up_to_power_of Int Int
  "..iterator" Iterator t, next (Iterator t)
  "..maybe" Maybe t, else (Maybe t) t, unwrap (Maybe t) String
  "..never" crash String
  "..string" String
  "..range" Range t, contains (Range Int) Int, length (Range Int), to t t
  "..test" assert Bool
  "..type" Type, as t t: Type

List t = & array: (Array t) length: Int

empty_list t: Type -> (List t) =
  & array: generate_array 0 \ index: Int -> crash "not called" .as t
    length: 0
list a: t -> (List t) = empty_list t .reserve 1 .push a
list a: t b: t -> (List t) = empty_list t .reserve 2 .push a .push b
list a: t b: t c: t -> (List t) =
  empty_list t .reserve 3 .push a .push b .push c
list a: t b: t c: t d: t -> (List t) =
  empty_list t .reserve 4 .push a .push b .push c .push d
list a: t b: t c: t d: t e: t -> (List t) =
  empty_list t .reserve 5 .push a .push b .push c .push d .push e
list a: t b: t c: t d: t e: t f: t -> (List t) =
  empty_list t .reserve 6 .push a .push b .push c .push d .push e .push f
list a: t b: t c: t d: t e: t f: t g: t -> (List t) =
  empty_list t .reserve 7 .push a .push b .push c .push d .push e .push f .push g
list a: t b: t c: t d: t e: t f: t g: t h: t -> (List t) =
  empty_list t .reserve 8 .push a .push b .push c .push d .push e .push f .push g .push h
list a: t b: t c: t d: t e: t f: t g: t h: t i: t -> (List t) =
  empty_list t
  .reserve 9
  .push a
  .push b
  .push c
  .push d
  .push e
  .push f
  .push g
  .push h
  .push i

# Makes sure that the list can reach the target_length without reallocating.
reserve list: (List t) target_length: Int -> (List t) =
  default_item = any t
  & array:
      list.array.length .< target_length
      % true  -> | grow
        false -> | fits
      % grow ->
          generate_array
            target_length .round_up_to_power_of 2
            \ index: Int -> list.array .get_maybe index .else default_item
        fits -> list.array
    length: list.length

reserve_extra list: (List t) extra: Int -> (List t) =
  list .reserve (list.length .+ extra)

is_empty list: (List t) -> Bool = list.length .== 0

push list: (List t) item: t -> (List t) =
  # TODO: hack so that we don't use list after the array.set
  length = list.length
  new_len = length .+ 1
  & array: (list .reserve new_len .array .set length item) length: new_len

push_all list: (List t) iterator: (Iterator t) -> (List t) =
  iterator.next
  % empty -> list
    more: (& item rest) -> list .push item .push_all rest

get_maybe list: (List t) index: Int -> (Maybe t) =
  0 .to (list.length) .contains index
  % true -> | some: list.array .get index
    false -> | none

get list: (List t) index: Int -> t =
  list .get_maybe index .unwrap "out of bounds"

slice list: (List t) range: (Range Int) -> (List t) =
  & array: (list.array .slice range) length: range.length

shrink list: (List t) -> (List t) = list .slice (0 .to (list.length))

to_array list: (List t) -> (Array t) = list.shrink.array

iterate list: (List t) -> (Iterator t) = list.to_array.iterate

to_list iterator: (Iterator t) -> (List t) = empty_list t .push_all iterator
