# Strings

export
  String
  ++ String String -> String
  == String String -> String
  length String -> Int
  slice String (OpenRange Int) -> String
  slice String (Range Int) -> String
  starts_with String String -> Bool

import
  ..array
  ..bool
  ..byte
  ..int
  ..range

String = & utf8_bytes: (Array Byte)

++ a: String b: String -> String =
  & utf8_bytes: (concat (a.utf8_bytes) (b.utf8_bytes))

== a: String b: String -> Bool = a.utf8_bytes .== (b.utf8_bytes)

length string: String -> Int = string.utf8_bytes.length

slice string: String range: (Range Int) -> String =
  & utf8_bytes: (string.utf8_bytes .slice range)

slice string: String range: (OpenRange Int) -> String =
  string .slice (& start: (range.start) end: string.length)

starts_with string: String prefix: String -> Bool =
  string.utf8_bytes .starts_with (prefix.utf8_bytes)
