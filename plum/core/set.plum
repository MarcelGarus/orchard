export
  Set a
  empty_set a capacity:Int (\ a -> Hash) (\ a a -> Bool) -> (Set a)
  empty_set a (\ a -> Hash) (\ a a -> Bool) -> (Set a)
  put (Set a) a -> (Set a)
# put_no_clobber

import "..bool" "..hash" "..int" "..map" "..nothing" "..type"

Set t = Map t Nothing

empty_set
  t: Type capacity: Int hash: (\ t -> Hash) equals: (\ t t -> Bool) -> (Set t)
= empty_map t Nothing capacity hash equals

empty_set t: Type hash: (\ t -> Hash) equals: (\ t t -> Bool) -> (Set t) =
  empty_set t 0 hash equals

put set: (Set t) value: t -> (Set t) = set .put value &
