# Bool
# A type with two instances.

export
  Bool
  not Bool -> Bool
  == Bool Bool -> Bool
  and Bool Bool -> Bool
  format Bool -> String
  if Bool t t -> t
  if Bool t (\ -> t) -> t
  if Bool (\ -> t) t -> t
  implies Bool Bool -> Bool
  or Bool Bool -> Bool
  xor Bool Bool -> Bool

import
  ..call
  ..string

Bool = | true false

not bool: Bool -> Bool =
  bool
  % true -> | false
    false -> | true

== a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> not b

and a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> | false

or a: Bool b: Bool -> Bool =
  a
  % true -> | true
    false -> b

xor a: Bool b: Bool -> Bool =
  a
  % true -> not b
    false -> b

implies a: Bool b: Bool -> Bool =
  a
  % true -> b
    false -> | true

format b: Bool -> String =
  b
  % true -> "true"
    false -> "false"

if condition: Bool then: t else: t -> t =
  condition
  % true  -> then
    false -> else

if condition: Bool then: t else: (\ -> t) -> t =
  condition
  % true  -> then
    false -> else.call
