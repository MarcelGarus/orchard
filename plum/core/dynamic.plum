export
  Dynamic
  format Dynamic -> String
  to_dynamic t -> Dynamic
  to_static Dynamic a:Type -> a

import
  builtins
  ..array
  ..bool
  ..box
  ..byte
  ..int
  ..iterator
  ..maybe
  ..string
  ..type

to_dynamic value: t -> Dynamic = static_to_dynamic value
to_static dynamic: Dynamic t: Type -> t = dynamic_to_static dynamic t

Dynamic =
  | byte: Byte
    int: Int
    type
    box: Dynamic
    array: (Array Dynamic)
    struct: (Array (& name: String value: Dynamic))
    enum: (& name: String value: Dynamic)
    lambda: (\ (Array Dynamic) -> Dynamic)

get fields: (Array (& name: String value: Dynamic)) name: String -> Dynamic =
  fields
  . iterate
  . find \ field: (& name: String value: Dynamic) -> field.name .== name
  . unwrap
  . value

format dynamic: Dynamic -> String =
  dynamic
  % byte: byte -> byte.format
    int: int -> int.format
    type -> "type"
    box: inner -> "(box " .++ (inner.format) .++ ")"
    array: items ->
      "(array "
      . ++ (items.iterate .map (\ item: Dynamic -> " " .++ (item.format)) .join)
      . ++ ")"
    struct: fields ->
      "(&"
      . ++
          fields
          . iterate
          . map
              \ field: (& name: String value: Dynamic) ->
                " " .++ (field.name) .++ ": " .++ (field.value.format)
          . join
      . ++ ")"
    enum: (& name value) ->
      value
      % byte  -> | show_value
        int   -> | show_value
        type  -> | show_value
        box   -> | show_value
        array -> | show_value
        struct: fields ->
          fields.is_empty
          % true  -> | omit_value
            false -> | show_value
        enum   -> | show_value
        lambda -> | show_value
      % show_value -> "(| " .++ name .++ ": " .++ (value.format) .++ ")"
        omit_value -> "(| " .++ name .++ ")"
    lambda -> "(\\ ...)"
