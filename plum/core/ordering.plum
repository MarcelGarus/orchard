# Ordering
# Many types have an inherent order. This module has functions that simplify
# working with such types.

export
  Ordering
  flip Ordering -> Ordering
  is_== Ordering -> Bool
  is_!= Ordering -> Bool
  is_< Ordering -> Bool
  is_> Ordering -> Bool
  is_<= Ordering -> Bool
  is_>= Ordering -> Bool

import "..bool"

Ordering = | less equal greater

flip ordering: Ordering -> Ordering =
  ordering
  % less -> | greater
    equal -> | equal
    greater -> | less

is_== ordering: Ordering -> Bool =
  ordering
  % less -> | false
    equal -> | true
    greater -> | false

is_!= ordering: Ordering -> Bool =
  ordering
  % less -> | true
    equal -> | false
    greater -> | true

is_< ordering: Ordering -> Bool =
  ordering
  % less -> | true
    equal -> | false
    greater -> | false

is_> ordering: Ordering -> Bool =
  ordering
  % less -> | false
    equal -> | false
    greater -> | true

is_<= ordering: Ordering -> Bool =
  ordering
  % less -> | true
    equal -> | true
    greater -> | false

is_>= ordering: Ordering -> Bool =
  ordering
  % less -> | false
    equal -> | true
    greater -> | true

# fun min[T](a: T, b: T): T { if a < b then a else b }
# fun max[T](a: T, b: T): T { if a > b then a else b }
# fun clamp[T](a: T, range: Range[T]): T { max(range.start, min(range.end.dec(), a)) }
