export
  OpenRange a
  Range a
  contains (Range Int) Int -> Bool
  is_empty (Range Int) -> Bool
  iterate (OpenRange Int) -> (Iterator Int)
  iterate (Range Int) -> (Iterator Int)
  length (Range Int) -> Int
  through Int Int -> (Range Int)
  to a a -> (Range a)
  to_infinity a -> (OpenRange a)

import "..bool" "..int" "..iterator"

# start is inclusive, end is exclusive
Range t = & start: t end: t

to start: t end: t -> (Range t) = & start end

through start: Int end: Int -> (Range Int) = & start end: (end .+ 1)

is_empty range: (Range Int) -> Bool = range.start .== (range.end)

length range: (Range Int) -> Int = range.end .- (range.start)

contains range: (Range Int) number: Int -> Bool =
  and
    number .>= (range.start)
    number .< (range.end)

iterate range: (Range Int) -> (Iterator Int) =
  \ ->
    range.is_empty
    % true -> | empty
      false ->
        (& start end) = range
        | more:
            & item: start
              rest: start .+ 1 .to end .iterate

# start inclusive, has no end
OpenRange t = & start: t

to_infinity start: t -> (OpenRange t) = & start

iterate range: (OpenRange Int) -> (Iterator Int) =
  \ -> | more: & item: range.start rest: (range.start .+ 1 .to_infinity.iterate)
