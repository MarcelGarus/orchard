import
  "..array" Array t, generate_array Int (\ Int -> t), get (Array t) Int
  "..int" Int, * Int Int, mod Int Int, + Int Int, / Int Int

Position = & x: Int y: Int

Size = & width: Int height: Int

+ a: Size b: Size -> Size =
  & width: (a.width .+ (b.width)) height: (a.height .+ (b.height))

Matrix t = & cells: (Array t) size: Size

generate_matrix size: Size generator: (\ Int Int -> t) -> (Matrix t) =
  & cells:
      generate_array
        (size.width) .* (size.height)
        \ i: Int -> generator (i .mod (size.width)) (i ./ (size.width))
    size

get matrix: (Matrix t) x: Int y: Int -> t =
  matrix.cells .get (y .* (matrix.size.width) .+ x)

get matrix: (Matrix t) at: Position -> t = matrix .get (at.x) (at.y)
