# Maybe

export
  Maybe a
  is_some (Maybe a) -> Bool
  is_none (Maybe a) -> Bool
  unwrap (Maybe a) -> a
  unwrap (Maybe a) String -> a
  else (Maybe a) a -> a
  map (Maybe a) (\ a -> b) -> (Maybe b)
  flatten (Maybe (Maybe a)) -> (Maybe a)

import
  ..bool
  ..never
  ..string

Maybe t = | some: t none

is_some maybe: (Maybe t) -> Bool =
  maybe
  % some -> | true
    none -> | false

is_none maybe: (Maybe t) -> Bool =
  maybe
  % some -> | false
    none -> | true

unwrap maybe: (Maybe t) message: String -> t =
  maybe
  % some: value -> value
    none -> crash message

unwrap maybe: (Maybe t) -> t = maybe .unwrap "Called unwrap on none"

else maybe: (Maybe t) default: t -> t =
  maybe
  % some: value -> value
    none -> default

map maybe: (Maybe t) mapper: (\ t -> n) -> (Maybe n) =
  maybe
  % some: value -> | some: (mapper value)
    none -> | none

flatten maybe: (Maybe (Maybe t)) -> (Maybe t) =
  maybe
  % none -> | none
    some: inner -> inner
