import
  "..array"
    Array t, empty_array t:Type, generate_array Int (\ Int -> t),
    length (Array t), get (Array t) Int, iterate (Array t)
  "..bool" Bool, not Bool
  "..byte" lower_byte Int
  "..dynamic" Dynamic, to_static Dynamic t:Type
  "..int" Int, >= Int Int, + Int Int
  "..iterator"
    Iterator t, map (Iterator a) (\ a -> b), filter (Iterator a) (\ a -> Bool),
    any (Iterator a) (\ a -> Bool), all (Iterator a) (\ a -> Bool),
    first (Iterator a)
  "..list" List t, to_list (Iterator t), to_array (List t)
  "..maybe" Maybe t, unwrap (Maybe t)
  "..never" crash String
  "..string" String
  "..type" Type, TypeInfo, type_info Type

any t: Type -> t =
  any (type_info t) .to_static t

any type: TypeInfo -> Dynamic =
  type
  % byte -> | byte: (0.lower_byte)
    int -> | int: 0
    type -> | type
    box: inner -> | box: (any inner)
    array -> | array: (empty_array Dynamic)
    never -> crash "can't generate Never instance"
    struct: fields ->
      | struct:
          generate_array
            fields.length
            \ index: Int ->
              (& name type) = fields .get index
              (& name value: (any type))
    enum: variants ->
      (& name type) =
        variants
        . iterate
        . filter
            \ variant: (& name: String type: TypeInfo) -> variant.type.is_finite
        . first
        . unwrap
      | enum: & name value: (any type)
    lambda: (& arguments return_type) ->
      | lambda: \ args: (Array Dynamic) -> any return_type
    recursive -> crash "type is infinitely recursive"

is_finite type: TypeInfo -> Bool =
  type
  % byte  -> | true
    int   -> | true
    type  -> | true
    box: inner -> inner.is_finite
    array -> | true
    never -> | false
    struct: fields ->
      fields
      . iterate
      . all \ field: (& name: String type: TypeInfo) -> field.type.is_finite
    enum: variants ->
      variants
      . iterate
      . any
        \ variant: (& name: String type: TypeInfo) -> variant.type.is_finite
    lambda -> | true
    recursive -> | false
