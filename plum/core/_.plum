# Welcome to Plum!  

import
  ".any" any t:Type
  ".array"
    Array t
    generate_array Int (\ Int -> t)
    get (Array t) Int
    get_maybe (Array t) Int
    is_empty (Array t)
    iterate (Array t)
    length (Array t)
    set (Array t) Int t
    slice (Array t) (Range Int)
  ".bool"
    Bool
    and Bool Bool
    equals Bool Bool
    format Bool
    implies Bool Bool
    not Bool
    or Bool Bool
    xor Bool Bool
    if Bool t (\ -> t)
  ".box"
    Box t
    box t
    unbox (Box t)
  ".byte"
    Byte
    format Byte
    lower_byte Int
    to_byte Int
    to_int Byte
  ".call" call (\ -> t)
  ".dynamic"
    Dynamic
    to_dynamic t
    to_static Dynamic t:Type
    format Dynamic
  ".format" debug_format value:t
  ".hash" Hash
  ".int"
    Int
    == Int Int
    != Int Int
    < Int Int
    <= Int Int
    > Int Int
    >= Int Int
    + Int Int
    - Int Int
    * Int Int
    / Int Int
    abs Int
    and Int Int
    compare Int Int
    format Int
    log_2 Int
    mod Int Int
    negate Int
    or Int Int
    pow Int Int
    round_up_to_multiple_of Int Int
    round_up_to_power_of Int Int
    shift_left Int Int
    shift_right Int Int
    sqrt Int,
    xor Int Int
    min Int Int
    max Int Int
  ".iterator"
    Iterator t
    all (Iterator a) (\ a -> Bool)
    all_true (Iterator Bool)
    any (Iterator a) (\ a -> Bool)
    any_true (Iterator Bool)
    chain (Iterator t) (Iterator t)
    count (Iterator t)
    cycle (Iterator a)
    enumerate (Iterator a)
    filter (Iterator a) (\ a -> Bool)
    filter_map (Iterator a) (\ a -> (Maybe b))
    find (Iterator a) (\ a -> Bool)
    first (Iterator a)
    flat_map (Iterator a) (\ a -> (Iterator b))
    flatten (Iterator (Iterator a))
    fold (Iterator a) s (\ s a -> s)
    intersperse (Iterator a) a
    join (Iterator String)
    join (Iterator String) String
    last (Iterator a)
    map (Iterator a) (\ a -> b)
    map_while (Iterator a) (\ a -> (Maybe b))
    max (Iterator Int)
    min (Iterator Int)
    next (Iterator t)
    nth (Iterator a) Int
    reduce (Iterator a) (\ a a -> a)
    skip (Iterator a) Int
    skip_while (Iterator a) (\ a -> Bool)
    step_by (Iterator a) Int
    sum (Iterator Int)
    take (Iterator a) Int
    take_while (Iterator a) (\ a -> Bool)
    zip (Iterator aa) (Iterator bb)
  ".linked_list"
    LinkedList t
    get (LinkedList t) Int
    get_maybe (LinkedList t) Int
    is_empty (LinkedList t)
    iterate (LinkedList t)
    length (LinkedList t)
  ".list"
    List t
    empty_list t: Type
    get (List t) Int
    get_maybe (List t) Int
    is_empty (List t)
    iterate (List t)
    list t
    list t t
    list t t t
    list t t t t
    list t t t t t
    list t t t t t t
    list t t t t t t t
    length (List t)
    push (List t) t
    shrink (List t)
    slice (List t) (Range Int)
    to_list (Iterator t)
  ".map"
    Map k v
    Entry k v
    => k v
    empty_int_map v: Type
    empty_map k: Type v: Type hash: (\ k -> Hash) equals: (\ k k -> Bool)
    get_maybe (Map k v) k
    get (Map k v) k
    put (Map k v) (Entry k v)
    put (Map k v) k v
  ".matrix"
    Matrix t
    Position
    Size
    generate_matrix Size (\ Int Int -> t)
    get (Matrix t) Position
    get (Matrix t) Int Int
  ".maybe"
    Maybe t
    else (Maybe t) t
    unwrap (Maybe t)
    unwrap (Maybe t) String
  ".never" crash String
  ".nothing"
    Nothing
    equals Nothing Nothing
    format Nothing
    ignore t
  ".ordering"
    Ordering
    is_== Ordering
    is_!= Ordering
    is_< Ordering
    is_<= Ordering
    is_> Ordering
    is_>= Ordering
    flip Ordering
  ".range"
    Range t
    contains (Range Int) Int
    is_empty (Range Int)
    iterate (Range Int)
    through Int Int
    to t t
  ".result"
    Result o e
    unwrap (Result o e)
  ".set"
    Set t
    empty_set t: Type Int (\ t -> Hash) (\ t t -> Bool)
    empty_set t: Type (\ t -> Hash) (\ t t -> Bool)
    put (Set t) t
  ".string"
    String
    + String String
    length String
    substring String (Range Int)
  ".test"
    assert Bool
    assert Bool String
  ".type"
    Type
    TypeInfo
    as t t: Type
    type_info Type
    type_of t
    format TypeInfo
  ".vector"
    Vector t, dot (Vector Int) (Vector Int)
export
  Bool, not Bool, equals Bool Bool, and Bool Bool, or Bool Bool, xor Bool Bool,
  implies Bool Bool, format Bool,
  call (\ -> t),
  Int, + Int Int, - Int Int, * Int Int, / Int Int, mod Int Int, and Int Int,
  or Int Int, xor Int Int, shift_left Int Int, shift_right Int Int, pow Int Int,
  negate Int, abs Int, compare Int Int, < Int Int, > Int Int,
  round_up_to_multiple_of Int, round_up_to_power_of Int, sqrt Int, log_two Int,
  equals Int Int, format Int,
  Linked t, get (Linked t) Int, get_maybe (Linked t) Int, is_empty (Linked t), list t,
  list t t, list t t t, len (Linked t), map (Linked a) (\ a -> b), sum (Linked Int),
  Maybe t, unwrap (Maybe t) String, unwrap (Maybe t),
  crash String,
  Nothing, format Nothing, equals Nothing Nothing, ignore t,
  Ordering, flip Ordering, is_== Ordering, is_!= Ordering, is_< Ordering,
  is_> Ordering, is_<= Ordering, is_>= Ordering
  Result o e, unwrap (Result o e),
  String, + String String,
  Type, TypeInfo, Field, Variant, type_of t, type_info Type
