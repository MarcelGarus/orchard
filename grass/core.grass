# The Grass Standard Library

:.;# Allows us to use dots for aligning code.

# Instructions  

# mnemonic          opcode    immediates      stack
: nop . . . . . . . . . 00 ;#               |                  ->
: add . . . . . . . . . a0 ;#               |      a:int b:int -> (a+b):int
: sub . . . . . . . . . a1 ;#               |      a:int b:int -> (a-b):int
: mul . . . . . . . . . a2 ;#               |      a:int b:int -> (a*b):int
: div . . . . . . . . . a3 ;#               |      a:int b:int -> (a/b):int
: mod . . . . . . . . . a4 ;#               |      a:int b:int -> (a%b):int
: compare_zero  . . . . a5 ;#               |            a:int -> ordering:byte
: and . . . . . . . . . b0 ;#               |      a:int b:int -> (a&b):int
: or  . . . . . . . . . b1 ;#               |      a:int b:int -> (a|b):int
: xor . . . . . . . . . b2 ;#               |      a:int b:int -> (a^b):int
: lower_byte  . . . . . b3 ;#               |            a:int -> a:byte
: byte_to_int . . . . . b4 ;#               |           a:byte -> a:int
: push_padding  . . . . c0 ;#               |           n:byte -> padding:n
: push_byte . . . . . . c1 ;# a:byte        |                  -> a:byte
: push_int  . . . . . . c2 ;# a:int         |                  -> a:int
: push_byte_from_stack  c3 ;# offset:int    |                  -> byte
: push_int_from_stack . c4 ;# offset:int    |                  -> int
: pop . . . . . . . . . c5 ;# amount:byte   |         _:amount ->
: pop_below_top . . . . c6 ;# x:int y:byte  |       _:y kept:x -> kept:x
: malloc_word_aligned . d0 ;#               |         size:int -> ptr:int
: free_word_aligned . . d1 ;#               |         size:int -> ptr:int
: store_byte  . . . . . d2 ;#               |  ptr:word b:byte ->
: store_word  . . . . . d3 ;#               |  ptr:word w:word ->
: load_byte . . . . . . d4 ;#               |         ptr:word -> b:byte
: load_word . . . . . . d5 ;#               |         ptr:word -> w:word
: store_bytes . . . . . d6 ;# len:int b:len |         ptr:word ->
: malloc_byte_aligned . d7 ;#               |         size:int -> ptr:int
: free_byte_aligned . . d8 ;#               | ptr:word size:word ->
: crash . . . . . . . . e0 ;#               | ptr:word len:word -> BANG
: jump  . . . . . . . . f0 ;# target:word   |                  ->
: jump_table  . . . . . f1 ;# len:byte targets:word*len | b:byte ->
: call  . . . . . . . . f2 ;# target:word   |                  ->
: push_indirect . . . . f3 ;# target:word   |                  -> token:word
: call_indirect . . . . f4 ;# pop:byte      | _:pop token:word ->
: return  . . . . . . . f5 ;#               |                  ->

# Numbers  
# Full-word numbers.

:   0 00 00 00 00 00 00 00 00 ;
:   1 00 00 00 00 00 00 00 01 ;
:   2 00 00 00 00 00 00 00 02 ;
:   4 00 00 00 00 00 00 00 04 ;
:   8 00 00 00 00 00 00 00 08 ;
: _16 00 00 00 00 00 00 00 10 ;
: _24 00 00 00 00 00 00 00 18 ;
: _32 00 00 00 00 00 00 00 20 ;
:  -1 ff ff ff ff ff ff ff ff ;
