# The Grass Standard Library

: . ; # Allows us to use dots for aligning code.

# Instructions  

# mnemonic          opcode    immediates    stack
: nop . . . . . . . . . 00 ;#             |               ->
: add . . . . . . . . . a0 ;#             |       a:8 b:8 -> (a+b):8
: sub . . . . . . . . . a1 ;#             |       a:8 b:8 -> (a-b):8
: mul . . . . . . . . . a2 ;#             |       a:8 b:8 -> (a*b):8
: div . . . . . . . . . a3 ;#             |       a:8 b:8 -> (a/b):8
: mod . . . . . . . . . a4 ;#             |       a:8 b:8 -> (a%b):8
: compare_zero  . . . . a5 ;#             |           a:8 -> ordering:1
: and . . . . . . . . . b0 ;#             |       a:8 b:8 -> (a&b):8
: or  . . . . . . . . . b1 ;#             |       a:8 b:8 -> (a|b):8
: xor . . . . . . . . . b2 ;#             |       a:8 b:8 -> (a^b):8
: lower_byte  . . . . . b3 ;#             |           a:8 -> a:1
: byte_to_word  . . . . b4 ;#             |           a:1 -> a:8
: push_padding  . . . . c0 ;#             |           n:1 -> padding:n
: push_byte . . . . . . c1 ;# a:1         |               -> a:1
: push_word . . . . . . c2 ;# a:8         |               -> a:8
: push_byte_from_stack  c3 ;# offset:8    |               -> byte
: push_word_from_stack  c4 ;# offset:8    |               -> word
: pop . . . . . . . . . c5 ;# amount:1    |      _:amount ->
: pop_below_top . . . . c6 ;# a:8 b:1     |    _:b kept:a -> kept:a
: malloc_word_aligned . d0 ;#             |        size:8 -> ptr:8
: free_word_aligned . . d1 ;#             |  ptr:8 size:8 ->
: store_byte  . . . . . d2 ;#             |     ptr:8 b:1 ->
: store_word  . . . . . d3 ;#             |     ptr:8 w:8 ->
: load_byte . . . . . . d4 ;#             |         ptr:8 -> b:1
: load_word . . . . . . d5 ;#             |         ptr:8 -> w:8
: store_bytes . . . . . d6 ;# len:8 b:len |         ptr:8 ->
: malloc_byte_aligned . d7 ;#             |        size:8 -> ptr:8
: free_byte_aligned . . d8 ;#             |  ptr:8 size:8 ->
: crash . . . . . . . . e0 ;#             |   ptr:8 len:8 -> BANG
: jump  . . . . . . . . f0 ;# target:8    |               ->
: jump_table  . . . . . f1 ;# len:1 targets:8*len | b:1   ->
: call  . . . . . . . . f2 ;# target:8    |               ->
: push_indirect . . . . f3 ;# target:8    |               -> token:8
: call_indirect . . . . f4 ;# pop:1       | _:pop token:8 ->
: return  . . . . . . . f5 ;#             |               ->

# Numbers  
# Full-word numbers.

:   0 00 00 00 00 00 00 00 00 ;
:   1 00 00 00 00 00 00 00 01 ;
:   2 00 00 00 00 00 00 00 02 ;
:   4 00 00 00 00 00 00 00 04 ;
:   8 00 00 00 00 00 00 00 08 ;
: _16 00 00 00 00 00 00 00 10 ;
: _24 00 00 00 00 00 00 00 18 ;
: _32 00 00 00 00 00 00 00 20 ;
:  -1 ff ff ff ff ff ff ff ff ;

: 0w _0 ;
: 1w _8 ;
: 2w _16 ;
: 3w _24 ;
: 4w _32 ;
: 5w _40 ;



: dup   push_word_from_stack 0w ;
: over  push_word_from_stack 1w ;
: over2 push_word_from_stack 2w ;
: over3 push_word_from_stack 3w ;
: over4 push_word_from_stack 4w ;
: over5 push_word_from_stack 5w ;
: pop_over  pop_below_top _8  ;
: pop_over2 pop_below_top _16 ;
