# Low-level memory operations.

# Allocates memory and also makes sure that the allocation succeeded.
@safe_malloc_word_aligned  # length
 malloc_word_aligned       # ptr
 dup                       # ptr ptr
 compare_zero              # ptr worked?
 jump_table ^oom ^safe_malloc_word_aligned.yeah ^safe_malloc_word_aligned.yeah
@safe_malloc_word_aligned.yeah  # ptr
 return

# Allocates memory and also makes sure that the allocation succeeded.
@safe_malloc_byte_aligned  # length
 malloc_byte_aligned       # ptr
 dup                       # ptr ptr
 compare_zero              # ptr worked?
 jump_table ^oom ^safe_malloc_byte_aligned.yeah ^safe_malloc_byte_aligned.yeah
@safe_malloc_byte_aligned.yeah  # ptr
 return

# Copies memory from one location to another.
@memcopy       # from to amount
 push_word _0  # from to amount cursor
@memcopy.loop  # from to amount cursor
 over          # from to amount cursor amount
 over2         # from to amount cursor amount cursor
 compare       # from to amount cursor done?
 jump_table 03 ^@memcopy.done ^memcopy.copy_byte ^unreachable
@memcopy.copy_byte  # from to amount cursor
 over2              # from to amount cursor to
 over               # from to amount cursor to cursor
 add                # from to amount cursor to+cursor
 over4              # from to amount cursor to+cursor from
 over2              # from to amount cursor to+cursor from cursor
 add                # from to amount cursor to+cursor from+cursor
 load_byte          # from to amount cursor to+cursor byte
 store_byte         # from to amount cursor
 push_word _1       # from to amount cursor 1
 add                # from to amount cursor+1
 jump ^memcopy.loop
@memcopy.done  # from to amount cursor
 pop 20        #
 return


# Before calling, make sure that len > 0.
@keep_starts_with  # ptr len byte
 byte_to_int       # ptr len byte
 over2             # ptr len byte ptr
 load_byte         # ptr len byte actual_byte
 compare           # ptr len same?
 jump_table 03 ^keep_starts_with.yes ^keep_starts_with.no ^keep_starts_with.no
@keep_starts_with.yes  # ptr len
 push_byte 01          # ptr len 01
 return
@keep_starts_with.no  # ptr len
 push_byte 00         # ptr len 00
 return
