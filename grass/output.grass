# Output  
# An automatically growing output buffer for bytes.
#
# ┌────────┐
# │ output │
# └────────┘
#     │
#     v
# ┌────────┬────────┬────────┐
# │ ptr    | cap    | length │
# └────────┴────────┴────────┘
#     │
#     v
# ┌───────────────────────────────────────────┐
# │ bytes                                     │
# └───────────────────────────────────────────┘

@output.make                     #
 push_word _16                   # 16
 call ^safe_malloc_byte_aligned  # ptr
 push_word _16                   # ptr 16
 push_word _0                    # ptr 16 0
 call ^slots.make_abc            # ptr 16 0 parser
 call ^slots.keep_set_c          # ptr 16 output
 call ^slots.keep_set_b          # ptr output
 call ^slots.keep_set_a          # output
 return

@output.free             # output
 call ^keep_load_a       # ptr output
 call ^keep_load_b       # ptr cap output
 call ^free_slots_a_b_c  # ptr cap
 call free_byte_aligned  #
 return

# Emits a byte into the output.
@emit             # output byte
 push_padding 07   # output byte..
 over              # output byte.. output
 call ^keep_load_b # output byte.. cap output
 call ^load_c      # output byte.. cap length
 compare           # output byte.. full?
 jump_table ^emit.make_bigger ^emit.unchecked ^unreachable
@emit.make_bigger                # output byte..
 over                            # output byte.. output
 call ^keep_load_a               # output byte.. ptr output
 call ^load_b                    # output byte.. ptr cap
 dup                             # output byte.. ptr cap cap
 push_word _2                    # output byte.. ptr cap cap 2
 multiply                        # output byte.. ptr cap new_cap
 dup                             # output byte.. ptr cap new_cap new_cap
 call ^safe_malloc_byte_aligned  # output byte.. ptr cap new_cap new_ptr
 over3                           # output byte.. ptr cap new_cap new_ptr ptr
 over                            # output byte.. ptr cap new_cap new_ptr ptr new_ptr
 over4                           # output byte.. ptr cap new_cap new_ptr ptr new_ptr cap
 call ^memcopy                   # output byte.. ptr cap new_cap new_ptr
 over5                           # output byte.. ptr cap new_cap new_ptr output
 call ^keep_store_a              # output byte.. ptr cap new_cap output
 call ^store_b                   # output byte.. ptr cap
 free_byte_aligned               # output byte..
@emit.unchecked            # output byte..
 over                      # output byte.. output
 call ^keep_load_a         # output byte.. ptr output
 call ^load_c              # output byte.. ptr length
 add                       # output byte.. ptr+length
 push_byte_from_stack _15  # output byte.. ptr+length byte
 store_byte                # output byte..
 pop 08                    # output
 dup                       # output output
 call ^load_c              # output cursor
 push_word _1              # output cursor 1
 add                       # output cursor+1
 over                      # output cursor+1 output
 call ^store_c             # output
 pop 08                    #
 return

# Emits an entire buffer into the output.
@append        # output ptr len
 push_word _0  # output ptr len cursor
@append.loop  # output ptr len cursor
 over         # output ptr len cursor len
 over         # output ptr len cursor len cursor
 compare      # output ptr len cursor at_end?
 jump_table 03 ^append.done ^append.not_done ^unreachable
@append.not_done  # output ptr len cursor
 over3            # output ptr len cursor output
 over3            # output ptr len cursor output ptr
 over2            # output ptr len cursor output ptr cursor
 add              # output ptr len cursor output ptr+cursor
 load_byte        # output ptr len cursor output byte
 call ^emit       # output ptr len cursor
 push_word _1     # output ptr len cursor 1
 add              # output ptr len cursor+1
 jump ^append.loop
@append.done  # output ptr len cursor
 pop 20       #
 return

# Turns an output into a byte array.
@shrink                          # output
 call ^keep_load_a               # ptr output
 call ^keep_load_b               # ptr cap output
 call ^keep_load_c               # ptr cap length output
 call ^free_slots_a_b_c          # ptr cap length
 dup                             # ptr cap length length
 call ^safe_malloc_byte_aligned  # ptr cap length new_ptr
 over3                           # ptr cap length new_ptr ptr
 over                            # ptr cap length new_ptr ptr new_ptr
 over3                           # ptr cap length new_ptr ptr new_ptr length
 call ^memcopy                   # ptr cap length new_ptr
 over                            # ptr cap length new_ptr length
 pop_below_top _16 18            # new_ptr length
