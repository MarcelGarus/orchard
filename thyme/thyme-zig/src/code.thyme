unreachable = || crash(0)  # TODO: better message

equals = |a, b| if_not_zero(subtract(a, b), [false], [true])
not_equals = |a, b| if_not_zero(subtract(a, b), [true], [false])
is_less = |a, b| equals(int_compare_to_num(a, b), 2)
is_greater = |a, b| equals(int_compare_to_num(a, b), 1)
is_less_equal = |a, b|
  if_not_zero(subtract(int_compare_to_num(a, b), 1), [true], [false])
is_greater_equal = |a, b|
  if_not_zero(subtract(int_compare_to_num(a, b), 2), [true], [false])

loop = {
  rec = |rec, state, body| {
    body(state) % {
      break: result -> result
      continue: next -> rec(rec, next, body)
    }
  }
  |initial_state, body| rec(rec, initial_state, body)
}

round_up_to_power_of = |number, base| {
  loop(1, |candidate| {
    is_greater_equal(candidate, number) % {
      true -> [break: candidate]
      false -> [continue: multiply(candidate, base)]
    }
  })
}

round_up_to_power_of(12, 2)

# List stuff.
#
# Lists are stored as a binary tree of minimal height, where nodes are
# filled from the left. The length tells us exactly the layout of this
# tree. For example, a list of 5 items results in the following tree:
# [
#   length: 5
#   items: [
#     left: [left: [left: 0 right: 1] right: [left: 2 right: 3]]
#     right: [left: [left: 4 right: nil] right: nil]
#   ]
# ]

list_get = {
  rec = |rec, items, length, index| {
    equals(length, 0) % {
      true -> unreachable()
      false -> {
        num_left = divide(length, 2)  # TODO: shift
        num_right = subtract(length, num_left)
        is_less(index, num_left) % {
          true -> rec(rec, items.left, num_left, index)
          false -> rec(rec, items.right, num_right, subtract(index, num_left))
        }
      }
    }
  }
  |list, index| {
    is_greater_equal(index, list.length) % {
      true -> crash(0)  # TODO: out of bounds
      false ->
        rec(rec, list.items, round_up_to_power_of(list.length, 2), index)
    }
  }
}

[
  unreachable: unreachable
  equals: equals
  not_equals: not_equals
  is_less: is_less
  is_greater: is_greater
  is_less_equal: is_less_equal
  is_greater_equal is_greater_equal
  loop: loop
  round_up_to_power_of: round_up_to_power_of
  list_get: list_get
]
