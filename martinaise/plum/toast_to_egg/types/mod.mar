| Type Algorithms  
|
| Plum has a structural type system, which means that types don't have
| identities. If you define Foo = Int and Bar = Int, then Foo, Bar, and Int can
| be used interchangably. Starting with the Egg compiler stage, all types are
| self-contained and you don't any type definitions any more.
|
| Turns out, some of the things we want to do with types are not trivial because
| of recursive types. For example, unioning these two enums results in a mess:
|
| | Foo (| Bar ^2) = | Foo (| Bar (| Foo (| Bar (...))))
| | Foo ^1         = | Foo (| Foo (| Foo (| Foo (...))))
|
| The unioned type is this:
|
| | Foo (| Foo (| Foo ^1) Bar (| Foo (| Bar ^2)))
|
| Basically, the top-level is always the Foo variant and the level below that
| decides whether it is Foo forever or whether Foo and Bar alternate.

import ../mod.mar
import builder.mar
import collect_vars.mar
import compile.mar
import match.mar
import union.mar

fun is_assignable_to(from: PlumType, to: PlumType): Bool {
  is_equivalent(union(from, to) or return false, to)
}
