| Compiling Types  
|
| Types from multiple modules may refer to each other. So, we first build a map
| from module-prefixed type names to the PlumType, a structural representation
| of types.

import mod.mar

struct TypeSignature { module: Module, name: String }

fun prefix_calls_with_module(type: ToastType, module: Module): ToastType {
  switch type
  case primitive(primitive) {
    var args = list[ToastType]()
    for arg in primitive.args do
      args.&.push(arg.prefix_calls_with_module(module))
    var args = args.to_slice()

    ToastType.primitive(ToastTypePrimitive { name = primitive.name, args })
  }
  case variable type
  case call(call) {
    var name = call.name

    var args = list[ToastType]()
    for arg in call.args do
      args.&.push(arg.prefix_calls_with_module(module))
    var args = args.to_slice()

    ToastType.call(ToastTypeCall {
      name = "{module}.{name.string}" @ name.src, args
    })
  }
  case struct_(struct_) {
    var fields = list[ToastTypeField]()
    for field in struct_ do
      fields.&.push(ToastTypeField {
        name = field.name, type = field.type.prefix_calls_with_module(module)
      })
    var fields = fields.to_slice()

    ToastType.struct_(fields)
  }
  case enum_(enum_) {
    var variants = list[ToastTypeVariant]()
    for variant in enum_ do
      variants.&.push(ToastTypeVariant {
        name = variant.name,
        type = variant.type.prefix_calls_with_module(module),
      })
    var variants = variants.to_slice()

    ToastType.enum_(variants)
  }
  case lambda(lambda) {
    var args = list[ToastType]()
    for arg in lambda.args do args.&.push(arg.prefix_calls_with_module(module))
    var args = args.to_slice()

    var return_type = lambda.return_type.prefix_calls_with_module(module)

    ToastType.lambda(ToastTypeLambda {
      args, return_type = return_type.put_on_heap()
    })
  }
}

fun specialize(
  type: ToastType, env: Map[String, ToastType]
): Result[ToastType, Error] {
  var type =
    switch type
    case primitive(primitive) {
      var args = list[ToastType]()
      for arg in primitive.args do args.&.push(arg.specialize(env)?)
      var args = args.to_slice()
      ToastType.primitive(ToastTypePrimitive { name = primitive.name, args })
    }
    case variable(variable)
      env.get_maybe(variable.string) or
        return error[ToastType, Error](error(
          "Tried to use {variable.string}, but that type doesn't exist. (speci.)",
          variable.src
        ))
    case call(call) {
      var args = list[ToastType]()
      for arg in call.args do args.&.push(arg.specialize(env)?)
      var args = args.to_slice()
      ToastType.call(ToastTypeCall { name = call.name, args })
    }
    case struct_(struct_) {
      var fields = list[ToastTypeField]()
      for field in struct_ do
        fields.&.push(ToastTypeField {
          name = field.name, type = field.type.specialize(env)?
        })
      var fields = fields.to_slice()
      ToastType.struct_(fields)
    }
    case enum_(enum_) {
      var variants = list[ToastTypeVariant]()
      for variant in enum_ do
        variants.&.push(ToastTypeVariant {
          name = variant.name, type = variant.type.specialize(env)?
        })
      var variants = variants.to_slice()
      ToastType.enum_(variants)
    }
    case lambda(lambda) {
      var args = list[ToastType]()
      for arg in lambda.args do args.&.push(arg.specialize(env)?)
      var args = args.to_slice()
      var return_type = lambda.return_type.specialize(env)?
      ToastType.lambda(ToastTypeLambda {
        args, return_type = return_type.put_on_heap()
      })
    }
  ok[ToastType, Error](type)
}

struct EggTypeDef { params: Slice[String], type: PlumType }

struct OngoingTypeCall { name: String, args: Slice[ToastType], depth: Int }

fun write[W](writer: W, call: OngoingTypeCall) {
  writer."{call.name}"
  for arg in call.args do writer." {arg}"
}

fun compile(
  type: ToastType,
  stack: &List[OngoingTypeCall], depth: Int, defs: Map[String, ToastTypeDef],
): Result[PlumType, Error] {
  switch type
  case primitive(primitive) {
    if primitive.name == "Byte"  then return ok[PlumType, Error](type_byte)
    if primitive.name == "Int"   then return ok[PlumType, Error](type_int)
    if primitive.name == "Never" then return ok[PlumType, Error](type_never)
    if primitive.name == "Type"  then return ok[PlumType, Error](type_type)
    if primitive.name == "Box" then {
      var inner_type = primitive.args.get(0).compile(stack, depth + 1, defs)?
      return ok[PlumType, Error](type_box_without_canonicalizing(inner_type))
    }
    if primitive.name == "Array" then {
      var item_type = primitive.args.get(0).compile(stack, depth + 1, defs)?
      return ok[PlumType, Error](type_array_without_canonicalizing(item_type))
    }
    unreachable()
  }
  case variable(variable) ok[PlumType, Error](type_variable(variable.string))
  case call(call) {
    var name = call.name

    | Are we recursively lowering a type? If so, we need to insert a recursive
    | type instead of endlessly digging down into the type.
    for parent in stack do
      if parent.name == call.name.string and parent.args == call.args then
        return ok[PlumType, Error](type_recursive(depth - parent.depth))

    | Look for a type with the name.
    var called_def = defs.get_maybe(name.string) or
      return error[PlumType, Error](error(
        "Tried to use {name.string}, but that type doesn't exist. (call)",
        name.src
      ))

    called_def.params.len == call.args.len or
      return error[PlumType, Error](error(
        "Tried to use {name.string} with {call.args.len} arguments, but it 
        'needs {called_def.params.len}.",
        name.src
      ))

    var args = list[ToastType]()
    for arg in call.args do args.&.push(arg)
    var args = args.to_slice()

    var env = map[String, ToastType]()
    for arg in zip(called_def.params.iter(), args.iter()) do
      env.&.put(arg.a.string, arg.b)
    var called = called_def.type.specialize(env)?

    stack.&.push(OngoingTypeCall { name = name.string, args, depth })
    var type = called.compile(stack, depth, defs)?
    stack.&.pop()

    ok[PlumType, Error](type)
  }
  case struct_(struct_) {
    var fields = map[String, PlumType]()
    for field in struct_ do {
      if fields.contains(field.name.string) then
        return error[PlumType, Error](error(
          "Struct contains multiple fields named {field.name.string}.",
          field.name.src,
        ))
      fields.&.put(
        field.name.string, field.type.compile(stack, depth + 1, defs)?
      )
    }
    ok[PlumType, Error](type_struct_without_canonicalizing(fields))
  }
  case enum_(enum_) {
    var variants = map[String, PlumType]()
    for variant in enum_ do {
      if variants.contains(variant.name.string) then
        return error[PlumType, Error](error(
          "Enum contains multiple variants named {variant.name.string}.",
          variant.name.src,
        ))
      variants.&.put(
        variant.name.string,
        variant.type.compile(stack, depth + 1, defs)?
      )
    }
    ok[PlumType, Error](type_enum_without_canonicalizing(variants))
  }
  case lambda(lambda) {
    var args = list[PlumType]()
    for arg in lambda.args do
      args.&.push(arg.compile(stack, depth + 1, defs)?)
    var args = args.to_slice()

    var return_type =
      lambda.return_type.compile(stack, depth + 1, defs)?

    ok[PlumType, Error](type_lambda_without_canonicalizing(args, return_type))
  }
}

fun put_primitive(
  map: &Map[String, ToastTypeDef], name: String, args: Slice[String]
) {
  map.put("{builtin_module}.{name}", ToastTypeDef {
    name = name @ invalid_src,
    params = {
      var params = list[StringAndSrc]()
      for arg in args do params.&.push(arg @ invalid_src)
      params.to_slice()
    },
    type = ToastType.primitive(ToastTypePrimitive {
      name,
      args = {
        var the_args = list[ToastType]()
        for arg in args do
          the_args.&.push(ToastType.variable(arg @ invalid_src))
        the_args.to_slice()
      },
    })
  })
}

fun compile_all_types(
  toasts: Map[Module, Toast]
): Result[Map[String, EggTypeDef], Error] {
  var defs = map[String, ToastTypeDef]()
  defs.&.put_primitive("Byte", empty_slice[String]())
  defs.&.put_primitive("Int", empty_slice[String]())
  defs.&.put_primitive("Type", empty_slice[String]())
  defs.&.put_primitive("Box", list("t").to_slice())
  defs.&.put_primitive("Array", list("t").to_slice())

  for entry in toasts do {
    var module = entry.key
    var toast = entry.value
    for def in toast.defs do
      switch def
      case type(def)
        defs.&.put("{module}.{def.name.string}", ToastTypeDef {
          name = def.name,
          params = def.params,
          type = def.type.prefix_calls_with_module(module),
        })
      case import_(import_)
        for part in import_.parts do {
          var imported_module = module.resolve_import(part.module) or(error)
            return error[Map[String, EggTypeDef], Error](error(
              error, import_.keyword.src
            ))
          for item in part.items do
            if item is type(signature) then {
              var args = list[ToastType]()
              for arg in signature.args do
                args.&.push(ToastType.variable(arg))
              var args = args.to_slice()

              | TODO: assert that args have different names
              defs.&.put("{module}.{signature.name.string}", ToastTypeDef {
                name = "{module}.{signature.name.string}" @ signature.name.src,
                params = signature.args,
                type = ToastType.call(ToastTypeCall {
                  name = "{imported_module}.{signature.name.string}"
                    @ import_.keyword.src,
                  args,
                })
              })
            }
        }
      default {}
  }

  | TODO: Currently, all type definitions are compiled completely isolated from
  | each other. That means we do a lot of work multiple times. For example, if
  | "Foo = Maybe Int", we've already figured out that "Foo = | some: Int none",
  | and we later compile several types containing "Foo", we look up the
  | definition of "Foo" as "Maybe Int" several times and recompile it. Maybe we
  | can instead pass down the compiled_defs directly into the compile function?
  var compiled_defs = map[String, EggTypeDef]()
  for def in defs do {
    var params = list[String]()
    var env = map[String, ToastType]()
    var args = list[ToastType]()
    for param in def.value.params do {
      var type = ToastType.variable(param)
      params.&.push(param.string)
      env.&.put(param.string, type)
      args.&.push(type)
    }
    var params = params.to_slice()
    var args = args.to_slice()

    var type = def.value.type.compile(
      list(OngoingTypeCall { name = def.key, args, depth = 0 }).&, 0, defs
    )?.canonicalize()
    type.is_self_contained() or
      panic("compiled type is not self-contained:\n{type.indented()}")

    compiled_defs.&.put(def.key, EggTypeDef { params, type })
  }

  | for def in compiled_defs do
  |   eprintln("{def.key}: {def.value}")

  ok[Map[String, EggTypeDef], Error](compiled_defs)
}

| TODO: This looks very much like the function from above with a lot of
| duplication. Simplify this!
fun compile(
  type: ToastType, defs: Map[String, EggTypeDef]
): Result[PlumType, Error] {
  switch type
  case primitive(primitive) {
    if primitive.name == "Byte" then return ok[PlumType, Error](type_byte)
    if primitive.name == "Int" then return ok[PlumType, Error](type_int)
    if primitive.name == "Type" then return ok[PlumType, Error](type_type)
    if primitive.name == "Never" then return ok[PlumType, Error](type_never)
    if primitive.name == "Box" then {
      var inner_type = primitive.args.get(0).compile(defs)?
      return ok[PlumType, Error](type_box_without_canonicalizing(inner_type))
    }
    if primitive.name == "Array" then {
      var item_type = primitive.args.get(0).compile(defs)?
      return ok[PlumType, Error](type_array_without_canonicalizing(item_type))
    }
    unreachable()
  }
  case variable(variable) {
    ok[PlumType, Error](type_variable(variable.string))
  }
  case call(call) {
    var name = call.name

    var args = list[PlumType]()
    for arg in call.args do args.&.push(arg.compile(defs)?)
    var args = args.to_slice()

    var called_def = defs.get_maybe(name.string) or
      return error[PlumType, Error](error(
        "Tried to use {name.string}, but that type doesn't exist.",
        name.src
      ))

    called_def.params.len == call.args.len or
      return error[PlumType, Error](error(
        "Tried to use {name.string} with {call.args.len} arguments, but it 
        'needs {called_def.params.len}.",
        name.src
      ))

    var inner_env = map[String, PlumType]()
    for arg in zip(called_def.params.iter(), args.iter()) do
      inner_env.&.put(arg.a, arg.b)
    var type = called_def.type.specialize(Substitutions {
      substitutions = inner_env
    })

    ok[PlumType, Error](type)
  }
  case struct_(struct_) {
    var fields = map[String, PlumType]()
    for field in struct_ do {
      if fields.contains(field.name.string) then
        return error[PlumType, Error](error(
          "Field {field.name.string} is in the struct type multiple times.",
          field.name.src,
        ))
      fields.&.put(field.name.string, field.type.compile(defs)?)
    }
    ok[PlumType, Error](type_struct_without_canonicalizing(fields))
  }
  case enum_(enum_) {
    var variants = map[String, PlumType]()
    for variant in enum_ do {
      if variants.contains(variant.name.string) then
        return error[PlumType, Error](error(
          "Variant {variant.name.string} is in the enum type multiple times.",
          variant.name.src,
        ))
      variants.&.put(variant.name.string, variant.type.compile(defs)?)
    }
    ok[PlumType, Error](type_enum_without_canonicalizing(variants))
  }
  case lambda(lambda) {
    var args = list[PlumType]()
    for arg in lambda.args do args.&.push(arg.compile(defs)?)
    var args = args.to_slice()

    var return_type = lambda.return_type.compile(defs)?

    ok[PlumType, Error](type_lambda_without_canonicalizing(args, return_type))
  }
}

fun compile(
  type: ToastType, module: Module, defs: Map[String, EggTypeDef]
): Result[PlumType, Error] {
  ok[PlumType, Error](
    type.prefix_calls_with_module(module).compile(defs)?.canonicalize()
  )
}
