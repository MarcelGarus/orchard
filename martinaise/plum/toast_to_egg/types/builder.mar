fun field(type: EggType, name: String): EggType {
  type.kind().struct_.unwrap().get(name)
}
fun variant(type: EggType, name: String): EggType {
  type.kind().enum_.unwrap().get(name)
}

var type_var_t = type_variable("t")
var type_nothing = type_struct(map[String, EggType]())
var type_string = type_struct(map("utf8_bytes" -> type_array(type_byte)))
var type_bool = type_enum(map("true" -> type_nothing, "false" -> type_nothing))
var type_ordering = type_enum(map(
  "less" -> type_nothing, "equal" -> type_nothing, "greater" -> type_nothing
))
fun type_range(item: EggType): EggType {
  type_struct(map("start" -> item, "end" -> item))
}

var type_type_info = canonicalize(
  type_enum_without_canonicalizing(map(
    "byte"   -> type_nothing,
    "int"    -> type_nothing,
    "type"   -> type_nothing,
    "box"    -> type_recursive(1),
    "array"  -> type_recursive(1),
    "never"  -> type_nothing,
    "struct" -> type_array_without_canonicalizing(
      type_struct_without_canonicalizing(map(
        "name" -> type_string, "type" -> type_recursive(3)
      ))
    ),
    "enum"   -> type_array_without_canonicalizing(
      type_struct_without_canonicalizing(map(
        "name" -> type_string, "type" -> type_recursive(3)
      ))
    ),
    "lambda" -> type_struct_without_canonicalizing(map(
      "arguments" -> type_array_without_canonicalizing(type_recursive(3)),
      "return_type" -> type_recursive(2),
    )),
    "recursive" -> type_int,
  ))
)
var type_type_info_fields = type_type_info.variant("struct")
var type_type_info_field = type_type_info_fields.kind().array.unwrap()
var type_type_info_variants = type_type_info.variant("enum")
var type_type_info_variant = type_type_info_variants.kind().array.unwrap()
var type_type_info_lambda = type_type_info.variant("lambda")
var type_type_info_lambda_args = type_type_info_lambda.field("arguments")

var type_dynamic = canonicalize(
  type_enum_without_canonicalizing(map(
    "byte"   -> type_byte,
    "int"    -> type_int,
    "type"   -> type_nothing,
    "box"    -> type_recursive(1),
    "array"  -> type_array_without_canonicalizing(type_recursive(2)),
    "struct" -> type_array_without_canonicalizing(
        type_struct_without_canonicalizing(map(
        "name" -> type_string, "value" -> type_recursive(3)
      ))
    ),
    "enum"   -> type_struct_without_canonicalizing(map(
      "name" -> type_string, "value" -> type_recursive(2)
    )),
    "lambda" -> type_lambda_without_canonicalizing(
      list(type_array_without_canonicalizing(type_recursive(3))).to_slice(),
      type_recursive(2),
    ),
  ))
)
var type_dynamic_fields = type_dynamic.variant("struct")
var type_dynamic_field = type_dynamic_fields.kind().array.unwrap()
var type_dynamic_variant = type_dynamic.variant("enum")
var type_dynamic_lambda = type_dynamic.variant("lambda")
