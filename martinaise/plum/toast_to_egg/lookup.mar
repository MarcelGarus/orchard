| Looking up Functions  

import mod.mar

fun signature(module: Module, name: String, params: Slice[FunParam]): String {
  var b = string_builder().&
  b."{module}.{name}"
  for param in params do
    if param.type == type_type then
      b." {param.name}: {param.type}"
    else
      b." {param.type}"
  b.to_string()
}

struct FunParam { name: String, type: EggType }

| Invariant: Arguments that have the type Type also have a compile-time-known
| value.
struct FunArg { value: Maybe[EggType], type: EggType }

fun write[W](writer: W, arg: FunArg) {
  if arg.value is some(type) then writer."{type}:"
  writer."{arg.type}"
}

fun match_against(
  args: Slice[FunArg], params: Slice[FunParam],
  constraints: &TypeVariableConstraints,
): Bool {
  args.len == params.len or return false
  for both in zip(args.iter(), params.iter()) do {
    var arg = both.a
    var param = both.b
    arg.type.match_against(param.type, constraints) or return false
    if arg.type == type_type then {
      var result = arg.value.unwrap().match_against(
        type_variable(param.name), constraints
      )
      if not(result) then unreachable()
    }
  }
  true
}

fun match_against(
  args: Slice[FunArg], params: Slice[FunParam]
): Result[Maybe[Substitutions], String] {
  var constraints = constraints()
  args.match_against(params, constraints.&) or
    return ok[Maybe[Substitutions], String](none[Substitutions]())
  var substitutions = constraints.check_coherency() or
    return ok[Maybe[Substitutions], String](none[Substitutions]())

  | Make sure that all type variables are constrained.
  var type_vars = set[String]()
  for param in params do param.type.collect_type_variables(type_vars.&)
  var all_constrained = true
  for var_ in type_vars do
    if not(substitutions.substitutions.contains(var_)) then
      all_constrained = false
  all_constrained or
    return error[Maybe[Substitutions], String]({
      var b = string_builder().&
      b."Function with args"
      for param in params do b." {param.name}: {param.type}"
      b." matches, but not all type 
        'variables are constrained:"
      for var_ in type_vars do {
        b."\n  {var_} "
        switch substitutions.substitutions.get_maybe(var_)
        case some(type) b."= {type}"
        case none b."is unconstrained"
      }
      b.to_string()
    })

  ok[Maybe[Substitutions], String](some(substitutions))
}

struct MatchingCallee {
  kind: MatchingCalleeKind,
  substitutions: Substitutions,
  param_types: Slice[EggType],
  return_type: EggType,
}

enum MatchingCalleeKind { builtin: EggBuiltin, fun_: String }
fun write[W](writer: W, kind: MatchingCalleeKind) {
  switch kind
  case builtin(builtin) writer.write(builtin)
  case fun_(signature) writer.write(signature)
}

enum LookupNameMatches { local_fun: ToastFun, imported_fun: LookupImportedFun }
struct LookupImportedFun {
  module: Module, name: StringAndSrc, params: Slice[FunParam]
}

fun lookup(
  name: String, args: Slice[FunArg], module: Module, src: Src,
  toasts: Map[Module, Toast], types: Map[String, EggTypeDef],
): Result[MatchingCallee, Error] {
  if module == builtin_module then {
    for builtin in egg_builtins do {
      if "{builtin}" == name then {
        var params = list[FunParam]()
        for param in builtin.type_signature().params.iter().&.enumerate() do
          params.&.push(FunParam {
            name = "arg_{param.index}", type = param.item
          })
        var params = params.to_slice()
        var substitutions = args.match_against(params) or(message) {
          return error[MatchingCallee, Error](error(message, src))
        }
        var substitutions = substitutions or continue

        var param_types = list[EggType]()
        for param in params do
          param_types.&.push(param.type.specialize(substitutions))
        var param_types = param_types.to_slice()
        var return_type =
          builtin.type_signature().return_type.specialize(substitutions)

        return ok[MatchingCallee, Error](MatchingCallee {
          kind = MatchingCalleeKind.builtin(builtin),
          substitutions,
          param_types,
          return_type,
        })
      }
    }
    return error[MatchingCallee, Error](error("Unknown builtin function.", src))
  }

  var toast = toasts.get(module)

  var name_matches = list[LookupNameMatches]()
  for def in toast.defs do
    switch def
    case fun_(fun_) {
      if fun_.name.string == name then
        name_matches.&.push(LookupNameMatches.local_fun(fun_))
    }
    case import_(import_) {
      for part in import_.parts do {
        var imported_module = module.resolve_import(part.module) or(error)
          return error[MatchingCallee, Error](
            error(error, import_.keyword.src)
          )
        for item in part.items do
          if item is fun_(signature) then
            if signature.name.string == name then {
              var params = list[FunParam]()
              for param in signature.args do
                params.&.push(FunParam {
                  name = param.name.string,
                  type = param.type.compile(module, types)?,
                })
              var params = params.to_slice()

              name_matches.&.push(
                LookupNameMatches.imported_fun(LookupImportedFun {
                  module = imported_module,
                  name = signature.name,
                  params,
                })
              )
            }
      }
    }
    default {}

  if name_matches.is_empty() then
    return error[MatchingCallee, Error](
      error("There is no function named {name} in scope.", src)
    )

  var full_matches = list[MatchingCallee]()
  for item in name_matches do {
    switch item
    case local_fun(fun_) {
      var params = list[FunParam]()
      for param in fun_.params do
        params.&.push(FunParam {
          name = param.name.string, type = param.type.compile(module, types)?
        })
      var params = params.to_slice()

      var signature = signature(module, fun_.name.string, params)

      var substitutions = args.match_against(params) or(message) {
        return error[MatchingCallee, Error](error(message, src))
      }
      var substitutions = substitutions or continue

      var param_types = list[EggType]()
      for param in params do
        param_types.&.push(param.type.specialize(substitutions))
      var param_types = param_types.to_slice()
      var return_type =
        fun_.return_type.compile(module, types)?.specialize(substitutions)

      full_matches.&.push(MatchingCallee {
        kind = MatchingCalleeKind.fun_(signature),
        substitutions,
        param_types,
        return_type,
      })
    }
    case imported_fun(imported) {
      var substitutions = args.match_against(imported.params) or(message) {
        return error[MatchingCallee, Error](error(message, src))
      }
      var substitutions = substitutions or continue

      var imported = lookup(name, args, imported.module, src, toasts, types)?
      full_matches.&.push(imported)
    }
  }

  if full_matches.is_empty() then
    return error[MatchingCallee, Error]({
      var b = string_builder().&
      b."There is no matching function.\n
        '  {"{name}".pad_left(30)}"
      for arg in args do
        if arg.type == type_type then
            b." {arg.value}: {arg.type}"
          else
            b." {arg.type}"
      for item in name_matches do {
        var module_name_params =
          switch item
          case local_fun(fun_) {
            var params = list[FunParam]()
            for param in fun_.params do
              params.&.push(FunParam {
                name = param.name.string,
                type = param.type.compile(module, types)?,
              })
            tuple(module, name, params.to_slice())
          }
          case imported_fun(imported)
            tuple(imported.module, imported.name.string, imported.params)

        var module = module_name_params.a
        var name = module_name_params.b
        var params = module_name_params.c

        b."\n  {"{module}.{name}".pad_left(30)}"
        for param in params do
          if param.type == type_type then
            b." {param.name}: {param.type}"
          else
            b." {param.type}"
        var constraints = constraints()
        args.match_against(params, constraints.&) or {
          b."  doesn't match types"
          continue
        }
        var substitutions = constraints.check_coherency() or {
          b."  has impossible constraints:"
          for constraint in constraints.constraints do
            b." {constraint}"
          continue
        }
      }
      error(b.to_string(), src)
    })

  if full_matches.len > 1 then
    return error[MatchingCallee, Error]({
      var b = string_builder().&
      b."Multiple functions match {name} {args}:"
      for match in full_matches do
        b."\n  {match.kind} with {match.substitutions}"
      error(b.to_string(), src)
    })

  var matching_callee = full_matches.get(0)

  ok[MatchingCallee, Error](matching_callee)
}
