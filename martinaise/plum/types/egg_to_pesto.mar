import mod.mar

fun to_pesto(type: EggType): PestoType {
  switch type.internal_kind()
  case variable unreachable()
  case byte PestoType.byte
  case int PestoType.int
  case type PestoType.struct_(map[String, PestoType]())
  case box PestoType.ptr
  case array pesto_array_type
  case never PestoType.never
  case struct_(struct_) {
    var fields = map[String, PestoType]()
    for field in struct_ do
      fields.&.put(field.key, field.value.to_pesto())
    PestoType.struct_(fields)
  }
  case enum_(enum_) {
    var variants = map[String, PestoType]()
    for variant in enum_ do {
      var payload = variant.value
      variants.&.put(
        variant.key,
        if payload.is_unboxed_recursive() then
          PestoType.ptr
        else
          payload.to_pesto(),
      )
    }
    PestoType.enum_(variants)
  }
  case lambda pesto_lambda_type
  case recursive unreachable()
}

fun is_unboxed_recursive(type: EggType): Bool { type.is_unboxed_recursive(1) }
fun is_unboxed_recursive(type: EggType, depth: Int): Bool {
  switch type.internal_kind()
  case variable unreachable()
  case byte false
  case int false
  case type false
  case box false
  case array false
  case never false
  case struct_(struct_) {
    for field in struct_ do
      if field.value.is_unboxed_recursive(depth + 1) then return true
    false
  }
  case enum_(enum_) {
    for variant in enum_ do
      if variant.value.is_unboxed_recursive(depth + 1) then return true
    false
  }
  case lambda false
  case recursive(level) level >= depth
}

fun contains_ptr(type: PestoType): Bool {
  switch type
  case byte false
  case int false
  case ptr true
  case struct_(fields) {
    for field in fields do if field.value.contains_ptr() then return true
    false
  }
  case enum_(variants) {
    for variant in variants do if variant.value.contains_ptr() then return true
    false
  }
  case never false
}
