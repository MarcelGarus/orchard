import mod.mar

fun parse_signature_param(
  parser: &LineParser, default_name: String
): Result[Maybe[ToastParam], Error] {
  var name = parser.parse_name() or {
    var type = parser.parse_type(false)? or return no_match[ToastParam]()
    return parsed(ToastParam { name = default_name @ invalid_src, type })
  }
  if parser.consume(":") is some then {
    var type = parser.parse_type(false)? or
      return bad_input[ToastParam](error(
        "Expected type.", parser.src_of_rest()
      ))
    parsed(ToastParam { name, type })
  } else
    parsed(ToastParam {
      name = default_name @ invalid_src,
      type = ToastType.variable(name),
    })
}
fun parse_item(
  parser: &LineParser
): Result[Maybe[ToastImportExportItem], Error] {
  if parser.parse_type_name() is some(name) then {
    var args = list[StringAndSrc]()
    loop args.&.push(parser.parse_type_variable() or break)
    var args = args.to_slice()
    return parsed(ToastImportExportItem.type(ToastTypeSignature { name, args }))
  }
  if parser.parse_name() is some(name) then {
    var args = list[ToastParam]()
    loop args.&.push(parser.parse_signature_param("arg_{args.len}")? or break)
    var args = args.to_slice()
    return parsed(ToastImportExportItem.fun_(ToastFunSignature { name, args }))
  }
  no_match[ToastImportExportItem]()
}
fun parse_items(
  parser: &LineParser
): Result[Slice[ToastImportExportItem], Error] {
  var signatures = list[ToastImportExportItem]()
  loop {
    signatures.&.push(parser.parse_item()? or break)
    parser.consume(",") or break
  }
  ok[Slice[ToastImportExportItem], Error](signatures.to_slice())
}
fun parse_items(
  bacon: Bacon
): Result[Slice[ToastImportExportItem], Error] {
  var parser = parser(bacon.line, bacon.src)
  var items = parser.&.parse_items()?
  parser.&.ensure_is_at_end()?
  ok[Slice[ToastImportExportItem], Error](items)
}
fun parse_items(
  bacons: Slice[Bacon]
): Result[Slice[ToastImportExportItem], Error] {
  var items = list[ToastImportExportItem]()
  for bacon in bacons do items.&.push_all(bacon.parse_items()?)
  ok[Slice[ToastImportExportItem], Error](items.to_slice())
}

fun parse_import_part(bacon: Bacon): Result[Maybe[ToastImportPart], Error] {
  var parser = parser(bacon.line, bacon.src)

  var module = parser.&.parse_string()? or
    return bad_input[ToastImportPart](error(
      "Expected module in import part", parser.src_of_rest()))

  parser.&.consume_whitespace()
  var items =
    if parser.is_at_end() then
      | Our children contain the items.
      bacon.children.parse_items()?
    else {
      bacon.children.is_empty() or
        return bad_input[ToastImportPart](error(
          "For multiline imports, the imported items should be on separate 
          'lines from the modules.",
          parser.src_of_rest()
        ))
      var items = parser.&.parse_items()?
      parser.&.ensure_is_at_end()?
      items
    }

  parsed(ToastImportPart { module = module.string, items })
}

fun parse_import(bacon: Bacon): Result[Maybe[ToastImport], Error] {
  if bacon.line == "import" then {
    | Multiline import.

    var parts = list[ToastImportPart]()
    for child in bacon.children do
      parts.&.push(child.parse_import_part()? or
        return bad_input[ToastImport](error("Expected import part.", child.src)))
    var parts = parts.to_slice()

    return parsed(ToastImport { keyword = bacon.line @ bacon.src, parts })
  }

  | Single-line import.
  var parser = parser(bacon.line, bacon.src)

  var keyword = parser.&.consume("import") or return no_match[ToastImport]()
  parser.current().is_whitespace() or return no_match[ToastImport]()

  bacon.children.is_empty() or
    return bad_input[ToastImport](error(
      "Multi-line import should just have a line that says import.",
      bacon.children.first().src ... bacon.children.last().src,
    ))

  var module = parser.&.parse_string()? or
    return bad_input[ToastImport](error(
      "Expected module for single-line import", parser.src_of_rest()))

  var items = parser.&.parse_items()?
  parser.&.ensure_is_at_end()?
  if items.is_empty() then
    return bad_input[ToastImport](error(
      "Expected imported items.", parser.src_of_rest()))

  parsed(ToastImport {
    keyword,
    parts = list(ToastImportPart {
      module = module.string, items
    }).to_slice(),
  })
}

fun parse_export(bacon: Bacon): Result[Maybe[ToastExport], Error] {
  if bacon.line == "export" then {
    | Multiline export.
    var items = bacon.children.parse_items()?
    return parsed(ToastExport { keyword = bacon.line @ bacon.src, items })
  }

  var parser = parser(bacon.line, bacon.src)

  var keyword = parser.&.consume("export") or return no_match[ToastExport]()
  parser.current().is_whitespace() or return no_match[ToastExport]()

  var items = parser.&.parse_items()?
  parser.&.ensure_is_at_end()?
  if items.is_empty() then
    return bad_input[ToastExport](error(
      "Expected exported items.", parser.src_of_rest()))

  parsed(ToastExport { keyword, items })
}
