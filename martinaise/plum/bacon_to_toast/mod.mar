| Parsing
|
| Plum is strictly indentation-based and language constructs that span multiple
| lines are guaranteed to not have closing punctuation. For example, multiline
| parentheses are not allowed and struct, enum, function, and lambda definitions
| as well as structs are all terminated based on the indentation.
|
| Parsing in Plum works on two different granularities:
|
| - Blocks: Indentation-based units. See the Bacon for more info.
| - Lines: Things within a single line.
|
| Some syntax constructs can only work on the block granularity (such as
| switch). Some can only work on the line granularity (such as parentheses).
| Some work on both granularities (such as calls or struct creations).

import ../plum.mar
import defs.mar
import enums.mar
import exprs.mar
import imports.mar
import exports.mar
import ints.mar
import lambdas.mar
import names.mar
import parenthesized.mar
import parser.mar
import strings.mar
import structs.mar
import switches.mar

fun to_toast(bacon: Bacon): Result[Toast, Error] {
  bacon.line.is_empty() or panic("to_toast was given non-root Bacon")

  var defs = list[ToastDef]()
  var i = -1
  loop {
    i = i + 1
    if i >= bacon.children.len then break
    var this = bacon.children.get(i)

    if bacon.children.get_maybe(i + 1) is some(next) then
      if next.line == "=" then {
        var signature = this.parse_fun_signature()? or
          return error[Toast, Error](error(
            "Expected function signature.", next.src
          ))
        var children = next.children.parse_exprs()?
        if children.is_empty() then
          return error[Toast, Error](error(
            "Expected function body.", next.src
          ))
        defs.&.push(ToastDef.fun_(ToastFun {
          name = signature.name,
          params = signature.params,
          return_type = signature.return_type,
          body = ToastExpr.body(children),
        }))
        i = i + 1
        continue
      }

    if this.parse_import()? is some(import_) then {
      defs.&.push(ToastDef.import_(import_))
      continue
    }
    if this.parse_export()? is some(export) then {
      defs.&.push(ToastDef.export(export))
      continue
    }
    if this.parse_type_def()? is some(def) then {
      defs.&.push(ToastDef.type(def))
      continue
    }
    if this.parse_fun_def()? is some(def) then {
      defs.&.push(ToastDef.fun_(def))
      continue
    }
    if this.line.starts_with("#") then continue

    return error[Toast, Error](error("Couldn't parse line.", bacon.src))
  }

  ok[Toast, Error](Toast { defs = defs.to_slice() })
}
