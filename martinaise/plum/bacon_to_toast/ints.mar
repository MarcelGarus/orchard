import mod.mar

fun parse_int(parser: &LineParser): Result[Maybe[IntAndSrc], Error] {
  parser.consume_whitespace()
  var num = parser.parse_int_helper(10) or return no_match[IntAndSrc]()
  if parser.consume(":") is some then {
    var radix = num
    var actual = parser.parse_int_helper(radix.int)
      or return bad_input[IntAndSrc](error(
        "Expected number value", parser.src_of_rest()
      ))
    num = actual.int @ {radix.src ... actual.src}
  }
  parsed(num)
}

var digits = "0123456789abcdef"

fun parse_int_helper(parser: &LineParser, radix: Int): Maybe[IntAndSrc] {
  var num = 0
  var start = parser.cursor
  loop {
    if parser.current() == #_ then {
      parser.advance()
      continue
    }
    var char = parser.current()
    var digit = digits.substr(0..radix).iter().&.find(char) or break
    num = num * radix + digit
    parser.advance()
  }
  var end = parser.cursor
  if start == end then return none[IntAndSrc]()
  some(num @ parser.src_of(start..end))
}
