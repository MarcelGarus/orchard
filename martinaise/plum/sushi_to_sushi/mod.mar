import ../plum.mar

fun optimize(sushi: Sushi): Sushi {
  var optimized_sections = list[SushiSection]()
  
  for section in sushi.sections do {
    var optimized_instructions = list[SushiInstruction]()
    
    for instruction in section.instructions do {
      switch instruction
      case jump_table(targets) {
        var optimized_targets = list[SectionIndex]()
        for target in targets do
          optimized_targets.&.push(find_final_jump_target(sushi, target))
        optimized_instructions.&.push(
          SushiInstruction.jump_table(optimized_targets.to_slice())
        )
      }
      default optimized_instructions.&.push(instruction)
    }

    optimized_sections.&.push(SushiSection {
      name = section.name, instructions = optimized_instructions.to_slice()
    })
  }

  Sushi {
    entry_point = sushi.entry_point, sections = optimized_sections.to_slice()
  }
}

fun find_final_jump_target(sushi: Sushi, target: SectionIndex): SectionIndex {
  var current = target
  var visited = set[SectionIndex]()
  
  loop {
    if visited.contains(current) then return target | cycle
    visited.&.put(current)

    var section = sushi.sections.get(current.index)
    if section.instructions.len != 1 then break
    current = section.instructions.get(0).jump or break
  }
  
  current
}
