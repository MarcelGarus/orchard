import plum.mar

struct Module { path: String }

fun module(path: String): Module { Module { path } }

fun ==(a: Module, b: Module): Bool { a.path == b.path }
fun hash(hasher: &Hasher, module: Module) { hasher.hash(module.path) }

fun write[W](writer: W, module: Module) { writer.write(module.path) }

var builtin_module = Module { path = "builtins" }
fun is_builtin(module: Module): Bool { module == builtin_module }

fun file_paths(module: Module): Slice[String] {
  list(
    "{module.path}.plum",
    "{module.path}/_.plum",
  ).to_slice()
}

fun resolve_import(
  base: Module, relative_import: StringAndSrc
): Result[Module, Error] {
  var str = relative_import.string
  var parent_navigations = 0
  loop
    if str.starts_with(".") then {
      parent_navigations = parent_navigations + 1
      str = str.substr(1..str.len)
    } else break

  if parent_navigations == 0 then {
    if str == "builtins" then
      return ok[Module, Error](Module { path = "builtins" })
    return error[Module, Error](error(
      "Can't import packages yet (except \"builtins\")", relative_import.src
    ))
  }

  var path =
    "{base.path.split("/").without_last(parent_navigations - 1).join("/")}/
    '{str}"
  ok[Module, Error](Module { path })
}
