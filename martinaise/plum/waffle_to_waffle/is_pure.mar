import mod.mar

fun is_pure(body: WaffleBody): Bool {
  for local in body.locals do
    if not(local.resolve().is_pure()) then return false
  body.returns.is_pure()
}
fun is_pure(expr: WaffleExpr): Bool {
  switch expr
  case param false
  case padding true
  case byte true
  case int true
  case local true
  case aggregate(aggregate) {
    for part in aggregate do if not(part.is_pure()) then return false
    true
  }
  case part(part) part.of.is_pure()
  case switch_(switch_) {
    if not(switch_.condition.is_pure()) then return false
    for case_ in switch_.cases do if not(case_.is_pure()) then return false
    true
  }
  case call false
  case call_indirect false
  case fun_ptr true
  case lower_byte(arg)  arg.is_pure()
  case byte_to_int(arg) arg.is_pure()
  case add(args) args.is_pure()
  case subtract(args) args.is_pure()
  case multiply(args) args.is_pure()
  case divide(args) args.is_pure()
  case modulo(args) args.is_pure()
  case shift_left(args) args.is_pure()
  case shift_right(args) args.is_pure()
  case compare_zero(arg) arg.is_pure()
  case and_(args) args.is_pure()
  case or_(args)  args.is_pure()
  case xor(args)  args.is_pure()
  case malloc false
  case free false
  case load_word false
  case load_byte false
  case store_word false
  case store_byte false
  case store_bytes false
  case crash false
  case unreachable false
  case halt false
  case loop_ false
  case continue_ false
}
