import mod.mar

fun is_cheap(expr: WaffleExpr): Bool {
  switch expr
  case param false
  case local true
  case padding true
  case byte true
  case int true
  case add(args) false
  case subtract(args) false
  case multiply false
  case divide false
  case modulo false
  case shift_left false
  case shift_right false
  case and_(args) false
  case or_(args) false
  case xor(args) false
  case compare_zero(arg) arg.is_cheap()
  case aggregate(parts) {
    for part in parts do if not(part.is_cheap()) then return false
    true
  }
  case part(part) part.of.is_cheap()
  case switch_(switch_) false
  case call false
  case call_indirect false
  case fun_ptr true
  case lower_byte(arg) arg.is_cheap()
  case byte_to_int(arg) arg.is_cheap()
  case malloc false
  case free false
  case load_word false
  case load_byte false
  case store_word false
  case store_byte false
  case store_bytes false
  case crash false
  default false
}
