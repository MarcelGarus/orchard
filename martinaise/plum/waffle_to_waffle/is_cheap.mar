import mod.mar

fun is_cheap(expr: WaffleExpr): Bool {
  switch expr
  case param false
  case local true
  case padding true
  case byte true
  case int true
  case add(args) args.is_cheap()
  case subtract(args) args.is_cheap()
  case multiply false
  case divide false
  case modulo false
  case and_(args) args.is_cheap()
  case or_(args)  args.is_cheap()
  case xor(args)  args.is_cheap()
  case compare_zero(arg) arg.is_cheap()
  case aggregate(parts) {
    for part in parts do if not(part.is_cheap()) then return false
    true
  }
  case member(member) member.of.is_cheap()
  case switch_(switch_) false
  case call false
  case call_indirect false
  case function_ptr true
  case lower_byte(arg) arg.is_cheap()
  case byte_to_int(arg) arg.is_cheap()
  case malloc false
  case free false
  case load false
  case store false
  case store_bytes false
  case crash false
  default false
}
