| Egg to Egg Transformations  
| 
| These transformations convert one Egg into another Egg and they can be divided
| into two kinds:
|
| - Optimizing transformations convert the Egg to an Egg of a similar
|   abstraction level, but make it more efficient and concise. They may
|   introduce new nodes, such as when constant-folding the "lower_byte" builtin
|   to a byte literal.
| - Lowering transformations eliminate a kind of node from the Egg. For example,
|   adding bounds checks removes the "generate_array" nodes from the Egg and
|   replaces them with "unchecked_generate_non_empty_array" nodes.

import ../plum.mar
import map.mar
import passes/mod.mar
import properties/mod.mar
import visit.mar
