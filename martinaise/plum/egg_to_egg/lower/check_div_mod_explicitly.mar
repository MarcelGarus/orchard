import mod.mar

fun check_divide_and_modulo_explicitly(egg: Egg): Egg {
  var funs = map[String, EggFun]()
  for fun_ in egg.funs do
    funs.&.put(fun_.key, fun_.value.map(CheckDivideAndModulo {}))
  Egg { funs, entry_point = egg.entry_point }
}

struct CheckDivideAndModulo {}
fun map(
  id: EggId, desugar: CheckDivideAndModulo,
  builder: &EggBodyBuilder, mapping: &Map[EggId, EggId],
): EggId {
  var expr = id.map_children(desugar, mapping)
  switch expr
  case divide(args) {
    builder.assert_is_not_equal(args.b, builder.int(0), "divide by zero")
    builder.unchecked_divide(args.a, args.b)
  }
  case modulo(args) {
    builder.assert_is_not_equal(args.b, builder.int(0), "modulo by zero")
    builder.unchecked_modulo(args.a, args.b)
  }
  default builder.push(expr)
}
