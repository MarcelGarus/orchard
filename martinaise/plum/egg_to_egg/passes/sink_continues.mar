import mod.mar

fun sink_continues(id: EggId, builder: &EggBodyBuilder): EggId {
  var args = id.resolve().continue_ or return id

  | TODO: Push recurse into switch cases.
  | if args.len == 1 then if args.get(0).resolve() is switch_(switch_) then {
  |   return switch_(switch_.condition.resolve(), type, {
  |     var cases = map[String, EggBody]()
  |     for case_ in switch_.cases do
  |       cases.&.put(
  |         case_.key,
  |         EggBody {
  |           params = case_.value.params,
  |           expr = recurse(list(case_.value.expr).to_slice(), type)
              
  |         }
  |       )
  |     cases
  |   })
  | }

  id
}
