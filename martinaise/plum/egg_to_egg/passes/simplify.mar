import mod.mar

fun simplify(id: EggId, builder: &EggBodyBuilder): EggId {
  switch id.resolve()
  case member(member) {
    | Constant fold members of known structs.
    |
    | a = ...
    | b = ...
    | c = & foo: a bar: b
    | -------------------
    | member c.foo  |  a
    if member.of.resolve() is struct_(fields) then
      return fields.get(member.name)
  }
  case switch_(switch_) {
    | Constant fold switches on enums of known variants.
    |
    | a = &
    | b = | true: a
    | -----------------------
    | switch b       |  int 2
    |   true d:      |
    |     e = int 2  |
    |     e          |
    |   false f:     |
    |     g = int 3  |
    |     g          |
    if switch_.condition.resolve() is enum_(enum_) then
      return switch_.cases.get(enum_.variant).fill(enum_.payload, builder)
  }
  case call_lambda(call) {
    | Inline calls of lambda literals.
    |
    | a =
    |   lambda b:
    |     c = int 3
    |     d = add b c
    |     d
    | e = int 4
    | ----------------------------------
    | call lambda a with e  |  f = int 3
    |                       |  add e f
    if call.lambda.resolve() is inline_lambda(lambda_body) then
     return lambda_body.fill(call.args, builder)

    | Turn calls of lambda literals into calls of the function.
    if call.lambda.resolve() is raw_lambda(lambda) then {
      var full_args = list[EggId]()
      for arg in call.args do full_args.&.push(arg)
      full_args.&.push(lambda.closure)
      return builder.call(
        lambda.fun_,
        no_substitutions,
        full_args.to_slice(),
        lambda.type.plum().lambda.unwrap().return_type,
      )
    }
  }
  case unbox(box) {
    | unbox(box(x)) = x
    if box.resolve() is box(inner) then return inner
  }
  case loop_(loop_) {
    | If the loop unconditionally continues, it's a halt.
    if loop_.body.unconditionally_continues() then
      return builder.halt(loop_.body.returns.type())

    | Remove the loop if the body doesn't continue, but just runs through to
    | completion.
    if not(loop_.body.contains_continue()) then
      return loop_.body.fill(loop_.initial, builder)

    | TODO: loop without variables? remove and turn recurse into "halt" expressions
  }
  | case store_buffer_bytes(store) {
  |   if store.bytes.len == 0 then return builder.nothing()
  | }
  default id
}
