import mod.mar

fun lower_loads_and_stores(id: EggId, builder: &EggBodyBuilder): EggId {
  eprintln("lowering loads and stores")
  switch id.resolve()
  case load(load) {
    eprintln("load")
    var cursor = 0
    var parts = list[EggId]()
    loop if cursor + 8 > load.size then break else {
      parts.&.push(
        builder.load_word(builder.add(load.ptr, builder.int(cursor)))
      )
      cursor = cursor + 8
    }
    loop if cursor == load.size then break else {
      parts.&.push(
        builder.load_byte(builder.add(load.ptr, builder.int(cursor)))
      )
      cursor = cursor + 1
    }
    builder.aggregate(parts.to_slice())
  }
  case store(store) {
    eprintln("store {store.value.id}")
    var size = store.value.type().memory_layout().size
    var cursor = 0
    loop if cursor + 8 > size then break else {
      builder.store_word(
        builder.add(store.ptr, builder.int(cursor)),
        builder.part(store.value, cursor, 8),
      )
      cursor = cursor + 8
    }
    loop if cursor == size then break else {
      builder.store_byte(
        builder.add(store.ptr, builder.int(cursor)),
        builder.part(store.value, cursor, 1),
      )
      cursor = cursor + 1
    }
    builder.nothing()
  }
  default id
}
