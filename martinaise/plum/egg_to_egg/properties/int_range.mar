import mod.mar

struct IntRange { low: Maybe[Int], high: Maybe[Int] } | both bounds inclusive

var unknown_int = IntRange { low = none[Int](), high = none[Int]() }

fun int_range(id: EggId): IntRange {
  switch id.resolve()
  case int(int) IntRange { low = some(int), high = some(int) }
  case modulo(args) {
    var a = args.a.int_range()
    var b = args.b.int_range()
    if b.low is some(low) then if low >= 0 then
      if b.high is some(high) then
        return IntRange { low = some(0), high = some(high - 1) }
      else
        return IntRange { low = some(0), high = none[Int]() }
    unknown_int
  }
  default unknown_int
}
