import mod.mar

| Checks if an expression is pure. Unreachable expressions will also be treated
| as pure.
fun is_pure_biased(id: EggId): Bool {
  switch id.resolve()
  case param panic("param")
  case case_param panic("case param")
  case byte true
  case lower_byte true
  case byte_to_int true
  case int true
  case add true
  case subtract true
  case multiply true
  case divide false
  case modulo false
  case compare true
  case and_ true
  case or_ true
  case xor true
  case unchecked_divide true
  case unchecked_modulo true
  case struct_ true
  case member true
  case enum_ true
  case switch_(switch_) {
    var result = true
    for case_ in switch_.cases do
      result = result and case_.value.is_pure_biased()
    result
  }
  case inline_lambda true
  case raw_lambda true
  case call_fun(call) false
  case call_builtin false
  case call_lambda false
  case box true
  case unbox true
  case array true
  case generate_array false
  case array_get false
  case array_set false
  case array_slice false
  case array_len true
  case unchecked_generate_non_empty_array(gen) gen.generator.is_pure_biased()
  case unchecked_array_get true
  case unchecked_array_set true
  case unchecked_array_slice true
  case string true
  case type true
  case cast true
  case type_info true
  case static_to_dynamic true
  case dynamic_to_static false
  case crash false
  case unreachable true
  case halt false
  case loop_ false
  case continue_ false
  case dup false
  case drop false
  case fun_ptr true
  case call_indirect false
  case null_ptr true
  case object_new false
  case object_load true
  case object_free false
  case get_refcount false
  case set_refcount false
  case new_buffer false
  case get_buffer_length true
  case load_buffer_item false
  case store_buffer_item false
  case store_buffer_bytes false
  case free_buffer false
  case padding true
  case aggregate true
  case part true
  case switch_on_byte(switch_) {
    var result = true
    for case_ in switch_.cases do
      result = result and case_.is_pure_biased()
    result
  }
  case malloc false
  case free false
  case load false
  case store false
  case load_word false
  case load_byte false
  case store_word false
  case store_byte false
  case store_bytes false
  default false
}
fun is_pure_biased(body: EggBody): Bool {
  body.children.is_pure_biased()
}
fun is_pure_biased(ids: Slice[EggId]): Bool {
  var result = true
  for id in ids do result = result and id.is_pure_biased()
  result
}
