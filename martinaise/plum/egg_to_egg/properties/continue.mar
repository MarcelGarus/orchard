import mod.mar

fun contains_continue(body: EggBody): Bool {
  var check = false
  body.visit(CheckForContinue { check = check.& })
  check
}
struct CheckForContinue { check: &Bool }
fun visit(id: EggId, check: CheckForContinue) {
  switch id.resolve()
  case continue_ check.check.* = true
  default id.visit_children(check)
}

fun unconditionally_continues(body: EggBody): Bool {
  body.returns.unconditionally_continues(body.children)
}
fun unconditionally_continues(id: EggId, scope: Slice[EggId]): Bool {
  switch id.resolve()
  case continue_ true
  case switch_(switch_) {
    for case_ in switch_.cases do
      if not(case_.value.unconditionally_continues()) then return false
    true
  }
  default false
}