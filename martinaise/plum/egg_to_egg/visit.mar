import mod.mar

fun visit[V](fun_: EggFun, visitor: V) { fun_.body.visit(visitor) }

fallback fun visit[V](body: EggBody, visitor: V) {
  for child in body.children do child.visit(visitor)
}

fun visit_children[V](id: EggId, visitor: V) {
  switch id.resolve()
  case param {}
  case case_param {}
  case type {}
  case int {}
  case string {}
  case struct_ {}
  case enum_ {}
  case inline_lambda(body) body.visit(visitor)
  case raw_lambda {}
  case member {}
  case switch_(switch_) for case_ in switch_.cases do case_.value.visit(visitor)
  case call_fun {}
  case call_lambda {}
  case call_builtin {}
  case cast {}
  case byte {}
  case lower_byte {}
  case byte_to_int {}
  case add {}
  case subtract {}
  case multiply {}
  case divide {}
  case modulo {}
  case and_ {}
  case or_ {}
  case xor {}
  case compare {}
  case unchecked_divide {}
  case unchecked_modulo {}
  case box {}
  case unbox {}
  case array {}
  case generate_array(args) args.generator.visit(visitor)
  case array_get {}
  case array_set {}
  case array_slice {}
  case array_len {}
  case unchecked_generate_non_empty_array(args) args.generator.visit(visitor)
  case unchecked_array_get {}
  case unchecked_array_set {}
  case unchecked_array_slice {}
  case type_info {}
  case static_to_dynamic {}
  case dynamic_to_static {}
  case crash {}
  case unreachable {}
  case halt {}
  case loop_(loop_) loop_.body.visit(visitor)
  case continue_ {}
  case dup {}
  case drop {}
  case function_ptr {}
  case call_indirect {}
  case object_new {}
  case object_load {}
  case object_free {}
  case get_refcount {}
  case set_refcount {}
  case new_buffer {}
  case get_buffer_length {}
  case load_buffer_item {}
  case store_buffer_item {}
  case store_buffer_bytes {}
  case free_buffer {}
  case padding {}
  case aggregate {}
  case part {}
  case switch_on_byte(switch_)
    for case_ in switch_.cases do case_.visit(visitor)
  case malloc {}
  case free {}
  case load_word {}
  case load_byte {}
  case store_word {}
  case store_byte {}
  case store_bytes {}
}
