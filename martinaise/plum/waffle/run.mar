import mod.mar

fun run(waffle: Waffle, input: Slice[Byte]): Slice[Byte] {
  switch waffle.entry_point.run(input, waffle, no_indentation)
  case ok(value) value
  case error(error) {
    switch error
    case continue_ panic("continue outside of loop")
    case crash(message) panic("Plum program crashed: {message}")
    case halt panic("Plum program halted")
  }
}

enum NonLocalWaffleFlow { continue_: Slice[Byte], crash: String, halt }

fun run(
  fun_: String, args: Slice[Byte], waffle: Waffle, indentation: Indentation
): Result[Slice[Byte], NonLocalWaffleFlow] {
  eprintln("{indentation}{fun_} {args}")
  var fun_ = waffle.funs.get(fun_)
  var result = fun_.body.run(map(fun_.param -> args).&, waffle, indentation)
  eprintln("{indentation}-> {result.debug()}")
  result
}

fun run(
  body: WaffleBody,
  env: &Map[WaffleId, Slice[Byte]],
  waffle: Waffle,
  indentation: Indentation,
): Result[Slice[Byte], NonLocalWaffleFlow] {
  for id in body.locals do env.put(id, id.resolve().run(env, waffle, indentation)?)
  body.returns.run(env, waffle, indentation)
}

fun run(
  expr: WaffleExpr,
  env: &Map[WaffleId, Slice[Byte]],
  waffle: Waffle,
  indentation: Indentation,
): Result[Slice[Byte], NonLocalWaffleFlow] {
  eprintln("{indentation}{expr.debug().format().split("(").get(0)}")
  var result =
    switch expr
    case param unreachable()
    case padding(amount) filled_slice(amount, 16#aa.lower_byte())
    case byte(byte) list(byte).to_slice()
    case int(int) int.to_bytes()
    case local(id) env.get(id)
    case aggregate(aggregate) {
      var bytes = list[Byte]()
      for part in aggregate do bytes.&.push_all(part.run(env, waffle, indentation + 1)?)
      bytes.to_slice()
    }
    case part(part)
      part.of.run(env, waffle, indentation + 1)?.subslice(part.offset ..+ part.layout.size)
    case switch_(switch_)
      switch_.cases.get(switch_.condition.run(env, waffle, indentation + 1)?.get(0).to_int())
        .run(env, waffle, indentation + 1)?
    case fun_ptr(signature) {
      var fun_index = 0
      for fun_ in waffle.funs.iter().enumerate() do
        if fun_.item.key == signature then fun_index = fun_.index
      fun_index.to_bytes()
    }
    case call(call) call.function.run(call.args.run(env, waffle, indentation + 1)?, waffle, indentation + 1)?
    case call_indirect(call) {
      var fun_and_args = call.fun_and_args.run(env, waffle, indentation + 1)?
      var fun_index = fun_and_args.subslice(0..8).to_int()
      var args = fun_and_args.without_first(8)
      var signature = waffle.funs.iter().skip(fun_index).&.next().unwrap().key
      signature.run(args, waffle, indentation + 1)?
    }
    case lower_byte(int)
      list(int.run(env, waffle, indentation + 1)?.to_int().lower_byte()).to_slice()
    case byte_to_int(byte)
      byte.run(env, waffle, indentation + 1)?.get(0).to_int().to_bytes()
    case add(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a + ints.b}.to_bytes()
    }
    case subtract(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      var res = ints.a - ints.b
      eprintln("{indentation}{ints.a} - {ints.b} = {res}. In bytes: {res.to_bytes()}")
      {ints.a - ints.b}.to_bytes()
    }
    case multiply(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a * ints.b}.to_bytes()
    }
    case divide(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a / ints.b}.to_bytes()
    }
    case modulo(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a % ints.b}.to_bytes()
    }
    case shift_left(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a << ints.b}.to_bytes()
    }
    case shift_right(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a >> ints.b}.to_bytes()
    }
    case compare_zero(arg) {
      var int = arg.run(env, waffle, indentation + 1)?.to_int()
      switch int <=> 0
      case equal   list(0.lower_byte()).to_slice()
      case greater list(1.lower_byte()).to_slice()
      case less    list(2.lower_byte()).to_slice()
    }
    case and_(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a & ints.b}.to_bytes()
    }
    case or_(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a.or(ints.b)}.to_bytes()
    }
    case xor(args) {
      var ints = args.run(env, waffle, indentation + 1)?.to_two_ints()
      {ints.a ^ ints.b}.to_bytes()
    }
    case malloc(size) {
      var size = size.run(env, waffle, indentation + 1)?.to_int()
      var memory = uninitialized_slice[Byte](size)
      memory.data.to_int().to_bytes()
    }
    case free empty_slice[Byte]()
    case load_word(ptr) {
      var address = ptr.run(env, waffle, indentation + 1)?.to_int().to_address()
      eprintln("loaded word {Slice[Byte] { data = address, len = 8 }}")
      Slice[Byte] { data = address, len = 8 }
    }
    case load_byte(ptr) {
      var address = ptr.run(env, waffle, indentation + 1)?.to_int().to_address()
      Slice[Byte] { data = address, len = 1 }
    }
    case store_word(args) {
      var args = args.run(env, waffle, indentation + 1)?
      var ptr = args.subslice(0..8).to_int().to_address()
      var value = args.subslice(8..16).to_int()
      ptr.to_reference[Int]().* = value
      empty_slice[Byte]()
    }
    case store_byte(args) {
      var args = args.run(env, waffle, indentation + 1)?
      var ptr = args.subslice(0..8).to_int().to_address()
      var value = args.get(8)
      ptr.to_reference[Byte]().* = value
      empty_slice[Byte]()
    }
    case store_bytes(store) {
      var ptr = store.ptr.run(env, waffle, indentation + 1)?.to_int().to_address()
      for byte in store.bytes.iter().enumerate() do
        {ptr + byte.index}.to_reference[Byte]().* = byte.item
      empty_slice[Byte]()
    }
    case crash(message) {
      var message = message.run(env, waffle, indentation + 1)?
      var message = String {
        data = message.subslice(0..8).to_int().to_address(),
        len = message.subslice(8..16).to_int(),
      }
      return error[Slice[Byte], NonLocalWaffleFlow](NonLocalWaffleFlow.crash(message))
    }
    case unreachable panic("reached unreachable")
    case halt return error[Slice[Byte], NonLocalWaffleFlow](NonLocalWaffleFlow.halt)
    case loop_(loop_) {
      env.put(loop_.param, loop_.initial.run(env, waffle, indentation + 1)?)
      loop {
        switch loop_.body.run(env, waffle, indentation + 1)
        case ok(value) break(value)
        case error(non_local) {
          switch non_local
          case continue_(next) env.put(loop_.param, next)
          default return error[Slice[Byte], NonLocalWaffleFlow](non_local)
        }
      }
    }
    case continue_(continue_)
      return error[Slice[Byte], NonLocalWaffleFlow](
        NonLocalWaffleFlow.continue_(continue_.next.run(env, waffle, indentation + 1)?)
      )
  eprintln("{indentation}-> {result}")
  ok[Slice[Byte], NonLocalWaffleFlow](result)
}
