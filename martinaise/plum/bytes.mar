import plum.mar

fun to_bytes(int: Int): Slice[Byte] {
  var bytes = uninitialized_slice[Byte](8)
  for i in 0..8 do
    bytes.&.set(
      i, {int.&.to_address().to_int() + i}.to_address().to_reference[Byte]().*
    )
  bytes
}

fun to_int(bytes: Slice[Byte]): Int {
  if bytes.len != 8 then panic("needs 8 bytes")
  bytes.data.to_reference[Int]().*
}

fun to_two_ints(bytes: Slice[Byte]): Tuple2[Int, Int] {
  if bytes.len != 16 then panic("needs 16 bytes")
  tuple(bytes.subslice(0..8).to_int(), bytes.subslice(8..16).to_int())
}
