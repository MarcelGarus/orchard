import plum.mar

fun to_bytes(int: Int): Slice[Byte] {
  list(
    (int >> 0).lower_byte(),
    (int >> 8).lower_byte(),
    (int >> 16).lower_byte(),
    (int >> 24).lower_byte(),
    (int >> 32).lower_byte(),
    (int >> 40).lower_byte(),
    (int >> 48).lower_byte(),
    (int >> 56).lower_byte(),
  ).to_slice()
}

fun to_int(bytes: Slice[Byte]): Int {
  if bytes.len != 8 then panic("needs 8 bytes")
  bytes.get(0).to_int()
  + (bytes.get(1).to_int() * (1 << 8))
  + (bytes.get(2).to_int() * (1 << 16))
  + (bytes.get(3).to_int() * (1 << 24))
  + (bytes.get(4).to_int() * (1 << 32))
  + (bytes.get(5).to_int() * (1 << 40))
  + (bytes.get(6).to_int() * (1 << 48))
  + (bytes.get(7).to_int() * (1 << 56))
}

fun to_two_ints(bytes: Slice[Byte]): Tuple2[Int, Int] {
  if bytes.len != 16 then panic("needs 16 bytes")
  tuple(bytes.subslice(0..8).to_int(), bytes.subslice(8..16).to_int())
}
