## Comparisons
#
# You should implement the spaceship operator <=>(T, T): Ordering for types that
# can be compared. This allows you to use operators such as <= and functions
# such as min.

import ..bool
import ..range

enum Ordering { equal, greater, less }

fun flip(ord: Ordering): Ordering {
  switch ord
  case less Ordering.greater
  case greater Ordering.less
  case equal Ordering.equal
}

fun <[T](a: T, b: T): Bool { a <=> b is less }
fun >[T](a: T, b: T): Bool { a <=> b is greater }
fun >=[T](a: T, b: T): Bool { switch a <=> b case less false default true }
fun <=[T](a: T, b: T): Bool { switch a <=> b case greater false default true }

fun min[T](a: T, b: T): T { if a < b then a else b }
fun max[T](a: T, b: T): T { if a > b then a else b }

fun clamp[T](a: T, range: Range[T]): T { max(range.start, min(range.end.dec(), a)) }
fun clamp[T](a: T, range: OpenRange[T]): T { max(range.start, a) }

fun ==(a: Ordering, b: Ordering): Bool {
  switch a case less b is less case equal b is equal case greater b is greater
}
fun hash(ord: Ordering): Hash {
  switch ord case less 0.hash() case equal 1.hash() case greater 2.hash()
}

fun write(writer: Writer, ord: Ordering): Writer {
  switch ord
  case less writer."less"
  case equal writer."equal"
  case greater writer."greater"
}
