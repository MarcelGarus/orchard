## Maybe  
#
# Represents optional values. Like Option in Rust, but with the cooler Haskell
# name.

import ..string

enum Maybe[T] { none, some: T }

fun some[T](value: T): Maybe[T] { Maybe.some(value) }
fun none[T](): Maybe[T] { Maybe[T].none }

fun unwrap[T](maybe: Maybe[T], message: String): T { maybe or panic(message) }
fun unwrap[T](maybe: Maybe[T]): T { maybe.unwrap("called none.unwrap") }
fun flatten[T](maybe: Maybe[Maybe[T]]): Maybe[T] { maybe or none[T]() }

# Allows writing `some_maybe or default_value`.
fun or[T](maybe: Maybe[T]): ControlFlow[T, Nothing] {
  if maybe is some(t)
  then ControlFlow[T, Nothing].short_circuit(t)
  else ControlFlow[T, Nothing].evaluate_alternative
}

fun ==[T](a: Maybe[T], b: Maybe[T]): Bool {
  switch a
  case some(aa) { switch b case some(bb) aa == bb case none false }
  case none b is none
}
fun hash[T](value: Maybe[T]): Hash {
  switch value
  case some(inner) combine('s.hash(), inner.hash())
  case none 'n.hash()
}

fun write(writer: Writer, maybe: Maybe[T]): Writer {
  switch maybe case some(val) writer."some({val})" case none writer."none"
}
