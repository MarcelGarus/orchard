## Never  
#
# Never is a type with zero instances. If you write a function that accepts an
# argument of Never, it can never be called (otherwise, the caller would have
# a Never instance).
# Why do we need something like this? Some expressions always abort control
# flow, for example `return 3` or `continue` or `break(your_leg)`. These
# evaluate to the Never type. Because Never is never instantiated, it can be
# assigned to anything:
#
# foo.some_bool = return "Hi"
# 2 + if condition then 3 else break
# Maybe[Int].some(todo())

enum Never {}

fun crash(message: String): Never ground { e0 }
fun crash(): Never { crash(String { address = null, length = 0 }) }

fun unreachable(): Never { panic("unreachable") }
fun unreachable(why: String): Never { panic("unreachable: {why}") }

fun todo(): Never { panic("todo") }
fun todo(task: String): Never { panic("todo: {task}") }
